See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (5 warnings)
PMD:          FAILED (3 warnings)
Checkstyle:   FAILED (0 errors, 6 warnings)

Correctness:  12/35 tests passed
Memory:       16/16 tests passed
Timing:       26/42 tests passed

Aggregate score: 52.95%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.6K Nov 11 04:53 KdTree.java
2.6K Nov 11 04:53 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M B CO_COMPARETO_INCORRECT_FLOATING Co: The method 'compareTo()' incorrectly handles values of type 'double' when they are -0.0 or NaN. To handle these corner cases, use 'Double.compare()' or 'Float.compare()'.  At KdTree.java:[line 38]
M B CO_COMPARETO_INCORRECT_FLOATING Co: The method 'compareTo()' incorrectly handles values of type 'double' when they are -0.0 or NaN. To handle these corner cases, use 'Double.compare()' or 'Float.compare()'.  At KdTree.java:[line 43]
M C UWF_NULL_FIELD UwF: The instance (or static) variable 'root' is never assigned a non-null value.  In KdTree.java
M C UWF_NULL_FIELD UwF: The instance (or static) variable 'left' is never assigned a non-null value.  In KdTree.java
M C UWF_NULL_FIELD UwF: The instance (or static) variable 'right' is never assigned a non-null value.  In KdTree.java
Warnings generated: 5


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:20: The private instance (or static) variable 'root' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:23: The private instance (or static) variable 'isXAxis' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:24: The private instance (or static) variable 'point' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 3 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:15:8: Unused import statement for 'edu.princeton.cs.algs4.SET'. [UnusedImports]
[WARN] KdTree.java:25:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
[WARN] KdTree.java:26:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
[WARN] KdTree.java:69:15: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:70:15: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 0 errors and 5 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:22:30: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: inserting n random points and check size() after each insertion
        (size may be less than n because of duplicates)
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 2: check isEmpty() for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==> passed

Test 3: insert n random points and check contains() for n random query points
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 4: insert n random points and check nearest() for n random query points
  * 1000 random points in a 65536-by-65536 grid
  * 1000 random points in a 8192-by-8192 grid
  * 1000 random points in a 1024-by-1024 grid
  * 1000 random points in a 128-by-128 grid
  * 1000 random points in a 16-by-16 grid
==> passed

Test 5: insert n random points and check range() for n random query rectangles
  * 1000 random rectangles and points in a 65536-by-65536 grid
  * 1000 random rectangles and points in a 8192-by-8192 grid
  * 1000 random rectangles and points in a 1024-by-1024 grid
  * 1000 random rectangles and points in a 128-by-128 grid
  * 1000 random rectangles and points in a 16-by-16 grid
==> passed

Test 6: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
==> passed

Test 7: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==> passed

Test 8: check whether two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
    - failed after inserting point 4 of 5
    - student   size()    = 4
    - reference size()    = 3
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.0 1.0
      B  0.0 0.0
      C  1.0 0.0
      D  1.0 0.0

  * 10 random general points in a 4-by-4 grid
    - failed after inserting point 5 of 10
    - student   size()    = 5
    - reference size()    = 4
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.75 1.0
      B  0.75 0.25
      C  0.0 0.25
      D  0.5 0.0
      E  0.0 0.25

  * 50 random general points in a 8-by-8 grid
    - failed after inserting point 15 of 50
    - student   size()    = 15
    - reference size()    = 14
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.625 0.75
      B  0.375 0.75
      C  0.625 0.5
      D  0.125 0.0
      E  1.0 0.125
      F  0.75 0.75
      G  0.375 0.125
      H  0.0 0.625
      I  0.0 0.25
      J  0.875 0.5
      K  1.0 0.5
      L  0.75 0.5
      M  0.375 0.625
      N  0.625 0.625
      O  0.375 0.125

  * 100000 random general points in a 16-by-16 grid
    - failed after inserting point 27 of 100000
    - student   size()    = 27
    - reference size()    = 26
    - student   isEmpty() = false
    - reference isEmpty() = false

  * 100000 random general points in a 128-by-128 grid
    - failed after inserting point 272 of 100000
    - student   size()    = 272
    - reference size()    = 271
    - student   isEmpty() = false
    - reference isEmpty() = false

  * 100000 random general points in a 1024-by-1024 grid
    - failed after inserting point 914 of 100000
    - student   size()    = 914
    - reference size()    = 913
    - student   isEmpty() = false
    - reference isEmpty() = false

==> FAILED

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
    - failed on trial 7620 of 10000
    - query point          = (0.5, 0.5)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  0.5 0.5

  * input5.txt
    - failed on trial 168 of 10000
    - query point          = (0.2, 0.3)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6

  * input10.txt
==> FAILED

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
    - failed on trial 5 of 10000
    - query point          = (0.0, 0.0)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  0.0 0.0

  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 13 of 10000
    - query point          = (0.125, 0.125)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  0.125 0.125
      B  0.25 0.625
      C  0.375 0.375
      D  0.75 1.0
      E  0.875 0.25

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point          = (0.6875, 0.8125)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  0.5 0.625
      B  0.3125 0.125
      C  0.125 0.5625
      D  0.0 0.5
      E  0.6875 0.8125
      F  0.9375 0.0
      G  0.375 0.875
      H  0.5625 0.1875
      I  0.25 0.4375
      J  0.0625 0.9375

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 58 of 10000
    - query point          = (0.15625, 0.78125)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  0.125 0.15625
      B  0.65625 0.125
      C  1.0 0.5
      D  0.75 1.0
      E  0.78125 0.1875
      F  0.25 0.84375
      G  0.1875 0.4375
      H  0.34375 0.40625
      I  0.28125 0.8125
      J  0.15625 0.78125
      K  0.5 0.0
      L  0.8125 0.6875
      M  0.46875 0.875
      N  0.96875 0.5625
      O  0.9375 0.28125
      P  0.03125 0.9375
      Q  0.6875 0.3125
      R  0.3125 0.09375
      S  0.71875 0.96875
      T  0.53125 0.65625

  * 500 random non-degenerate points in a 1024-by-1024 grid
    - failed on trial 81 of 10000
    - query point          = (0.7646484375, 0.220703125)
    - student   contains() = false
    - reference contains() = true

  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> FAILED

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
    - failed on trial 1 of 10000
    - query point          = (1.0, 0.0)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  1.0 0.0

  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 2 of 10000
    - query point          = (0.25, 0.25)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  1.0 1.0
      B  0.0 0.5
      C  0.0 0.25
      D  0.75 0.5
      E  0.5 1.0
      F  0.25 0.75
      G  0.5 0.25
      H  0.25 0.25
      I  1.0 0.0
      J  0.5 0.0

  * 20 random distinct points in a 8-by-8 grid
    - failed on trial 8 of 10000
    - query point          = (0.75, 1.0)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  0.875 0.625
      B  0.625 0.125
      C  0.25 0.5
      D  0.875 0.875
      E  1.0 0.75
      F  0.625 0.25
      G  0.0 0.375
      H  0.75 0.25
      I  0.875 0.75
      J  0.625 0.875
      K  0.5 1.0
      L  0.375 0.875
      M  0.5 0.125
      N  0.75 1.0
      O  0.25 0.875
      P  1.0 1.0
      Q  0.25 1.0
      R  0.5 0.625
      S  0.875 0.125
      T  0.75 0.5

  * 10000 random distinct points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point          = (0.8828125, 0.6015625)
    - student   contains() = false
    - reference contains() = true

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed on trial 20 of 10000
    - query point          = (0.712890625, 0.0634765625)
    - student   contains() = false
    - reference contains() = true

  * 100000 random distinct points in a 65536-by-65536 grid
    - failed on trial 2238 of 10000
    - query point          = (0.6054534912109375, 0.4362640380859375)
    - student   contains() = false
    - reference contains() = true

==> FAILED

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
    - failed on trial 1 of 10000
    - query point          = (1.0, 1.0)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point          = (0.3125, 0.1875)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 2 of 10000
    - query point          = (0.3515625, 0.3203125)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 133 of 10000
    - query point          = (0.87109375, 0.4443359375)
    - student   contains() = false
    - reference contains() = true

==> FAILED

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
    - failed on trial 1 of 10000
    - query rectangle = [0.314, 0.591] x [0.277, 0.868]
    - sequence of points inserted: 
      A  0.5 0.5
    - student   range():  empty
    - reference range():  A 

  * input5.txt
    - failed on trial 1 of 10000
    - query rectangle = [0.234, 0.88] x [0.552, 0.906]
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student   range():  empty
    - reference range():  D 

  * input10.txt
==> FAILED

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.1875, 0.9375] x [0.125, 0.375]
    - sequence of points inserted: 
      A  0.03125 0.53125
      B  0.4375 0.84375
      C  0.28125 0.8125
      D  0.75 0.5625
      E  0.84375 0.3125
      F  0.96875 0.90625
      G  0.59375 0.0
      H  0.53125 0.625
      I  0.125 0.75
      J  0.46875 0.15625
      K  0.375 0.875
      L  0.34375 1.0
      M  0.0625 0.40625
      N  0.625 0.4375
      O  0.875 0.34375
      P  0.09375 0.65625
      Q  1.0 0.9375
      R  0.0 0.59375
      S  0.3125 0.03125
      T  0.15625 0.78125
    - student   range():  empty
    - reference range():  E J O 

  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.225830078125, 0.367340087890625] x [0.322845458984375, 0.986968994140625]
    - student   range():  empty
    - reference range():  I S Q E C H O K H Z L Q Z B X T H H Y U Z V C F C C ...

==> FAILED

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 0.5] x [0.0, 1.0]
    - sequence of points inserted: 
      A  1.0 1.0
      B  0.5 0.5
    - student   range():  empty
    - reference range():  B 

  * 10 random distinct points and random rectangles in a 4-by-4 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.5, 0.75] x [0.25, 1.0]
    - sequence of points inserted: 
      A  0.0 0.0
      B  0.75 0.0
      C  0.5 0.5
      D  0.25 0.5
      E  0.25 0.0
      F  0.0 0.25
      G  1.0 1.0
      H  0.5 0.75
      I  0.75 0.5
      J  0.0 0.5
    - student   range():  empty
    - reference range():  C H I 

  * 20 random distinct points and random rectangles in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.375, 0.75] x [0.125, 0.875]
    - sequence of points inserted: 
      A  0.25 0.625
      B  0.5 0.875
      C  0.75 1.0
      D  0.875 0.625
      E  0.875 0.0
      F  0.375 0.5
      G  0.375 0.375
      H  0.5 0.625
      I  0.75 0.5
      J  0.125 0.25
      K  0.5 0.375
      L  0.125 0.125
      M  1.0 0.5
      N  0.625 0.625
      O  0.75 0.625
      P  0.0 1.0
      Q  0.125 0.625
      R  0.625 1.0
      S  0.125 0.875
      T  0.375 0.25
    - student   range():  empty
    - reference range():  B F G K T H I N O 

  * 100 random distinct points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.125, 1.0] x [0.5625, 0.875]
    - student   range():  empty
    - reference range():  S A E B V T E J V F L N W Q N X D J V P N R K O I R ...

  * 1000 random distinct points and random rectangles in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.40625, 0.921875] x [0.34375, 0.515625]
    - student   range():  empty
    - reference range():  A E O N T A R C F D W L F U D Z S Y S Z X O C H Z M ...

  * 10000 random distinct points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.375, 0.875] x [0.1796875, 0.921875]
    - student   range():  empty
    - reference range():  A K P Q X Y K D M E Q D R Q R X W Y W M Q E B A T Q ...

==> FAILED

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.5, 0.5] x [0.5, 1.0]
    - student   range():  empty
    - reference range():  W F 

  * 5000 random general points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.6875, 0.6875] x [0.125, 0.375]
    - student   range():  empty
    - reference range():  V K P X N 

  * 5000 random general points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.1796875, 0.203125] x [0.0078125, 0.4296875]
    - student   range():  empty
    - reference range():  F N B E O X M K E F Z U E T Y W I V O R L S C Q Y J ...

  * 5000 random general points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.2666015625, 0.283203125] x [0.0068359375, 0.2900390625]
    - student   range():  empty
    - reference range():  E Q F M I R F Z O X Y S O B G H E E C X L J E V E A ...

==> FAILED

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
    - failed on trial 0 of 5
    - query rectangle = [0.0, 0.25] x [0.0, 0.25]
    - sequence of points inserted: 
      A  0.0 0.0
      B  0.0 1.0
      C  1.0 1.0
      D  1.0 0.0
      E  0.5 0.5
    - student   range():  empty
    - reference range():  A 

  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
    - failed on trial 0 of 10
    - query rectangle = [0.625, 0.875] x [0.0, 0.125]
    - sequence of points inserted: 
      A  0.75 0.0
      B  0.75 0.5
      C  1.0 0.0
      D  0.25 0.5
      E  0.25 0.75
      F  0.25 0.25
      G  0.5 0.5
      H  1.0 0.75
      I  0.0 0.25
      J  0.75 1.0
    - student   range():  empty
    - reference range():  A 

  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
    - failed on trial 0 of 20
    - query rectangle = [0.0625, 0.1875] x [0.5625, 0.6875]
    - sequence of points inserted: 
      A  0.125 0.625
      B  0.875 0.5
      C  0.625 0.0
      D  0.875 0.625
      E  0.5 0.25
      F  0.5 0.625
      G  0.375 0.5
      H  1.0 0.375
      I  0.5 0.125
      J  0.875 0.875
      K  0.25 0.75
      L  0.5 0.125
      M  0.375 0.875
      N  0.125 1.0
      O  0.25 0.5
      P  1.0 0.375
      Q  0.625 0.0
      R  0.25 0.875
      S  0.5 0.5
      T  0.75 0.625
    - student   range():  empty
    - reference range():  A 

  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.44921875, 0.45703125] x [0.56640625, 0.57421875]
    - student   range():  empty
    - reference range():  A 

  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.51708984375, 0.51806640625] x [0.99560546875, 0.99658203125]
    - student   range():  empty
    - reference range():  A 

  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.7887802124023438, 0.7887954711914062] x [0.16568756103515625, 0.16570281982421875]
    - student   range():  empty
    - reference range():  A 

==> FAILED

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.76, 0.94] x [0.24, 0.38]
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference kd-tree nodes involved in calls to Point2D methods:
      A E 
    - failed on trial 1 of 1000

  * input10.txt
    - student range() returns wrong set of points
    - student   range():  empty
    - reference range():  A B G H I 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.34, 0.88] x [0.33, 0.94]
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference kd-tree nodes involved in calls to Point2D methods:
      A C D F B G J H I 
    - failed on trial 1 of 1000

==> FAILED

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.0, 0.5] x [0.75, 1.0]
    - sequence of points inserted: 
      A  1.0 0.0
      B  0.25 0.25
      C  0.75 0.5
    - student kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B C 
    - failed on trial 1 of 1000

  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.875, 1.0] x [0.125, 0.25]
    - sequence of points inserted: 
      A  0.75 0.875
      B  0.125 0.5
      C  0.625 0.75
      D  0.25 0.0
      E  0.0 1.0
      F  0.375 0.625
    - student kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference kd-tree nodes involved in calls to Point2D methods:
      A 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
    - student range() returns wrong set of points
    - student   range():  empty
    - reference range():  J 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.25, 0.75] x [0.625, 0.875]
    - sequence of points inserted: 
      A  0.3125 0.9375
      B  0.375 0.375
      C  0.5 0.4375
      D  0.0625 0.5
      E  0.1875 0.25
      F  0.5625 1.0
      G  0.125 0.8125
      H  0.4375 0.0625
      I  0.875 0.0
      J  0.625 0.75
    - student kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference kd-tree nodes involved in calls to Point2D methods:
      A D G B C F J 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
    - student range() returns wrong set of points
    - student   range():  empty
    - reference range():  A K N M S 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.40625, 0.78125] x [0.25, 0.71875]
    - sequence of points inserted: 
      A  0.65625 0.59375
      B  0.125 0.0625
      C  0.9375 0.40625
      D  0.0625 0.375
      E  0.8125 0.03125
      F  0.96875 1.0
      G  0.28125 0.9375
      H  0.84375 0.6875
      I  0.15625 0.96875
      J  0.3125 0.125
      K  0.46875 0.34375
      L  0.21875 0.75
      M  0.53125 0.65625
      N  0.59375 0.28125
      O  0.0 0.8125
      P  0.4375 0.15625
      Q  0.375 0.3125
      R  0.75 0.90625
      S  0.5 0.625
      T  0.34375 0.5
    - student kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B D G J K N P Q M S T C E F H R 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
    - student range() returns wrong set of points
    - student   range():  empty
    - reference range():  C G B M N S X A T V E P R Y H W I L O 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.109375, 0.921875] x [0.09375, 0.875]
    - number of entries in student   solution: 0
    - number of entries in reference solution: 28
    - 28 missing entries in student solution, including:
      '(0.71875, 0.9375)'

    - failed on trial 1 of 1000

==> FAILED

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
    - failed on trial 1 of 10000
    - student   nearest()  = (0.319, 0.259)
    - reference nearest()  = null

  * input1.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.5 0.5
    - query point                   = (0.903, 0.616)
    - student   nearest()           = (0.903, 0.616)
    - reference nearest()           = (0.5, 0.5)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.175865
    - (0.903, 0.616) was not inserted into data structure

  * input5.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.727, 0.382)
    - student   nearest()           = (0.727, 0.382)
    - reference nearest()           = (0.7, 0.2)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.033853
    - (0.727, 0.382) was not inserted into data structure

  * input10.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.008, 0.823)
    - student   nearest()           = (0.008, 0.823)
    - reference nearest()           = (0.083, 0.51)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.103594
    - (0.008, 0.823) was not inserted into data structure

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.0 0.625
      B  0.75 0.25
      C  1.0 0.75
      D  0.625 0.5
      E  0.875 0.125
    - query point                   = (0.5, 0.875)
    - student   nearest()           = (0.5, 0.875)
    - reference nearest()           = (0.625, 0.5)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.15625
    - (0.5, 0.875) was not inserted into data structure

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.8125 0.3125
      B  0.0625 0.8125
      C  0.125 0.5
      D  1.0 0.5625
      E  0.5 0.25
      F  0.625 0.6875
      G  0.3125 0.0
      H  0.5625 0.875
      I  0.375 0.125
      J  0.1875 0.375
    - query point                   = (0.4375, 0.625)
    - student   nearest()           = (0.4375, 0.625)
    - reference nearest()           = (0.625, 0.6875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0390625
    - (0.4375, 0.625) was not inserted into data structure

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.78125 0.75
      B  0.34375 0.0625
      C  0.5 0.40625
      D  0.40625 0.0
      E  0.5625 0.15625
      F  0.59375 0.34375
      G  0.03125 0.65625
      H  0.84375 0.8125
      I  0.46875 0.90625
      J  0.15625 0.9375
      K  0.375 0.4375
      L  0.21875 0.71875
      M  0.125 0.46875
      N  0.625 0.625
      O  0.96875 0.28125
      P  0.6875 0.375
      Q  0.8125 0.125
      R  0.75 0.03125
      S  0.90625 0.84375
      T  0.28125 0.6875
    - query point                   = (1.0, 0.53125)
    - student   nearest()           = (1.0, 0.53125)
    - reference nearest()           = (0.96875, 0.28125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0634765625
    - (1.0, 0.53125) was not inserted into data structure

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query point                   = (0.109375, 0.5)
    - student   nearest()           = (0.109375, 0.5)
    - reference nearest()           = (0.171875, 0.421875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.010009765625
    - (0.109375, 0.5) was not inserted into data structure

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.389923095703125, 0.0395050048828125)
    - student   nearest()           = (0.389923095703125, 0.0395050048828125)
    - reference nearest()           = (0.3881072998046875, 0.0358734130859375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000016485573724
    - (0.389923095703125, 0.0395050048828125) was not inserted into data structure

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.0 0.5
      B  0.75 0.5
      C  0.75 0.25
      D  1.0 0.0
      E  0.5 0.0
      F  0.0 0.75
      G  1.0 0.5
      H  1.0 0.25
      I  0.0 0.0
      J  0.25 1.0
    - query point                   = (1.0, 0.75)
    - student   nearest()           = (1.0, 0.75)
    - reference nearest()           = (1.0, 0.5)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0625
    - (1.0, 0.75) was not inserted into data structure

  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.875 0.75
      B  1.0 0.5
      C  0.625 0.375
      D  0.25 0.375
      E  0.125 0.5
      F  0.5 0.125
      G  0.125 0.125
      H  0.75 0.125
      I  0.625 0.75
      J  0.625 0.875
      K  0.375 0.0
      L  1.0 0.375
      M  0.875 0.125
      N  1.0 0.75
      O  0.75 0.75
    - query point                   = (0.875, 0.0)
    - student   nearest()           = (0.875, 0.0)
    - reference nearest()           = (0.875, 0.125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.015625
    - (0.875, 0.0) was not inserted into data structure

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.25 0.5625
      B  0.6875 0.0
      C  0.125 0.625
      D  0.8125 0.0625
      E  1.0 0.9375
      F  0.5 0.6875
      G  0.0625 0.0
      H  0.875 0.0625
      I  0.3125 0.9375
      J  0.25 0.1875
      K  0.5 1.0
      L  0.1875 0.5
      M  0.5625 0.375
      N  0.5 0.4375
      O  0.375 0.0625
      P  0.5625 0.8125
      Q  0.0 0.9375
      R  0.0625 0.25
      S  0.8125 0.5
      T  0.3125 0.8125
    - query point                   = (0.75, 1.0)
    - student   nearest()           = (0.75, 1.0)
    - reference nearest()           = (0.5, 1.0)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0625
    - (0.75, 1.0) was not inserted into data structure

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point                   = (0.40625, 0.71875)
    - student   nearest()           = (0.40625, 0.71875)
    - reference nearest()           = (0.40625, 0.6875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0009765625
    - (0.40625, 0.71875) was not inserted into data structure

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.8627471923828125, 0.34405517578125)
    - student   nearest()           = (0.8627471923828125, 0.34405517578125)
    - reference nearest()           = (0.86376953125, 0.3538818359375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000097608426586
    - (0.8627471923828125, 0.34405517578125) was not inserted into data structure

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point                   = (0.9453125, 0.640625)
    - student   nearest()           = (0.9453125, 0.640625)
    - reference nearest()           = (0.9453125, 0.6484375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00006103515625
    - (0.9453125, 0.640625) was not inserted into data structure

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point                   = (0.5107421875, 0.841796875)
    - student   nearest()           = (0.5107421875, 0.841796875)
    - reference nearest()           = (0.5185546875, 0.841796875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00006103515625
    - (0.5107421875, 0.841796875) was not inserted into data structure

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.64, 0.0)
    - reference nearest() = (0.7, 0.2)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0436
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.64, 0.0)
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C E 
    - failed on trial 1 of 1000

  * input10.txt
    - student   nearest() = (0.25, 0.87)
    - reference nearest() = (0.32, 0.708)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.031144
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.25, 0.87)
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A C F B H I 
    - failed on trial 1 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (0.75, 0.875)
    - reference nearest() = (0.25, 0.75)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.265625
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.75, 0.875)
    - sequence of points inserted: 
      A  1.0 0.0
      B  0.25 0.75
      C  0.0 0.5
      D  0.125 0.25
      E  0.375 0.125
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.6875, 0.8125)
    - reference nearest() = (0.8125, 0.875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.01953125
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.6875, 0.8125)
    - sequence of points inserted: 
      A  0.625 0.3125
      B  0.875 0.0
      C  1.0 0.75
      D  0.1875 0.1875
      E  0.125 0.9375
      F  0.375 0.6875
      G  0.0 0.25
      H  0.9375 0.375
      I  0.8125 0.875
      J  0.5 1.0
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C H I D E F J 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.4375, 0.0)
    - reference nearest() = (0.3125, 0.125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.03125
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.4375, 0.0)
    - sequence of points inserted: 
      A  0.25 0.59375
      B  0.59375 0.25
      C  0.875 0.28125
      D  0.03125 0.6875
      E  0.8125 0.5625
      F  0.96875 0.5
      G  0.5 0.46875
      H  0.40625 0.96875
      I  0.625 0.375
      J  0.75 0.9375
      K  0.0625 0.84375
      L  0.90625 1.0
      M  0.3125 0.125
      N  0.125 0.1875
      O  0.375 0.8125
      P  0.28125 0.71875
      Q  0.15625 0.78125
      R  0.09375 0.03125
      S  0.53125 0.875
      T  0.78125 0.53125
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B M 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.609375, 0.8125)
    - reference nearest() = (0.59375, 0.703125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.01220703125
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 10
    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.359375, 0.890625)
    - reference nearest() = (0.3515625, 0.9609375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0050048828125
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 12
    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.814453125, 0.986328125)
    - reference nearest() = (0.8212890625, 0.9853515625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00004768371582
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 14
    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
  * nearest()
    - failed on trial 1 of 10
    - student   nearest()  = (0.6875, 0.8125)
    - reference nearest()  = null

  * range()
==> FAILED

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
    - fails to throw an exception when calling add() with a null argument

  * argument to contains() is null
    - fails to throw an exception when calling contains() with a null argument

  * argument to range() is null
    - fails to throw an exception when calling range() with a null argument

  * argument to nearest() is null
    - fails to throw an exception when calling nearest() with a null argument

==> FAILED

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = (0.875, 0.4375)
    - reference nearest()  = (0.9375, 0.125)
    - (0.875, 0.4375) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.1015625
    - sequence of operations was:
           st.insert(0.9375, 0.125)
           st.nearest((0.875, 0.4375))   ==>  (0.875, 0.4375)

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = (0.5, 0.9140625)
    - reference nearest()  = (0.3203125, 0.09375)
    - (0.5, 0.9140625) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.7052001953125
    - sequence of operations was:
           st.insert(0.3203125, 0.09375)
           st.nearest((0.5, 0.9140625))   ==>  (0.5, 0.9140625)

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - student   nearest()  = (0.263671875, 0.6728515625)
    - reference nearest()  = (0.4384765625, 0.6162109375)
    - (0.263671875, 0.6728515625) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.033764839172363
    - sequence of operations was:
           st.insert(0.4384765625, 0.6162109375)
           st.range([0.0068359375, 0.1328125] x [0.3798828125, 0.50390625])  ==>  empty
           st.insert(0.5, 0.1162109375)
           st.nearest((0.263671875, 0.6728515625))   ==>  (0.263671875, 0.6728515625)

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (0.4979248046875, 0.7567138671875)
    - reference nearest()  = (0.2625732421875, 0.8958740234375)
    - (0.4979248046875, 0.7567138671875) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.074755907058716
    - sequence of operations was:
           st.insert(0.2625732421875, 0.8958740234375)
           st.isEmpty()  ==>  false
           st.nearest((0.4979248046875, 0.7567138671875))   ==>  (0.4979248046875, 0.7567138671875)

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 7 of 20000
    - student   nearest()  = (0.0694122314453125, 0.1754150390625)
    - reference nearest()  = (0.3064422607421875, 0.1844482421875)
    - (0.0694122314453125, 0.1754150390625) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.056264833547175
    - sequence of operations was:
           st.insert(0.3064422607421875, 0.1844482421875)
           st.contains((0.3798980712890625, 0.0826568603515625))  ==>  false
           st.insert(0.0042724609375, 0.75360107421875)
           st.range([0.6351776123046875, 0.6985626220703125] x [0.6178741455078125, 0.6233062744140625])  ==>  empty
           st.size()  ==>  2
           st.insert(0.403961181640625, 0.64794921875)
           st.nearest((0.0694122314453125, 0.1754150390625))   ==>  (0.0694122314453125, 0.1754150390625)

==> FAILED

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = (0.0, 0.0)
    - reference nearest()  = (1.0, 1.0)
    - (0.0, 0.0) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 2
    - sequence of operations was:
           st.insert(1.0, 1.0)
           st.nearest((0.0, 0.0))   ==>  (0.0, 0.0)

  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (0.0, 0.25)
    - reference nearest()  = (0.1875, 0.25)
    - (0.0, 0.25) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.03515625
    - sequence of operations was:
           st.insert(0.125, 0.4375)
           st.insert(0.1875, 0.25)
           st.nearest((0.0, 0.25))   ==>  (0.0, 0.25)

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = (0.7265625, 0.2421875)
    - reference nearest()  = (0.4140625, 0.0390625)
    - (0.7265625, 0.2421875) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.138916015625
    - sequence of operations was:
           st.insert(0.4140625, 0.0390625)
           st.nearest((0.7265625, 0.2421875))   ==>  (0.7265625, 0.2421875)

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   nearest()  = (0.5361328125, 0.4501953125)
    - reference nearest()  = (0.775390625, 0.3740234375)
    - (0.5361328125, 0.4501953125) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.063046455383301
    - sequence of operations was:
           st.insert(0.884765625, 0.0888671875)
           st.insert(0.47265625, 0.9912109375)
           st.range([0.556640625, 0.5966796875] x [0.490234375, 0.798828125])  ==>  empty
           st.insert(0.775390625, 0.3740234375)
           st.nearest((0.5361328125, 0.4501953125))   ==>  (0.5361328125, 0.4501953125)

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 7 of 20000
    - student   nearest()  = (0.0701904296875, 0.930908203125)
    - reference nearest()  = (0.03955078125, 0.3428955078125)
    - (0.0701904296875, 0.930908203125) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.346697717905045
    - sequence of operations was:
           st.insert(0.03955078125, 0.3428955078125)
           st.contains((0.180908203125, 0.5833740234375))  ==>  false
           st.contains((0.6363525390625, 0.88720703125))  ==>  false
           st.range([0.321044921875, 0.62158203125] x [0.7642822265625, 0.9410400390625])  ==>  empty
           st.size()  ==>  1
           st.insert(0.96240234375, 0.25341796875)
           st.nearest((0.0701904296875, 0.930908203125))   ==>  (0.0701904296875, 0.930908203125)

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 13 of 20000
    - student   nearest()  = (0.616790771484375, 0.8930816650390625)
    - reference nearest()  = (0.5841064453125, 0.607666015625)
    - (0.616790771484375, 0.8930816650390625) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.082530358107761
    - sequence of operations was:
           st.insert(0.749908447265625, 0.2888946533203125)
           st.size()  ==>  1
           st.contains((0.838836669921875, 0.8807220458984375))  ==>  false
           st.insert(0.8694915771484375, 0.57476806640625)
           st.range([0.4632110595703125, 0.4730224609375] x [0.7119903564453125, 0.934539794921875])  ==>  empty
           st.range([0.1561737060546875, 0.70245361328125] x [0.4355010986328125, 0.4940338134765625])  ==>  empty
           st.insert(0.9116058349609375, 0.1538238525390625)
           st.insert(0.5841064453125, 0.607666015625)
           st.insert(0.7537994384765625, 0.0959625244140625)
           st.isEmpty()  ==>  false
           st.insert(0.2706298828125, 0.591644287109375)
           st.contains((0.4499053955078125, 0.6851959228515625))  ==>  false
           st.nearest((0.616790771484375, 0.8930816650390625))   ==>  (0.616790771484375, 0.8930816650390625)

==> FAILED

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - rectangle = [0.0, 1.0] x [0.0, 0.0]
    - student   range():  empty
    - reference range():  N 
    - sequence of operations was:
           st.insert(0.0, 0.0)
           st.insert(0.0, 1.0)
           st.insert(0.0, 0.0)
           st.range([0.0, 1.0] x [0.0, 0.0])  ==>  empty

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (0.0625, 1.0)
    - reference nearest()  = (0.875, 0.875)
    - (0.0625, 1.0) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.67578125
    - sequence of operations was:
           st.insert(0.875, 0.875)
           st.range([0.4375, 0.75] x [0.125, 0.4375])  ==>  empty
           st.nearest((0.0625, 1.0))   ==>  (0.0625, 1.0)

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (0.6953125, 0.859375)
    - reference nearest()  = (0.96875, 0.5703125)
    - (0.6953125, 0.859375) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.1583251953125
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.96875, 0.5703125)
           st.nearest((0.6953125, 0.859375))   ==>  (0.6953125, 0.859375)

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (0.8828125, 0.154296875)
    - reference nearest()  = (0.76953125, 0.8359375)
    - (0.8828125, 0.154296875) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.477466583251953
    - sequence of operations was:
           st.insert(0.76953125, 0.8359375)
           st.insert(0.2998046875, 0.6630859375)
           st.nearest((0.8828125, 0.154296875))   ==>  (0.8828125, 0.154296875)

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 7 of 20000
    - student   nearest()  = (0.6068115234375, 0.95751953125)
    - reference nearest()  = (0.6826171875, 0.34521484375)
    - (0.6068115234375, 0.95751953125) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.380663529038429
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.isEmpty()  ==>  true
           st.isEmpty()  ==>  true
           st.size()  ==>  0
           st.insert(0.6826171875, 0.34521484375)
           st.size()  ==>  1
           st.nearest((0.6068115234375, 0.95751953125))   ==>  (0.6068115234375, 0.95751953125)

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (0.15057373046875, 0.2574462890625)
    - reference nearest()  = (0.647979736328125, 0.8720703125)
    - (0.15057373046875, 0.2574462890625) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.625175424851477
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.647979736328125, 0.8720703125)
           st.nearest((0.15057373046875, 0.2574462890625))   ==>  (0.15057373046875, 0.2574462890625)

==> FAILED

Test 10: insert n random points into two different

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.