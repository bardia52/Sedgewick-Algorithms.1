See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (6 warnings)
PMD:          FAILED (12 warnings)
Checkstyle:   FAILED (0 errors, 5 warnings)

Correctness:  3/36 tests passed
Memory:       16/16 tests passed
Timing:       26/42 tests passed

Aggregate score: 37.38%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.5K Oct 21 05:11 KdTree.java
1.8K Oct 21 05:11 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M B CO_COMPARETO_INCORRECT_FLOATING Co: The method 'compareTo()' incorrectly handles values of type 'double' when they are -0.0 or NaN. To handle these corner cases, use 'Double.compare()' or 'Float.compare()'.  At KdTree.java:[line 42]
M B CO_COMPARETO_INCORRECT_FLOATING Co: The method 'compareTo()' incorrectly handles values of type 'double' when they are -0.0 or NaN. To handle these corner cases, use 'Double.compare()' or 'Float.compare()'.  At KdTree.java:[line 37]
L C UWF_UNWRITTEN_FIELD UwF: The instance (or static) variable 'xAxis' is never initialized; all reads of it will return the default value (0 or null). Check for errors (should it have been initialized?), or remove if useless.  At KdTree.java:[line 35]
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'left' is never read. Consider removing it from the class.  At KdTree.java:[line 30]
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'pointTree' is never read. Consider removing it from the class.  At KdTree.java:[line 51]
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'right' is never read. Consider removing it from the class.  At KdTree.java:[line 31]
Warnings generated: 6


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:19: Avoid unused private instance (or static) variables, such as 'pointTree'. [UnusedPrivateField]
KdTree.java:19: Can you replace the instance (or static) variable 'pointTree' with a local variable? [SingularField]
KdTree.java:19: The private instance (or static) variable 'pointTree' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:20: The private instance (or static) variable 'numPoints' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:24: The private instance (or static) variable 'point' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:65: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
KdTree.java:74: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
KdTree.java:89: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PointSET.java:19: The private instance (or static) variable 'pointTree' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PointSET.java:20: The private instance (or static) variable 'numPoints' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PointSET.java:50: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PointSET.java:65: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 12 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:22:19: The class 'kdTreeNode' must start with an uppercase letter and use CamelCase. [TypeName]
[WARN] KdTree.java:25:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
[WARN] KdTree.java:26:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
Checkstyle ends with 0 errors and 3 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:19:13: You should not need to use the 'SET' data type in this program. [IllegalType]
[WARN] KdTree.java:22:30: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: inserting n random points and check size() after each insertion
        (size may be less than n because of duplicates)
  * 100000 random points in a 65536-by-65536 grid
    - failed on trial 1 of 100000
    - student   size() = 0
    - reference size() = 1

  * 100000 random points in a 8192-by-8192 grid
    - failed on trial 1 of 100000
    - student   size() = 0
    - reference size() = 1

  * 100000 random points in a 1024-by-1024 grid
    - failed on trial 1 of 100000
    - student   size() = 0
    - reference size() = 1

  * 100000 random points in a 128-by-128 grid
    - failed on trial 1 of 100000
    - student   size() = 0
    - reference size() = 1

  * 100000 random points in a 16-by-16 grid
    - failed on trial 1 of 100000
    - student   size() = 0
    - reference size() = 1

==> FAILED

Test 2: check isEmpty() for n = 0, 1, and 2 points
  * 0 points
  * 1 point
    - student isEmpty()   = true
    - student size()      = 0
    - reference isEmpty() = false
    - reference size()    = 1
  * 2 points
    - student isEmpty()   = true
    - student size()      = 0
    - reference isEmpty() = false
    - reference size()    = 2
==> FAILED

Test 3: insert n random points and check contains() for n random query points
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 4: insert n random points and check nearest() for n random query points
  * 1000 random points in a 65536-by-65536 grid
    - failed on trial 1 of 1000
    - student   nearest()           = (0.9514617919921875, 0.6301116943359375)
    - reference nearest()           = (0.93585205078125, 0.6264190673828125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000257299514487
    - (0.9514617919921875, 0.6301116943359375) was not inserted into the data structure

  * 1000 random points in a 8192-by-8192 grid
    - failed on trial 1 of 1000
    - student   nearest()           = (0.5308837890625, 0.9554443359375)
    - reference nearest()           = (0.5396728515625, 0.953857421875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000079765915871
    - (0.5308837890625, 0.9554443359375) was not inserted into the data structure

  * 1000 random points in a 1024-by-1024 grid
    - failed on trial 1 of 1000
    - student   nearest()           = (0.447265625, 0.75)
    - reference nearest()           = (0.4443359375, 0.7421875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000069618225098
    - (0.447265625, 0.75) was not inserted into the data structure

  * 1000 random points in a 128-by-128 grid
    - failed on trial 1 of 1000
    - student   nearest()           = (0.90625, 0.125)
    - reference nearest()           = (0.9140625, 0.125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00006103515625
    - (0.90625, 0.125) was not inserted into the data structure

  * 1000 random points in a 16-by-16 grid
    - failed on trial 39 of 1000
    - student   nearest()           = (0.4375, 0.25)
    - reference nearest()           = (0.4375, 0.1875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00390625
    - (0.4375, 0.25) was not inserted into the data structure

==> FAILED

Test 5: insert n random points and check range() for n random query rectangles
  * 1000 random rectangles and points in a 65536-by-65536 grid
    - failed on trial 1 of 1000
    - rectangle query        = [0.9819412231445312, 0.9819564819335938] x [0.00142669677734375, 0.00144195556640625]
    - student   range() size = 0
    - reference range() size = 1

  * 1000 random rectangles and points in a 8192-by-8192 grid
    - failed on trial 1 of 1000
    - rectangle query        = [0.48748779296875, 0.48760986328125] x [0.00299072265625, 0.00311279296875]
    - student   range() size = 0
    - reference range() size = 1

  * 1000 random rectangles and points in a 1024-by-1024 grid
    - failed on trial 1 of 1000
    - rectangle query        = [0.87939453125, 0.88037109375] x [0.0, 4.8828125E-4]
    - student   range() size = 0
    - reference range() size = 1

  * 1000 random rectangles and points in a 128-by-128 grid
    - failed on trial 1 of 966
    - rectangle query        = [0.07421875, 0.08203125] x [0.0, 0.00390625]
    - student   range() size = 0
    - reference range() size = 1

  * 1000 random rectangles and points in a 16-by-16 grid
    - failed on trial 1 of 283
    - rectangle query        = [0.0, 0.03125] x [0.0, 0.03125]
    - student   range() size = 0
    - reference range() size = 1

==> FAILED

Test 6: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - failed on trial 2 of 10000
    - student   nearest()    = (0.1202392578125, 0.1649169921875)
    - reference nearest()    = (0.5859375, 0.225341796875)
    - (0.1202392578125, 0.1649169921875) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.22052600979805

  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - failed on trial 11 of 10000
    - student   nearest()    = (0.859375, 0.0390625)
    - reference nearest()    = (0.3271484375, 0.720703125)
    - (0.859375, 0.0390625) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.747899055480957

  * 10000 calls with random points in a 128-by-128 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - failed on trial 10 of 10000
    - student   nearest()    = (0.84375, 0.3984375)
    - reference nearest()    = (0.6171875, 0.2421875)
    - (0.84375, 0.3984375) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.07574462890625

  * 10000 calls with random points in a 16-by-16 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - failed on trial 4 of 10000
    - student   nearest()    = (0.75, 0.125)
    - reference nearest()    = (0.5625, 0.125)
    - (0.75, 0.125) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.03515625

  * 10000 calls with random points in a 1-by-1 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - failed on trial 6 of 10000
    - student   nearest()    = (1.0, 1.0)
    - reference nearest()    = (0.0, 0.0)
    - (1.0, 1.0) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 2

==> FAILED

Test 7: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
    - failed on trial 1 of 1000
    - student   nearest()    = (0.4716796875, 0.4931640625)
    - reference nearest()    = null
    - (0.4716796875, 0.4931640625) was not inserted into data structure
    - student   distanceSquaredTo() = 0

  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
    - failed on trial 1 of 1000
    - student   nearest()    = (0.8232421875, 0.0791015625)
    - reference nearest()    = null
    - (0.8232421875, 0.0791015625) was not inserted into data structure
    - student   distanceSquaredTo() = 0

==> FAILED

Test 8: check whether two PointSET objects can be created at the same time
==> passed


Total: 2/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 28 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
    - failed after inserting point 1 of 1
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5 0.5

  * input5.txt
    - failed after inserting point 1 of 5
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.7 0.2

  * input10.txt
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.372 0.497

==> FAILED

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
    - failed after inserting point 1 of 1
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 0.0

  * 5 random non-degenerate points in a 8-by-8 grid
    - failed after inserting point 1 of 5
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.875 0.375

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5625 0.625

  * 50 random non-degenerate points in a 128-by-128 grid
    - failed after inserting point 1 of 50
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.2890625 0.5546875

  * 500 random non-degenerate points in a 1024-by-1024 grid
    - failed after inserting point 1 of 500
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.6181640625 0.431640625

  * 50000 random non-degenerate points in a 65536-by-65536 grid
    - failed after inserting point 1 of 50000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.3121185302734375 0.8433685302734375

==> FAILED

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
    - failed after inserting point 1 of 1
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.0 0.0

  * 10 random distinct points in a 8-by-8 grid
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.375 0.375

  * 20 random distinct points in a 16-by-16 grid
    - failed after inserting point 1 of 20
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.8125 1.0

  * 10000 random distinct points in a 128-by-128 grid
    - failed after inserting point 1 of 10000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.109375 0.5859375

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.650390625 0.2490234375

  * 100000 random distinct points in a 65536-by-65536 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.1262969970703125 0.623504638671875

==> FAILED

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
    - failed after inserting point 1 of 5
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.0 0.0

  * 10 random general points in a 4-by-4 grid
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.25 1.0

  * 50 random general points in a 8-by-8 grid
    - failed after inserting point 1 of 50
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5 0.625

  * 100000 random general points in a 16-by-16 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5 0.75

  * 100000 random general points in a 128-by-128 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.859375 0.765625

  * 100000 random general points in a 1024-by-1024 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.4599609375 0.576171875

==> FAILED

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
    - failed on trial 1 of 10000
    - query point          = (0.81, 0.43)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 

  * input1.txt
    - failed on trial 1 of 10000
    - query point          = (0.38, 0.11)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.5 0.5

  * input5.txt
    - failed on trial 1 of 10000
    - query point          = (0.9, 0.87)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6

  * input10.txt
    - failed on trial 1 of 10000
    - query point          = (0.25, 0.23)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208

==> FAILED

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
    - failed on trial 2 of 10000
    - query point          = (0.0, 1.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.0 0.0

  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query point          = (1.0, 0.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.875 0.125
      B  1.0 0.625
      C  0.75 0.0
      D  0.375 0.875
      E  0.5 0.375

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point          = (0.4375, 0.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.5 0.1875
      B  0.1875 0.8125
      C  0.3125 0.4375
      D  0.25 0.375
      E  0.5625 0.25
      F  0.375 0.0
      G  0.8125 0.5
      H  0.875 0.75
      I  0.0625 0.875
      J  0.625 0.125

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point          = (0.46875, 0.34375)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.75 0.21875
      B  0.6875 0.5
      C  0.34375 0.78125
      D  0.1875 0.90625
      E  0.71875 0.8125
      F  0.46875 0.09375
      G  0.59375 0.3125
      H  0.5 0.9375
      I  0.09375 0.96875
      J  0.28125 0.59375
      K  0.4375 0.46875
      L  1.0 0.65625
      M  0.84375 0.875
      N  0.53125 0.4375
      O  0.5625 0.15625
      P  0.0 0.40625
      Q  0.9375 0.71875
      R  0.21875 0.1875
      S  0.96875 0.5625
      T  0.0625 0.53125

  * 500 random non-degenerate points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point          = (0.0849609375, 0.087890625)
    - student   contains() = true
    - reference contains() = false

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point          = (0.5449981689453125, 0.5311279296875)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
    - failed on trial 2 of 10000
    - query point          = (0.0, 1.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  1.0 1.0

  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 2 of 10000
    - query point          = (1.0, 0.5)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.75 1.0
      B  1.0 0.0
      C  0.5 0.0
      D  0.5 1.0
      E  0.25 0.5
      F  0.0 1.0
      G  0.0 0.5
      H  0.25 1.0
      I  0.5 0.5
      J  1.0 0.25

  * 20 random distinct points in a 8-by-8 grid
    - failed on trial 2 of 10000
    - query point          = (0.5, 0.5)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.375 0.625
      B  0.5 0.125
      C  0.625 0.5
      D  0.125 1.0
      E  0.125 0.875
      F  0.375 0.25
      G  0.875 0.5
      H  0.0 0.25
      I  0.625 0.375
      J  0.875 0.125
      K  0.875 0.25
      L  0.0 0.375
      M  0.75 0.0
      N  0.625 0.75
      O  0.0 0.5
      P  0.375 0.5
      Q  1.0 0.375
      R  0.5 0.625
      S  1.0 0.75
      T  0.125 0.125

  * 10000 random distinct points in a 128-by-128 grid
    - failed on trial 2 of 10000
    - query point          = (0.0390625, 0.578125)
    - student   contains() = true
    - reference contains() = false

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point          = (0.833984375, 0.21484375)
    - student   contains() = true
    - reference contains() = false

  * 100000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point          = (0.0491180419921875, 0.994964599609375)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
    - failed on trial 2 of 10000
    - query point          = (0.609375, 0.1875)
    - student   contains() = true
    - reference contains() = false

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point          = (0.1640625, 0.63671875)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
    - failed on trial 1 of 10000
    - query rectangle = [0.855, 0.927] x [0.133, 0.988]
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student   range():  empty
    - reference range():  E 

  * input10.txt
    - failed on trial 1 of 10000
    - query rectangle = [0.192, 0.706] x [0.554, 0.657]
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student   range():  empty
    - reference range():  C 

==> FAILED

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 1.0] x [0.0, 1.0]
    - sequence of points inserted: 
      A  0.5 0.5
    - student   range():  empty
    - reference range():  A 

  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.1875, 1.0] x [0.4375, 1.0]
    - sequence of points inserted: 
      A  0.6875 0.5625
      B  0.5625 0.0
      C  0.5 0.875
      D  0.4375 0.75
      E  0.0 0.9375
      F  0.0625 0.8125
      G  0.9375 0.25
      H  0.3125 0.1875
      I  0.875 0.625
      J  0.25 0.6875
    - student   range():  empty
    - reference range():  A C D J I 

  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.3125, 0.5] x [0.03125, 0.4375]
    - sequence of points inserted: 
      A  0.34375 0.34375
      B  0.15625 0.3125
      C  0.21875 0.75
      D  1.0 0.375
      E  0.375 0.46875
      F  0.46875 0.71875
      G  0.96875 0.8125
      H  0.40625 0.625
      I  0.53125 0.1875
      J  0.125 0.9375
      K  0.71875 0.84375
      L  0.59375 0.6875
      M  0.28125 0.53125
      N  0.8125 0.21875
      O  0.9375 0.65625
      P  0.03125 0.0
      Q  0.09375 0.875
      R  0.0 0.125
      S  0.5625 1.0
      T  0.90625 0.59375
    - student   range():  empty
    - reference range():  A 

  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.3701171875, 0.708984375] x [0.6015625, 0.9345703125]
    - student   range():  empty
    - reference range():  K O G A O H O M Q K Q B K W E W P F X Y C Z C Z J D ...

  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.2960968017578125, 0.695098876953125] x [0.01043701171875, 0.1992950439453125]
    - student   range():  empty
    - reference range():  A M W G L K H R O P D V Z J S Z L H R O F W Q M S O ...

==> FAILED

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 1.0] x [0.0, 1.0]
    - sequence of points inserted: 
      A  0.5 0.0
      B  0.5 1.0
    - student   range():  empty
    - reference range():  A B 

  * 10 random distinct points and random rectangles in a 4-by-4 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 1.0] x [0.0, 0.25]
    - sequence of points inserted: 
      A  0.25 0.0
      B  0.25 0.5
      C  0.75 1.0
      D  1.0 1.0
      E  0.25 1.0
      F  0.75 0.5
      G  0.5 0.5
      H  0.75 0.75
      I  0.75 0.25
      J  0.0 0.5
    - student   range():  empty
    - reference range():  A I 

  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0625, 0.3125] x [0.3125, 0.5625]
    - student   range():  empty
    - reference range():  B K J D C Z U J 

  * 1000 random distinct points and random rectangles in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.375, 0.828125] x [0.078125, 0.859375]
    - student   range():  empty
    - reference range():  A D F A B S X Z I R R Z M I L J M Q Y U J B W F W H ...

  * 10000 random distinct points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.078125, 0.0859375] x [0.75, 0.8125]
    - student   range():  empty
    - reference range():  T D Y E D W S G X G I 

==> FAILED

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.5, 1.0] x [0.5, 0.5]
    - student   range():  empty
    - reference range():  F I 

  * 5000 random general points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.3125, 0.625] x [0.875, 1.0]
    - student   range():  empty
    - reference range():  Z W A A Z G K F U R I U F K F V L Z 

  * 5000 random general points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.8828125, 0.9609375] x [0.0546875, 0.2421875]
    - student   range():  empty
    - reference range():  B Y D B L W C S O V X Z B Y C T G R S X U V C W P Y ...

  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> FAILED

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
    - failed on trial 0 of 5
    - query rectangle = [0.0, 0.25] x [0.75, 1.0]
    - sequence of points inserted: 
      A  0.0 1.0
      B  0.5 0.0
      C  0.5 0.5
      D  0.0 1.0
      E  0.5 0.5
    - student   range():  empty
    - reference range():  D 

  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
    - failed on trial 0 of 10
    - query rectangle = [0.375, 0.625] x [0.875, 1.0]
    - sequence of points inserted: 
      A  0.5 1.0
      B  0.5 0.5
      C  0.75 0.0
      D  0.5 0.75
      E  0.0 1.0
      F  1.0 0.75
      G  0.5 0.5
      H  0.0 0.25
      I  1.0 0.75
      J  0.0 0.5
    - student   range():  empty
    - reference range():  A 

  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
    - failed on trial 0 of 20
    - query rectangle = [0.0, 0.0625] x [0.0625, 0.1875]
    - sequence of points inserted: 
      A  0.0 0.125
      B  0.25 0.125
      C  0.375 0.5
      D  0.25 0.5
      E  0.125 0.0
      F  0.375 0.75
      G  0.875 0.0
      H  0.125 1.0
      I  0.25 0.125
      J  0.0 0.625
      K  0.0 0.125
      L  0.0 1.0
      M  0.875 0.75
      N  0.625 0.625
      O  0.875 0.875
      P  0.375 0.125
      Q  1.0 0.875
      R  0.375 0.0
      S  0.625 0.25
      T  0.5 0.25
    - student   range():  empty
    - reference range():  K 

  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.65234375, 0.66015625] x [0.99609375, 1.0]
    - student   range():  empty
    - reference range():  A 

  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.30908203125, 0.31005859375] x [0.94091796875, 0.94189453125]
    - student   range():  empty
    - reference range():  A 

  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.18560028076171875, 0.18561553955078125] x [0.6295700073242188, 0.6295852661132812]
    - student   range():  empty
    - reference range():  A 

==> FAILED

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.13, 0.57] x [0.69, 0.94]
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A B D 

  * input10.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.2, 0.96] x [0.44, 0.55]
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A C D B H I 

==> FAILED

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.25, 0.75] x [0.25, 0.75]
    - sequence of points inserted: 
      A  0.0 0.0
      B  0.5 0.5
      C  1.0 1.0
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A B C 

  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.0, 0.25] x [0.0, 0.5]
    - sequence of points inserted: 
      A  0.75 0.875
      B  0.375 0.125
      C  0.625 0.25
      D  0.125 0.625
      E  1.0 0.375
      F  0.875 0.75
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A B C D 

  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.625, 0.9375] x [0.125, 0.25]
    - sequence of points inserted: 
      A  0.5 0.625
      B  0.4375 0.3125
      C  0.125 0.5625
      D  0.25 0.0625
      E  0.375 0.6875
      F  0.3125 0.8125
      G  0.875 0.875
      H  0.5625 0.0
      I  0.8125 1.0
      J  0.0 0.4375
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A G H 

  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.5, 0.8125] x [0.4375, 0.90625]
    - sequence of points inserted: 
      A  0.40625 0.0625
      B  0.65625 0.75
      C  0.28125 0.875
      D  0.25 0.5625
      E  0.3125 0.3125
      F  0.5625 0.9375
      G  0.96875 1.0
      H  0.09375 0.65625
      I  0.78125 0.34375
      J  0.125 0.59375
      K  1.0 0.46875
      L  0.84375 0.96875
      M  0.6875 0.53125
      N  0.375 0.1875
      O  0.0 0.71875
      P  0.46875 0.5
      Q  0.625 0.03125
      R  0.53125 0.0
      S  0.59375 0.375
      T  0.875 0.125
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A B I M P Q S K T F G L 

  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.75, 0.84375] x [0.59375, 0.96875]
    - number of entries in student   solution: 0
    - number of entries in reference solution: 4
    - 4 missing entries in student solution, including:
      '(0.6875, 1.0)'


==> FAILED

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
    - failed on trial 1 of 10000
    - student   nearest()  = (0.847, 0.151)
    - reference nearest()  = null

  * input1.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.5 0.5
    - query point                   = (0.99, 0.256)
    - student   nearest()           = (0.99, 0.256)
    - reference nearest()           = (0.5, 0.5)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.299636
    - (0.99, 0.256) was not inserted into data structure

  * input5.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.117, 0.278)
    - student   nearest()           = (0.117, 0.278)
    - reference nearest()           = (0.2, 0.3)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.007373
    - (0.117, 0.278) was not inserted into data structure

  * input10.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.341, 0.956)
    - student   nearest()           = (0.341, 0.956)
    - reference nearest()           = (0.32, 0.708)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.061945
    - (0.341, 0.956) was not inserted into data structure

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.0 0.5
      B  0.125 0.625
      C  0.75 0.375
      D  0.5 1.0
      E  0.625 0.875
    - query point                   = (1.0, 0.75)
    - student   nearest()           = (1.0, 0.75)
    - reference nearest()           = (0.625, 0.875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.15625
    - (1.0, 0.75) was not inserted into data structure

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.875 0.25
      B  0.9375 0.5625
      C  0.3125 1.0
      D  0.125 0.4375
      E  0.1875 0.5
      F  1.0 0.0
      G  0.0625 0.3125
      H  0.5625 0.9375
      I  0.5 0.8125
      J  0.75 0.625
    - query point                   = (0.6875, 0.6875)
    - student   nearest()           = (0.6875, 0.6875)
    - reference nearest()           = (0.75, 0.625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0078125
    - (0.6875, 0.6875) was not inserted into data structure

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  1.0 0.78125
      B  0.90625 0.6875
      C  0.53125 0.5
      D  0.03125 0.71875
      E  0.875 0.59375
      F  0.15625 0.46875
      G  0.28125 0.5625
      H  0.40625 0.90625
      I  0.21875 0.3125
      J  0.75 0.75
      K  0.65625 0.21875
      L  0.09375 0.375
      M  0.6875 0.125
      N  0.84375 0.34375
      O  0.71875 0.4375
      P  0.9375 0.15625
      Q  0.375 0.625
      R  0.3125 0.25
      S  0.625 0.53125
      T  0.5625 1.0
    - query point                   = (0.59375, 0.96875)
    - student   nearest()           = (0.59375, 0.96875)
    - reference nearest()           = (0.5625, 1.0)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.001953125
    - (0.59375, 0.96875) was not inserted into data structure

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query point                   = (0.015625, 0.734375)
    - student   nearest()           = (0.015625, 0.734375)
    - reference nearest()           = (0.046875, 0.640625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.009765625
    - (0.015625, 0.734375) was not inserted into data structure

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.21148681640625, 0.630401611328125)
    - student   nearest()           = (0.21148681640625, 0.630401611328125)
    - reference nearest()           = (0.204498291015625, 0.6345672607421875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000066192122176
    - (0.21148681640625, 0.630401611328125) was not inserted into data structure

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  1.0 0.25
      B  0.25 0.5
      C  0.5 0.25
      D  0.5 1.0
      E  0.25 0.75
      F  0.75 0.75
      G  0.25 0.25
      H  0.25 1.0
      I  0.75 0.0
      J  0.5 0.5
    - query point                   = (1.0, 0.0)
    - student   nearest()           = (1.0, 0.0)
    - reference nearest()           = (1.0, 0.25)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0625
    - (1.0, 0.0) was not inserted into data structure

  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.625 0.5
      B  1.0 0.0
      C  0.125 0.0
      D  0.875 0.25
      E  0.0 0.875
      F  0.5 0.375
      G  0.25 1.0
      H  0.75 0.5
      I  1.0 0.5
      J  0.875 0.875
      K  0.0 0.75
      L  0.5 0.5
      M  0.375 0.25
      N  0.0 0.25
      O  0.375 1.0
    - query point                   = (0.5, 0.25)
    - student   nearest()           = (0.5, 0.25)
    - reference nearest()           = (0.5, 0.375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.015625
    - (0.5, 0.25) was not inserted into data structure

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.875 0.4375
      B  1.0 0.9375
      C  0.125 0.4375
      D  0.1875 0.5625
      E  0.9375 0.75
      F  0.25 0.6875
      G  0.0 0.9375
      H  0.125 0.5
      I  0.8125 0.625
      J  0.25 0.0625
      K  0.9375 0.9375
      L  0.9375 0.0
      M  0.0 0.375
      N  0.5625 0.0
      O  0.875 0.5
      P  0.375 0.9375
      Q  0.875 0.9375
      R  0.5 0.625
      S  0.0625 0.875
      T  0.875 0.8125
    - query point                   = (0.5, 0.3125)
    - student   nearest()           = (0.5, 0.3125)
    - reference nearest()           = (0.5, 0.625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.09765625
    - (0.5, 0.3125) was not inserted into data structure

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point                   = (0.71875, 0.71875)
    - student   nearest()           = (0.71875, 0.71875)
    - reference nearest()           = (0.71875, 0.65625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00390625
    - (0.71875, 0.71875) was not inserted into data structure

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.3364410400390625, 0.430633544921875)
    - student   nearest()           = (0.3364410400390625, 0.430633544921875)
    - reference nearest()           = (0.3322906494140625, 0.4264373779296875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000034833559766
    - (0.3364410400390625, 0.430633544921875) was not inserted into data structure

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point                   = (0.390625, 0.421875)
    - student   nearest()           = (0.390625, 0.421875)
    - reference nearest()           = (0.3984375, 0.421875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00006103515625
    - (0.390625, 0.421875) was not inserted into data structure

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point                   = (0.625, 0.43359375)
    - student   nearest()           = (0.625, 0.43359375)
    - reference nearest()           = (0.6220703125, 0.4296875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00002384185791
    - (0.625, 0.43359375) was not inserted into data structure

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.21, 0.1)
    - student   nearest()           = (0.21, 0.1)
    - reference nearest()           = (0.2, 0.3)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0401
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B C 

  * input10.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.09, 0.01)
    - student   nearest()           = (0.09, 0.01)
    - reference nearest()           = (0.144, 0.179)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.031477
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A C D E 

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.375 1.0
      B  0.25 0.125
      C  0.75 0.5
      D  0.0 0.75
      E  1.0 0.0
    - query point                   = (0.625, 0.625)
    - student   nearest()           = (0.625, 0.625)
    - reference nearest()           = (0.75, 0.5)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.03125
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A C E 

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.5 0.25
      B  0.625 1.0
      C  0.875 0.1875
      D  0.1875 0.6875
      E  0.0625 0.0625
      F  0.75 0.625
      G  0.6875 0.5
      H  0.125 0.5625
      I  1.0 0.875
      J  0.9375 0.75
    - query point                   = (0.3125, 0.0)
    - student   nearest()           = (0.3125, 0.0)
    - reference nearest()           = (0.0625, 0.0625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.06640625
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A D E H B C F G 

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.53125 0.6875
      B  0.96875 0.28125
      C  0.625 0.96875
      D  0.5 0.78125
      E  0.8125 0.875
      F  0.0 0.15625
      G  0.4375 0.1875
      H  0.25 0.53125
      I  0.28125 0.34375
      J  0.84375 0.59375
      K  1.0 0.0
      L  0.03125 0.0625
      M  0.40625 0.9375
      N  0.09375 1.0
      O  0.65625 0.8125
      P  0.90625 0.40625
      Q  0.71875 0.21875
      R  0.125 0.03125
      S  0.9375 0.25
      T  0.15625 0.09375
    - query point                   = (0.6875, 0.375)
    - student   nearest()           = (0.6875, 0.375)
    - reference nearest()           = (0.71875, 0.21875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.025390625
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B C E J O P K Q S D F G H I 

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 12

  * 50 random non-degenerate points in a 128-by-128 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 13

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 19

==> FAILED

Test 7: insert n random points; check that repeated calls to get(),
         range(), and nearest() with the same argument yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed

Test 8a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.0, 0.0)
           st.contains((1.0, 1.0))  ==>  true

  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = (0.5, 1.0)
    - reference nearest()  = (0.75, 0.4375)
    - (0.5, 1.0) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.37890625
    - sequence of operations was:
           st.insert(0.75, 0.4375)
           st.nearest((0.5, 1.0))   ==>  (0.5, 1.0)

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.4765625, 0.859375)
           st.insert(0.96875, 0.1015625)
           st.contains((0.1484375, 0.453125))  ==>  true

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.94921875, 0.4970703125)
           st.insert(0.0302734375, 0.134765625)
           st.insert(0.2802734375, 0.953125)
           st.contains((0.6875, 0.9052734375))  ==>  true

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = (0.5633544921875, 0.0390625)
    - reference nearest()  = (0.431396484375, 0.0240478515625)
    - (0.5633544921875, 0.0390625) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.017638355493546
    - sequence of operations was:
           st.insert(0.431396484375, 0.0240478515625)
           st.nearest((0.5633544921875, 0.0390625))   ==>  (0.5633544921875, 0.0390625)

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   size() = 0
    - reference size() = 1
    - sequence of operations was:
           st.insert(0.85406494140625, 0.0322723388671875)
           st.size()  ==>  0

==> FAILED

Test 8b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (0.0, 1.0)
    - reference nearest()  = (0.0, 0.0)
    - (0.0, 1.0) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 1
    - sequence of operations was:
           st.insert(0.0, 0.0)
           st.insert(1.0, 0.0)
           st.nearest((0.0, 1.0))   ==>  (0.0, 1.0)

  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.