See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (4 warnings)
PMD:          FAILED (8 warnings)
Checkstyle:   FAILED (0 errors, 4 warnings)

Correctness:  9/35 tests passed
Memory:       16/16 tests passed
Timing:       26/42 tests passed

Aggregate score: 47.81%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.7K Nov 10 20:53 KdTree.java
2.5K Nov 10 20:53 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M B CO_COMPARETO_INCORRECT_FLOATING Co: The method 'compareTo()' incorrectly handles values of type 'double' when they are -0.0 or NaN. To handle these corner cases, use 'Double.compare()' or 'Float.compare()'.  At KdTree.java:[line 38]
M B CO_COMPARETO_INCORRECT_FLOATING Co: The method 'compareTo()' incorrectly handles values of type 'double' when they are -0.0 or NaN. To handle these corner cases, use 'Double.compare()' or 'Float.compare()'.  At KdTree.java:[line 43]
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'left' is never read. Consider removing it from the class.  At KdTree.java:[line 31]
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'right' is never read. Consider removing it from the class.  At KdTree.java:[line 32]
Warnings generated: 4


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:19: The private instance (or static) variable 'pointTree' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:23: The private instance (or static) variable 'xAxis' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:24: The private instance (or static) variable 'point' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:80: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
KdTree.java:95: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PointSET.java:19: The private instance (or static) variable 'pointTree' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PointSET.java:52: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PointSET.java:88: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 8 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:25:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
[WARN] KdTree.java:26:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:19:13: You should not need to use the 'SET' data type in this program. [IllegalType]
[WARN] KdTree.java:22:30: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: inserting n random points and check size() after each insertion
        (size may be less than n because of duplicates)
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 2: check isEmpty() for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==> passed

Test 3: insert n random points and check contains() for n random query points
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 4: insert n random points and check nearest() for n random query points
  * 1000 random points in a 65536-by-65536 grid
  * 1000 random points in a 8192-by-8192 grid
  * 1000 random points in a 1024-by-1024 grid
  * 1000 random points in a 128-by-128 grid
  * 1000 random points in a 16-by-16 grid
==> passed

Test 5: insert n random points and check range() for n random query rectangles
  * 1000 random rectangles and points in a 65536-by-65536 grid
  * 1000 random rectangles and points in a 8192-by-8192 grid
  * 1000 random rectangles and points in a 1024-by-1024 grid
  * 1000 random rectangles and points in a 128-by-128 grid
  * 1000 random rectangles and points in a 16-by-16 grid
==> passed

Test 6: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
==> passed

Test 7: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==> passed

Test 8: check whether two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
    - failed after inserting point 1 of 1
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5 0.5

  * input5.txt
    - failed after inserting point 1 of 5
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.7 0.2

  * input10.txt
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.372 0.497

==> FAILED

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
    - failed after inserting point 1 of 1
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 0.0

  * 5 random non-degenerate points in a 8-by-8 grid
    - failed after inserting point 1 of 5
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.25 0.5

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.25 0.375

  * 50 random non-degenerate points in a 128-by-128 grid
    - failed after inserting point 1 of 50
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.0546875 0.0078125

  * 500 random non-degenerate points in a 1024-by-1024 grid
    - failed after inserting point 1 of 500
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.06640625 0.2265625

  * 50000 random non-degenerate points in a 65536-by-65536 grid
    - failed after inserting point 1 of 50000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.393768310546875 0.2624359130859375

==> FAILED

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
    - failed after inserting point 1 of 1
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 0.0

  * 10 random distinct points in a 8-by-8 grid
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.25 0.875

  * 20 random distinct points in a 16-by-16 grid
    - failed after inserting point 1 of 20
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.25 0.5

  * 10000 random distinct points in a 128-by-128 grid
    - failed after inserting point 1 of 10000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.484375 0.0859375

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.6904296875 0.9208984375

  * 100000 random distinct points in a 65536-by-65536 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.232421875 0.5502166748046875

==> FAILED

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
    - failed after inserting point 1 of 5
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 1.0

  * 10 random general points in a 4-by-4 grid
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.75 0.5

  * 50 random general points in a 8-by-8 grid
    - failed after inserting point 1 of 50
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.875 0.75

  * 100000 random general points in a 16-by-16 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 0.75

  * 100000 random general points in a 128-by-128 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5859375 0.0703125

  * 100000 random general points in a 1024-by-1024 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.890625 0.9287109375

==> FAILED

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
    - failed on trial 1 of 10000
    - query point          = (0.37, 0.06)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 

  * input1.txt
    - failed on trial 1 of 10000
    - query point          = (0.17, 0.22)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.5 0.5

  * input5.txt
    - failed on trial 1 of 10000
    - query point          = (0.63, 0.49)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6

  * input10.txt
    - failed on trial 1 of 10000
    - query point          = (0.09, 0.04)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208

==> FAILED

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
    - failed on trial 1 of 10000
    - query point          = (1.0, 0.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.0 0.0

  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query point          = (0.125, 0.625)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.125 0.875
      B  0.0 0.125
      C  0.75 0.375
      D  0.875 0.625
      E  1.0 0.5

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point          = (0.0625, 1.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.25 0.875
      B  0.75 0.75
      C  0.9375 0.3125
      D  0.875 0.4375
      E  0.6875 0.0625
      F  0.5625 0.1875
      G  0.1875 0.25
      H  0.5 0.375
      I  0.625 0.0
      J  0.125 0.125

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point          = (0.28125, 0.625)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.78125 0.4375
      B  0.53125 1.0
      C  0.84375 0.09375
      D  0.46875 0.15625
      E  0.5 0.34375
      F  0.09375 0.25
      G  1.0 0.40625
      H  0.8125 0.125
      I  0.40625 0.65625
      J  0.5625 0.90625
      K  0.90625 0.6875
      L  0.28125 0.5625
      M  0.1875 0.03125
      N  0.0 0.84375
      O  0.375 0.78125
      P  0.34375 0.9375
      Q  0.0625 0.1875
      R  0.125 0.75
      S  0.4375 0.53125
      T  0.9375 0.21875

  * 500 random non-degenerate points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point          = (0.9462890625, 0.2421875)
    - student   contains() = true
    - reference contains() = false

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point          = (0.733856201171875, 0.7750396728515625)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
    - failed on trial 1 of 10000
    - query point          = (0.0, 0.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.0 1.0

  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 2 of 10000
    - query point          = (0.25, 0.75)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.75 0.5
      B  1.0 0.25
      C  0.25 0.5
      D  1.0 0.75
      E  0.0 0.5
      F  0.25 0.0
      G  0.5 1.0
      H  0.5 0.5
      I  0.75 0.25
      J  0.25 0.25

  * 20 random distinct points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query point          = (0.625, 0.375)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.75 0.0
      B  0.0 0.75
      C  1.0 1.0
      D  0.875 0.625
      E  0.5 0.75
      F  0.25 0.0
      G  0.5 0.875
      H  0.625 0.625
      I  0.875 0.25
      J  1.0 0.25
      K  0.875 0.125
      L  0.0 0.5
      M  0.75 0.25
      N  0.75 0.75
      O  0.125 0.375
      P  1.0 0.875
      Q  0.25 0.5
      R  0.125 0.75
      S  0.75 0.5
      T  0.625 0.875

  * 10000 random distinct points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point          = (0.9765625, 0.9609375)
    - student   contains() = true
    - reference contains() = false

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point          = (0.8330078125, 0.732421875)
    - student   contains() = true
    - reference contains() = false

  * 100000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point          = (0.0185394287109375, 0.15020751953125)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point          = (0.046875, 0.90625)
    - student   contains() = true
    - reference contains() = false

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point          = (0.2880859375, 0.947265625)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
    - failed on trial 1 of 10000
    - query rectangle = [0.265, 0.75] x [0.403, 0.889]
    - sequence of points inserted: 
      A  0.5 0.5
    - student   range():  empty
    - reference range():  A 

  * input5.txt
  * input10.txt
    - failed on trial 1 of 10000
    - query rectangle = [0.059, 0.773] x [0.101, 0.508]
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student   range():  empty
    - reference range():  A D B G J 

==> FAILED

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.375, 0.875] x [0.375, 1.0]
    - sequence of points inserted: 
      A  0.0 0.25
      B  0.5 0.75
      C  0.25 0.0
      D  0.75 0.875
      E  0.125 0.5
    - student   range():  empty
    - reference range():  B D 

  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0625, 0.5625] x [0.5, 1.0]
    - sequence of points inserted: 
      A  0.9375 0.4375
      B  0.0 0.3125
      C  0.5 0.0
      D  0.1875 0.875
      E  0.375 0.25
      F  0.8125 0.8125
      G  0.6875 0.625
      H  0.25 0.9375
      I  0.4375 0.375
      J  0.875 0.5625
    - student   range():  empty
    - reference range():  D H 

  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.28125, 0.65625] x [0.09375, 0.8125]
    - sequence of points inserted: 
      A  0.4375 0.75
      B  0.78125 0.125
      C  0.875 0.375
      D  0.15625 0.78125
      E  0.125 0.9375
      F  0.9375 0.5625
      G  0.375 0.34375
      H  0.59375 0.84375
      I  0.96875 0.28125
      J  0.75 0.21875
      K  0.8125 0.15625
      L  0.1875 1.0
      M  0.0 0.71875
      N  1.0 0.3125
      O  0.25 0.875
      P  0.625 0.4375
      Q  0.5625 0.1875
      R  0.09375 0.59375
      S  0.40625 0.0625
      T  0.53125 0.90625
    - student   range():  empty
    - reference range():  A G P Q 

  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.5029296875, 0.62109375] x [0.0927734375, 0.5029296875]
    - student   range():  empty
    - reference range():  K Q E Z W W Y O C K G Z D J K Q F P E R A K E U 

  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.61181640625, 0.9642333984375] x [0.0571136474609375, 0.3809051513671875]
    - student   range():  empty
    - reference range():  A B W Z H T Z Z G U K J O X B S W Y L P A Q G W Z X ...

==> FAILED

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 0.75] x [0.25, 1.0]
    - sequence of points inserted: 
      A  0.5 0.25
      B  1.0 0.0
      C  1.0 1.0
      D  0.75 0.5
      E  1.0 0.5
      F  0.5 0.0
      G  0.25 1.0
      H  1.0 0.75
      I  0.25 0.25
      J  0.75 0.0
    - student   range():  empty
    - reference range():  A G I D 

  * 20 random distinct points and random rectangles in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.75, 1.0] x [0.375, 0.875]
    - sequence of points inserted: 
      A  0.125 0.75
      B  0.75 1.0
      C  1.0 0.0
      D  0.125 0.375
      E  0.25 0.25
      F  0.5 0.375
      G  0.625 0.5
      H  0.75 0.25
      I  0.125 0.5
      J  0.0 0.875
      K  0.375 0.0
      L  0.375 0.125
      M  1.0 0.5
      N  0.375 1.0
      O  0.5 0.5
      P  0.0 0.375
      Q  0.5 0.125
      R  0.25 0.875
      S  0.625 0.375
      T  0.875 0.0
    - student   range():  empty
    - reference range():  M 

  * 100 random distinct points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.4375, 1.0] x [0.0625, 0.25]
    - student   range():  empty
    - reference range():  E O K W V K Q F U 

  * 1000 random distinct points and random rectangles in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.140625, 1.0] x [0.421875, 0.828125]
    - student   range():  empty
    - reference range():  N A Z X T K H K Y V N V I I D Q E F D V X V R T N H ...

  * 10000 random distinct points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0078125, 0.96875] x [0.71875, 0.890625]
    - student   range():  empty
    - reference range():  R S Y I K I M F V D U L L T O M W P S A I J Y W J S ...

==> FAILED

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 0.5] x [0.5, 1.0]
    - student   range():  empty
    - reference range():  G B F H 

  * 5000 random general points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.125, 0.125] x [0.625, 0.625]
    - student   range():  empty
    - reference range():  M 

  * 5000 random general points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.046875, 0.921875] x [0.078125, 0.8125]
    - student   range():  empty
    - reference range():  A B B Y M Q B N U F O D T K E T D F H B Q L T X R X ...

  * 5000 random general points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.169921875, 0.6845703125] x [0.46875, 0.7822265625]
    - student   range():  empty
    - reference range():  C I O B Y M X A J T Q N C W X G L J D U W J U K P V ...

==> FAILED

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
    - failed on trial 0 of 5
    - query rectangle = [0.25, 0.75] x [0.75, 1.0]
    - sequence of points inserted: 
      A  0.5 1.0
      B  1.0 0.5
      C  0.0 0.0
      D  0.5 0.0
      E  0.5 0.0
    - student   range():  empty
    - reference range():  A 

  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
    - failed on trial 0 of 10
    - query rectangle = [0.625, 0.875] x [0.125, 0.375]
    - sequence of points inserted: 
      A  0.75 0.25
      B  1.0 0.25
      C  1.0 1.0
      D  0.5 0.5
      E  0.0 0.25
      F  0.75 0.5
      G  0.75 1.0
      H  0.0 0.0
      I  0.25 0.75
      J  0.25 1.0
    - student   range():  empty
    - reference range():  A 

  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
    - failed on trial 0 of 20
    - query rectangle = [0.1875, 0.3125] x [0.8125, 0.9375]
    - sequence of points inserted: 
      A  0.25 0.875
      B  1.0 0.125
      C  0.875 1.0
      D  0.75 1.0
      E  0.125 0.0
      F  0.5 0.25
      G  1.0 0.125
      H  0.125 1.0
      I  1.0 0.125
      J  0.125 0.875
      K  0.75 0.25
      L  0.75 0.875
      M  0.5 0.25
      N  1.0 0.0
      O  0.125 0.25
      P  0.125 1.0
      Q  0.25 0.375
      R  0.75 0.75
      S  0.625 0.5
      T  0.25 0.0
    - student   range():  empty
    - reference range():  A 

  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.18359375, 0.19140625] x [0.05078125, 0.05859375]
    - student   range():  empty
    - reference range():  A 

  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.90185546875, 0.90283203125] x [0.46435546875, 0.46533203125]
    - student   range():  empty
    - reference range():  A 

  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.5055313110351562, 0.5055465698242188] x [0.14432525634765625, 0.14434051513671875]
    - student   range():  empty
    - reference range():  A 

==> FAILED

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
    - student range() returns wrong set of points
    - student   range():  empty
    - reference range():  B 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.47, 0.64] x [0.0, 0.52]
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B C D 
    - failed on trial 1 of 1000

  * input10.txt
    - student range() returns wrong set of points
    - student   range():  empty
    - reference range():  A G J 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.37, 0.55] x [0.09, 0.56]
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference kd-tree nodes involved in calls to Point2D methods:
      A C D B G J H I 
    - failed on trial 1 of 1000

==> FAILED

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.25, 0.5] x [0.5, 1.0]
    - sequence of points inserted: 
      A  0.75 0.75
      B  0.0 0.0
      C  1.0 0.25
    - student kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B 
    - failed on trial 1 of 1000

  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
    - student range() returns wrong set of points
    - student   range():  empty
    - reference range():  A F D 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.0, 0.875] x [0.5, 1.0]
    - sequence of points inserted: 
      A  0.375 0.625
      B  1.0 0.125
      C  0.75 0.25
      D  0.625 0.75
      E  0.5 0.375
      F  0.125 0.875
    - student kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference kd-tree nodes involved in calls to Point2D methods:
      A F B C D E 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
    - student range() returns wrong set of points
    - student   range():  empty
    - reference range():  F H 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.25, 1.0] x [0.1875, 0.5]
    - sequence of points inserted: 
      A  0.3125 0.8125
      B  0.8125 0.125
      C  0.375 0.75
      D  0.875 0.0625
      E  0.0625 0.0
      F  0.9375 0.3125
      G  0.0 0.875
      H  0.5625 0.4375
      I  0.1875 1.0
      J  0.5 0.625
    - student kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference kd-tree nodes involved in calls to Point2D methods:
      A E G I B C F H J 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.75, 0.875] x [0.125, 0.4375]
    - sequence of points inserted: 
      A  0.53125 0.875
      B  0.59375 0.34375
      C  0.0625 0.59375
      D  0.625 0.75
      E  0.375 0.375
      F  0.96875 0.03125
      G  0.09375 0.96875
      H  0.3125 0.1875
      I  0.1875 0.40625
      J  0.15625 0.3125
      K  0.46875 0.21875
      L  0.5625 0.46875
      M  0.03125 0.625
      N  0.125 0.0625
      O  1.0 0.53125
      P  0.34375 0.15625
      Q  0.8125 0.9375
      R  0.90625 0.28125
      S  0.21875 0.8125
      T  0.65625 0.71875
    - student kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B F R D O 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
    - student range() returns wrong set of points
    - student   range():  empty
    - reference range():  C I X D C D M V E J N O R Y 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.109375, 0.953125] x [0.265625, 0.953125]
    - number of entries in student   solution: 0
    - number of entries in reference solution: 25
    - 25 missing entries in student solution, including:
      '(0.4375, 1.0)'

    - failed on trial 1 of 1000

==> FAILED

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
    - failed on trial 1 of 10000
    - student   nearest()  = (0.468, 0.539)
    - reference nearest()  = null

  * input1.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.5 0.5
    - query point                   = (0.974, 0.399)
    - student   nearest()           = (0.974, 0.399)
    - reference nearest()           = (0.5, 0.5)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.234877
    - (0.974, 0.399) was not inserted into data structure

  * input5.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.294, 0.871)
    - student   nearest()           = (0.294, 0.871)
    - reference nearest()           = (0.4, 0.7)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.040477
    - (0.294, 0.871) was not inserted into data structure

  * input10.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.659, 0.45)
    - student   nearest()           = (0.659, 0.45)
    - reference nearest()           = (0.564, 0.413)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.010394
    - (0.659, 0.45) was not inserted into data structure

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.875 0.125
      B  0.625 0.25
      C  0.75 0.75
      D  0.125 0.5
      E  0.5 0.875
    - query point                   = (0.375, 0.0)
    - student   nearest()           = (0.375, 0.0)
    - reference nearest()           = (0.625, 0.25)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.125
    - (0.375, 0.0) was not inserted into data structure

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.75 0.4375
      B  0.25 0.6875
      C  0.875 0.5
      D  0.3125 0.25
      E  0.125 0.0
      F  0.6875 0.0625
      G  0.4375 0.9375
      H  0.375 0.125
      I  0.1875 0.8125
      J  0.8125 0.875
    - query point                   = (0.0625, 0.75)
    - student   nearest()           = (0.0625, 0.75)
    - reference nearest()           = (0.1875, 0.8125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.01953125
    - (0.0625, 0.75) was not inserted into data structure

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.09375 0.53125
      B  0.9375 0.25
      C  0.90625 0.75
      D  0.625 0.09375
      E  0.0625 0.71875
      F  0.84375 0.625
      G  1.0 0.40625
      H  0.875 0.375
      I  0.34375 0.5625
      J  0.8125 0.15625
      K  0.75 0.9375
      L  0.15625 0.8125
      M  0.53125 0.59375
      N  0.1875 0.46875
      O  0.25 1.0
      P  0.78125 0.1875
      Q  0.5625 0.90625
      R  0.0 0.03125
      S  0.28125 0.5
      T  0.40625 0.0625
    - query point                   = (0.65625, 0.65625)
    - student   nearest()           = (0.65625, 0.65625)
    - reference nearest()           = (0.53125, 0.59375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.01953125
    - (0.65625, 0.65625) was not inserted into data structure

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query point                   = (0.890625, 0.0625)
    - student   nearest()           = (0.890625, 0.0625)
    - reference nearest()           = (0.828125, 0.015625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.006103515625
    - (0.890625, 0.0625) was not inserted into data structure

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.649261474609375, 0.64935302734375)
    - student   nearest()           = (0.649261474609375, 0.64935302734375)
    - reference nearest()           = (0.6529083251953125, 0.6485443115234375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000013953540474
    - (0.649261474609375, 0.64935302734375) was not inserted into data structure

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.25 1.0
      B  0.5 0.25
      C  0.75 1.0
      D  0.5 0.0
      E  1.0 0.5
      F  0.5 0.75
      G  0.5 0.5
      H  0.0 0.5
      I  1.0 0.25
      J  1.0 0.0
    - query point                   = (0.25, 0.5)
    - student   nearest()           = (0.25, 0.5)
    - reference nearest()           = (0.5, 0.5)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0625
    - (0.25, 0.5) was not inserted into data structure

  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  1.0 0.0
      B  0.0 0.375
      C  0.375 0.125
      D  0.5 0.375
      E  0.125 0.5
      F  0.5 0.5
      G  0.75 0.625
      H  0.875 0.5
      I  0.625 0.5
      J  1.0 1.0
      K  0.375 0.875
      L  0.75 0.75
      M  0.625 1.0
      N  0.625 0.75
      O  0.125 0.375
    - query point                   = (0.75, 1.0)
    - student   nearest()           = (0.75, 1.0)
    - reference nearest()           = (0.625, 1.0)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.015625
    - (0.75, 1.0) was not inserted into data structure

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.25 1.0
      B  0.875 0.125
      C  0.8125 0.125
      D  0.75 0.625
      E  0.6875 0.3125
      F  0.5625 0.9375
      G  0.3125 0.375
      H  0.125 0.375
      I  0.375 0.4375
      J  0.5625 0.625
      K  0.0 0.9375
      L  0.125 0.5625
      M  0.375 0.5625
      N  0.375 0.0625
      O  0.5 0.1875
      P  0.625 0.75
      Q  0.875 1.0
      R  1.0 1.0
      S  0.9375 0.5625
      T  0.8125 0.75
    - query point                   = (0.1875, 0.9375)
    - student   nearest()           = (0.1875, 0.9375)
    - reference nearest()           = (0.25, 1.0)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0078125
    - (0.1875, 0.9375) was not inserted into data structure

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point                   = (0.5625, 0.21875)
    - student   nearest()           = (0.5625, 0.21875)
    - reference nearest()           = (0.53125, 0.28125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0048828125
    - (0.5625, 0.21875) was not inserted into data structure

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.40509033203125, 0.7774505615234375)
    - student   nearest()           = (0.40509033203125, 0.7774505615234375)
    - reference nearest()           = (0.404022216796875, 0.7810211181640625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000013889744878
    - (0.40509033203125, 0.7774505615234375) was not inserted into data structure

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
    - failed on trial 4 of 10000
    - query point                   = (0.734375, 0.765625)
    - student   nearest()           = (0.734375, 0.765625)
    - reference nearest()           = (0.75, 0.765625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000244140625
    - (0.734375, 0.765625) was not inserted into data structure

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point                   = (0.6708984375, 0.0439453125)
    - student   nearest()           = (0.6708984375, 0.0439453125)
    - reference nearest()           = (0.6630859375, 0.05078125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000107765197754
    - (0.6708984375, 0.0439453125) was not inserted into data structure

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.92, 0.82)
    - reference nearest() = (0.9, 0.6)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0488
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.92, 0.82)
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A E B D 
    - failed on trial 1 of 1000

  * input10.txt
    - student   nearest() = (0.78, 0.54)
    - reference nearest() = (0.785, 0.725)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.03425
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.78, 0.54)
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B H I G J 
    - failed on trial 1 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (0.375, 0.375)
    - reference nearest() = (0.5, 0.125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.078125
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.375, 0.375)
    - sequence of points inserted: 
      A  0.75 0.625
      B  0.5 0.125
      C  0.25 0.875
      D  0.875 1.0
      E  0.125 0.0
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C E 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.5625, 0.9375)
    - reference nearest() = (0.375, 0.625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.1328125
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.5625, 0.9375)
    - sequence of points inserted: 
      A  0.1875 1.0
      B  0.9375 0.375
      C  0.375 0.625
      D  0.0 0.875
      E  0.125 0.75
      F  0.3125 0.25
      G  0.25 0.125
      H  0.5 0.5
      I  0.75 0.0
      J  0.4375 0.1875
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C H 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.1875, 0.15625)
    - reference nearest() = (0.25, 0.21875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0078125
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.1875, 0.15625)
    - sequence of points inserted: 
      A  0.65625 0.78125
      B  0.09375 0.875
      C  0.375 0.8125
      D  0.03125 0.53125
      E  0.78125 0.5
      F  1.0 0.0625
      G  0.71875 0.71875
      H  0.90625 0.65625
      I  0.5625 0.28125
      J  0.3125 0.59375
      K  0.96875 0.40625
      L  0.25 0.21875
      M  0.84375 0.84375
      N  0.46875 1.0
      O  0.59375 0.4375
      P  0.40625 0.6875
      Q  0.9375 0.1875
      R  0.875 0.625
      S  0.53125 0.125
      T  0.0625 0.09375
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D L T 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.28125, 0.734375)
    - reference nearest() = (0.171875, 0.640625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.020751953125
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 11
    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.3203125, 0.3046875)
    - reference nearest() = (0.296875, 0.40625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0108642578125
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 18
    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.5390625, 0.66748046875)
    - reference nearest() = (0.54931640625, 0.68505859375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000414133071899
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 25
    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
    - failed on trial 1 of 10
    - query point          = (0.3193359375, 0.4541015625)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 

  * nearest()
    - failed on trial 1 of 10
    - student   nearest()  = (0.5625, 0.125)
    - reference nearest()  = null

  * range()
==> FAILED

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
    - fails to throw an exception when calling add() with a null argument

  * argument to contains() is null
    - fails to throw an exception when calling contains() with a null argument

  * argument to range() is null
    - fails to throw an exception when calling range() with a null argument

  * argument to nearest() is null
    - fails to throw an exception when calling nearest() with a null argument

==> FAILED

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   size() = 0
    - reference size() = 1
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.isEmpty()  ==>  true
           st.isEmpty()  ==>  true
           st.insert(0.0, 0.0)
           st.size()  ==>  0

  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.1875, 0.625)
           st.range([0.125, 0.3125] x [0.125, 0.25])  ==>  empty
           st.contains((0.6875, 0.875))  ==>  true

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (0.265625, 0.9375)
    - reference nearest()  = (0.046875, 0.7265625)
    - (0.265625, 0.9375) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.09234619140625
    - sequence of operations was:
           st.insert(0.9765625, 0.78125)
           st.insert(0.046875, 0.7265625)
           st.nearest((0.265625, 0.9375))   ==>  (0.265625, 0.9375)

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.5419921875, 0.9638671875)
           st.contains((0.4501953125, 0.8837890625))  ==>  true

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.4813232421875, 0.435302734375)
           st.contains((0.94140625, 0.43896484375))  ==>  true

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 10 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.481781005859375, 0.035797119140625)
           st.insert(0.0643310546875, 0.68505859375)
           st.insert(0.1575164794921875, 0.5842132568359375)
           st.insert(0.2334747314453125, 0.3650054931640625)
           st.insert(0.3599395751953125, 0.81298828125)
           st.range([0.582305908203125, 0.6563568115234375] x [0.2038116455078125, 0.7625732421875])  ==>  empty
           st.insert(0.7080230712890625, 0.7066497802734375)
           st.range([0.5754547119140625, 0.813079833984375] x [0.4912872314453125, 0.5100250244140625])  ==>  empty
           st.insert(0.848846435546875, 0.096954345703125)
           st.contains((0.007110595703125, 0.512664794921875))  ==>  true

==> FAILED

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = (0.0, 0.0)
    - reference nearest()  = (0.0, 1.0)
    - (0.0, 0.0) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 1
    - sequence of operations was:
           st.insert(0.0, 1.0)
           st.nearest((0.0, 0.0))   ==>  (0.0, 0.0)

  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = (0.75, 0.6875)
    - reference nearest()  = (0.5625, 0.9375)
    - (0.75, 0.6875) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.09765625
    - sequence of operations was:
           st.insert(0.5625, 0.9375)
           st.nearest((0.75, 0.6875))   ==>  (0.75, 0.6875)

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (0.8828125, 0.8515625)
    - reference nearest()  = (0.3828125, 0.828125)
    - (0.8828125, 0.8515625) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.25054931640625
    - sequence of operations was:
           st.insert(0.3828125, 0.828125)
           st.insert(0.8828125, 0.296875)
           st.nearest((0.8828125, 0.8515625))   ==>  (0.8828125, 0.8515625)

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 6 of 20000
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.size()  ==>  0
           st.size()  ==>  0
           st.insert(0.548828125, 0.5849609375)
           st.range([0.0224609375, 0.46875] x [0.0380859375, 0.1748046875])  ==>  empty
           st.isEmpty()  ==>  true

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.insert(0.9034423828125, 0.2557373046875)
           st.insert(0.537109375, 0.3140869140625)
           st.isEmpty()  ==>  true

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.4561004638671875, 0.882568359375)
           st.range([0.2662353515625, 0.3526763916015625] x [0.5931854248046875, 0.8645477294921875])  ==>  empty
           st.range([0.4481201171875, 0.7509613037109375] x [0.0311431884765625, 0.6684112548828125])  ==>  empty
           st.range([0.3643951416015625, 0.434234619140625] x [0.8119964599609375, 0.8186187744140625])  ==>  empty
           st.contains((0.63916015625, 0.66790771484375))  ==>  true

==> FAILED

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - rectangle = [0.0, 1.0] x [0.0, 1.0]
    - student   range():  empty
    - reference range():  Q 
    - sequence of operations was:
           st.insert(0.0, 1.0)
           st.range([0.0, 1.0] x [0.0, 1.0])  ==>  empty

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence 

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.