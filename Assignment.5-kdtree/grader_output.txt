See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (4 warnings)
PMD:          FAILED (5 warnings)
Checkstyle:   FAILED (0 errors, 4 warnings)

Correctness:  9/35 tests passed
Memory:       16/16 tests passed
Timing:       26/42 tests passed

Aggregate score: 47.81%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.7K Nov 10 21:11 KdTree.java
2.6K Nov 10 21:11 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M B CO_COMPARETO_INCORRECT_FLOATING Co: The method 'compareTo()' incorrectly handles values of type 'double' when they are -0.0 or NaN. To handle these corner cases, use 'Double.compare()' or 'Float.compare()'.  At KdTree.java:[line 38]
M B CO_COMPARETO_INCORRECT_FLOATING Co: The method 'compareTo()' incorrectly handles values of type 'double' when they are -0.0 or NaN. To handle these corner cases, use 'Double.compare()' or 'Float.compare()'.  At KdTree.java:[line 43]
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'left' is never read. Consider removing it from the class.  At KdTree.java:[line 31]
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'right' is never read. Consider removing it from the class.  At KdTree.java:[line 32]
Warnings generated: 4


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:19: The private instance (or static) variable 'pointTree' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:23: The private instance (or static) variable 'xAxis' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:24: The private instance (or static) variable 'point' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:80: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
KdTree.java:95: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 5 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:25:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
[WARN] KdTree.java:26:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:19:13: You should not need to use the 'SET' data type in this program. [IllegalType]
[WARN] KdTree.java:22:30: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: inserting n random points and check size() after each insertion
        (size may be less than n because of duplicates)
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 2: check isEmpty() for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==> passed

Test 3: insert n random points and check contains() for n random query points
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 4: insert n random points and check nearest() for n random query points
  * 1000 random points in a 65536-by-65536 grid
  * 1000 random points in a 8192-by-8192 grid
  * 1000 random points in a 1024-by-1024 grid
  * 1000 random points in a 128-by-128 grid
  * 1000 random points in a 16-by-16 grid
==> passed

Test 5: insert n random points and check range() for n random query rectangles
  * 1000 random rectangles and points in a 65536-by-65536 grid
  * 1000 random rectangles and points in a 8192-by-8192 grid
  * 1000 random rectangles and points in a 1024-by-1024 grid
  * 1000 random rectangles and points in a 128-by-128 grid
  * 1000 random rectangles and points in a 16-by-16 grid
==> passed

Test 6: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
==> passed

Test 7: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==> passed

Test 8: check whether two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
    - failed after inserting point 1 of 1
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5 0.5

  * input5.txt
    - failed after inserting point 1 of 5
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.7 0.2

  * input10.txt
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.372 0.497

==> FAILED

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
    - failed after inserting point 1 of 1
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 0.0

  * 5 random non-degenerate points in a 8-by-8 grid
    - failed after inserting point 1 of 5
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.625 1.0

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.625 1.0

  * 50 random non-degenerate points in a 128-by-128 grid
    - failed after inserting point 1 of 50
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.6796875 0.34375

  * 500 random non-degenerate points in a 1024-by-1024 grid
    - failed after inserting point 1 of 500
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.556640625 0.8583984375

  * 50000 random non-degenerate points in a 65536-by-65536 grid
    - failed after inserting point 1 of 50000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.68695068359375 0.2954559326171875

==> FAILED

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
    - failed after inserting point 1 of 1
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.0 0.0

  * 10 random distinct points in a 8-by-8 grid
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.25 0.5

  * 20 random distinct points in a 16-by-16 grid
    - failed after inserting point 1 of 20
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.9375 0.25

  * 10000 random distinct points in a 128-by-128 grid
    - failed after inserting point 1 of 10000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.96875 0.7265625

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.37109375 0.0234375

  * 100000 random distinct points in a 65536-by-65536 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.7335052490234375 0.1225433349609375

==> FAILED

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
    - failed after inserting point 1 of 5
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.0 1.0

  * 10 random general points in a 4-by-4 grid
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5 0.25

  * 50 random general points in a 8-by-8 grid
    - failed after inserting point 1 of 50
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.875 0.5

  * 100000 random general points in a 16-by-16 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.25 0.25

  * 100000 random general points in a 128-by-128 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5703125 0.7265625

  * 100000 random general points in a 1024-by-1024 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.158203125 0.3271484375

==> FAILED

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
    - failed on trial 1 of 10000
    - query point          = (0.56, 0.21)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 

  * input1.txt
    - failed on trial 1 of 10000
    - query point          = (0.31, 0.1)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.5 0.5

  * input5.txt
    - failed on trial 1 of 10000
    - query point          = (0.22, 0.41)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6

  * input10.txt
    - failed on trial 1 of 10000
    - query point          = (0.79, 0.18)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208

==> FAILED

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
    - failed on trial 3 of 10000
    - query point          = (1.0, 0.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  1.0 1.0

  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query point          = (0.625, 0.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.25 0.5
      B  0.875 0.875
      C  0.625 0.125
      D  0.375 0.0
      E  0.75 0.625

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point          = (0.8125, 0.1875)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.375 0.9375
      B  0.3125 0.0625
      C  0.1875 0.1875
      D  0.8125 1.0
      E  0.25 0.4375
      F  0.0 0.5
      G  0.75 0.875
      H  0.5625 0.5625
      I  0.9375 0.75
      J  0.625 0.6875

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point          = (0.46875, 0.1875)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.4375 0.3125
      B  0.28125 0.0
      C  1.0 0.78125
      D  0.90625 0.28125
      E  0.5625 0.5
      F  0.625 0.59375
      G  0.21875 0.4375
      H  0.09375 0.84375
      I  0.34375 0.625
      J  0.96875 0.21875
      K  0.75 0.96875
      L  0.0625 0.53125
      M  0.8125 0.09375
      N  0.71875 0.46875
      O  0.5 0.9375
      P  0.3125 0.03125
      Q  0.375 0.5625
      R  0.9375 0.34375
      S  0.6875 0.75
      T  0.65625 0.25

  * 500 random non-degenerate points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point          = (0.6865234375, 0.1328125)
    - student   contains() = true
    - reference contains() = false

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point          = (0.83868408203125, 0.4798736572265625)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
    - failed on trial 1 of 10000
    - query point          = (0.0, 1.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  1.0 0.0

  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 1 of 10000
    - query point          = (0.5, 1.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.5 0.75
      B  0.75 1.0
      C  0.0 1.0
      D  1.0 0.0
      E  0.0 0.25
      F  0.25 0.5
      G  0.75 0.75
      H  0.5 0.0
      I  0.0 0.0
      J  0.75 0.0

  * 20 random distinct points in a 8-by-8 grid
    - failed on trial 2 of 10000
    - query point          = (0.5, 0.125)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.0 0.25
      B  0.0 0.5
      C  0.625 0.0
      D  0.625 0.25
      E  0.625 0.75
      F  1.0 1.0
      G  0.875 0.25
      H  0.25 0.25
      I  1.0 0.0
      J  0.5 1.0
      K  0.0 1.0
      L  0.125 0.625
      M  0.25 0.0
      N  0.625 0.5
      O  0.75 0.625
      P  0.875 0.5
      Q  0.875 0.625
      R  0.875 0.75
      S  0.25 0.625
      T  0.125 0.375

  * 10000 random distinct points in a 128-by-128 grid
    - failed on trial 3 of 10000
    - query point          = (0.3984375, 0.6953125)
    - student   contains() = true
    - reference contains() = false

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point          = (0.15234375, 0.5859375)
    - student   contains() = true
    - reference contains() = false

  * 100000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point          = (0.26593017578125, 0.651123046875)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
    - failed on trial 2 of 10000
    - query point          = (0.84375, 0.6015625)
    - student   contains() = true
    - reference contains() = false

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point          = (0.462890625, 0.2578125)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
    - failed on trial 1 of 10000
    - query rectangle = [0.216, 0.599] x [0.14, 0.59]
    - sequence of points inserted: 
      A  0.5 0.5
    - student   range():  empty
    - reference range():  A 

  * input5.txt
    - failed on trial 1 of 10000
    - query rectangle = [0.451, 0.608] x [0.123, 0.812]
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student   range():  empty
    - reference range():  B 

  * input10.txt
    - failed on trial 1 of 10000
    - query rectangle = [0.445, 0.809] x [0.059, 0.783]
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student   range():  empty
    - reference range():  B J I 

==> FAILED

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.5, 0.75] x [0.6875, 0.9375]
    - sequence of points inserted: 
      A  0.6875 0.75
      B  0.0 0.0625
      C  0.9375 0.5625
      D  1.0 0.4375
      E  0.875 0.875
      F  0.4375 0.0
      G  0.3125 0.625
      H  0.25 0.3125
      I  0.1875 0.375
      J  0.0625 0.1875
    - student   range():  empty
    - reference range():  A 

  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.03125, 0.59375] x [0.59375, 1.0]
    - sequence of points inserted: 
      A  0.96875 0.6875
      B  0.40625 0.75
      C  0.0625 0.84375
      D  0.5 0.78125
      E  0.9375 0.4375
      F  0.125 0.3125
      G  0.71875 0.5625
      H  0.8125 0.15625
      I  0.4375 0.9375
      J  0.375 0.0
      K  0.21875 0.5
      L  0.6875 0.8125
      M  0.75 0.28125
      N  0.15625 0.65625
      O  0.46875 0.0625
      P  0.53125 0.1875
      Q  0.90625 0.96875
      R  0.1875 0.53125
      S  0.78125 0.25
      T  0.34375 0.625
    - student   range():  empty
    - reference range():  B N T C D I 

  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.6396484375, 0.71875] x [0.43359375, 0.56640625]
    - student   range():  empty
    - reference range():  U Z R L N 

  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.558685302734375, 0.89996337890625] x [0.3296051025390625, 0.7838897705078125]
    - student   range():  empty
    - reference range():  Q L L U O B G Z E D G G L A L J Q C E T Y Z A N R K ...

==> FAILED

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 1.0] x [0.0, 1.0]
    - sequence of points inserted: 
      A  0.5 1.0
      B  0.5 0.0
    - student   range():  empty
    - reference range():  A B 

  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.625, 1.0] x [0.625, 1.0]
    - sequence of points inserted: 
      A  0.0 0.125
      B  0.375 1.0
      C  0.0 0.875
      D  1.0 0.375
      E  0.625 0.875
      F  0.5 0.625
      G  0.75 0.5
      H  0.5 0.75
      I  0.875 0.25
      J  0.625 0.25
      K  1.0 0.75
      L  0.25 1.0
      M  1.0 0.5
      N  0.25 0.0
      O  0.625 0.5
      P  1.0 0.25
      Q  0.5 0.0
      R  0.0 0.75
      S  0.125 0.625
      T  0.5 1.0
    - student   range():  empty
    - reference range():  E K 

  * 100 random distinct points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.4375, 1.0] x [0.125, 0.375]
    - student   range():  empty
    - reference range():  F L R S W S Y H D K E X L R O Q J I Q 

  * 1000 random distinct points and random rectangles in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.046875, 0.84375] x [0.359375, 0.703125]
    - student   range():  empty
    - reference range():  A D P H I K O U X T N M I A I L W S H W H U V Z M B ...

  * 10000 random distinct points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.09375, 0.2109375] x [0.1640625, 0.9765625]
    - student   range():  empty
    - reference range():  X N Q I O D J O N Q B T E B V S B N B B S M O P J U ...

==> FAILED

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 0.5] x [0.5, 0.5]
    - student   range():  empty
    - reference range():  F V 

  * 5000 random general points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.25, 0.625] x [0.625, 0.8125]
    - student   range():  empty
    - reference range():  D B G I R E Q D G P O M X R U W G O G O B G W R L X ...

  * 5000 random general points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.3125, 0.4140625] x [0.1171875, 0.9921875]
    - student   range():  empty
    - reference range():  A D F U R B J S C X U J V P Y F N L B G X K W N S W ...

  * 5000 random general points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.166015625, 0.7451171875] x [0.2001953125, 0.7587890625]
    - student   range():  empty
    - reference range():  B N S I G B E M N U Y G O C T T O Y Y R V C V Q B L ...

==> FAILED

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
    - failed on trial 0 of 5
    - query rectangle = [0.25, 0.75] x [0.25, 0.75]
    - sequence of points inserted: 
      A  0.5 0.5
      B  1.0 0.5
      C  0.0 0.5
      D  1.0 0.0
      E  1.0 0.5
    - student   range():  empty
    - reference range():  A 

  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
    - failed on trial 0 of 10
    - query rectangle = [0.625, 0.875] x [0.375, 0.625]
    - sequence of points inserted: 
      A  0.75 0.5
      B  0.25 1.0
      C  1.0 0.5
      D  0.5 0.25
      E  0.0 1.0
      F  0.0 0.75
      G  0.0 1.0
      H  0.75 1.0
      I  1.0 1.0
      J  0.0 0.25
    - student   range():  empty
    - reference range():  A 

  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
    - failed on trial 0 of 20
    - query rectangle = [0.3125, 0.4375] x [0.4375, 0.5625]
    - sequence of points inserted: 
      A  0.375 0.5
      B  1.0 0.625
      C  1.0 0.75
      D  0.875 1.0
      E  0.5 0.5
      F  0.5 0.375
      G  1.0 0.75
      H  0.5 1.0
      I  0.625 0.875
      J  0.875 0.375
      K  0.0 1.0
      L  0.0 0.625
      M  0.0 1.0
      N  0.75 0.5
      O  0.125 0.0
      P  0.5 0.625
      Q  0.5 1.0
      R  0.125 0.875
      S  1.0 0.625
      T  0.375 0.625
    - student   range():  empty
    - reference range():  A 

  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.52734375, 0.53515625] x [0.81640625, 0.82421875]
    - student   range():  empty
    - reference range():  A 

  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.58154296875, 0.58251953125] x [0.39501953125, 0.39599609375]
    - student   range():  empty
    - reference range():  A 

  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.18425750732421875, 0.18427276611328125] x [0.5071182250976562, 0.5071334838867188]
    - student   range():  empty
    - reference range():  A 

==> FAILED

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
    - student range() returns wrong set of points
    - student   range():  empty
    - reference range():  C 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.14, 0.21] x [0.19, 0.38]
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B C 
    - failed on trial 1 of 1000

  * input10.txt
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.52, 0.65] x [0.77, 1.0]
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B H I 
    - failed on trial 1 of 1000

==> FAILED

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.5, 1.0] x [0.25, 0.5]
    - sequence of points inserted: 
      A  0.0 0.75
      B  0.75 1.0
      C  0.25 0.0
    - student kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B C 
    - failed on trial 1 of 1000

  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.625, 0.875] x [0.125, 0.75]
    - sequence of points inserted: 
      A  0.75 0.875
      B  0.25 1.0
      C  0.125 0.25
      D  0.375 0.5
      E  0.5 0.375
      F  0.0 0.0
    - student kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B C D E 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.75, 0.875] x [0.1875, 0.5]
    - sequence of points inserted: 
      A  0.5625 0.5625
      B  0.0 0.8125
      C  0.4375 0.0
      D  0.8125 0.75
      E  0.9375 0.125
      F  0.375 0.3125
      G  0.3125 0.0625
      H  0.6875 0.6875
      I  0.0625 0.875
      J  0.1875 0.625
    - student kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference kd-tree nodes involved in calls to Point2D methods:
      A D E H 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
    - student range() returns wrong set of points
    - student   range():  empty
    - reference range():  B H 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.0625, 0.78125] x [0.15625, 0.375]
    - sequence of points inserted: 
      A  0.65625 0.875
      B  0.34375 0.3125
      C  0.46875 0.5
      D  0.84375 0.28125
      E  0.6875 0.84375
      F  0.90625 0.59375
      G  0.8125 0.40625
      H  0.59375 0.1875
      I  0.40625 0.65625
      J  0.5 0.96875
      K  0.09375 0.03125
      L  0.375 1.0
      M  0.96875 0.9375
      N  0.21875 0.53125
      O  0.1875 0.8125
      P  0.3125 0.09375
      Q  0.25 0.71875
      R  0.5625 0.75
      S  0.75 0.625
      T  1.0 0.0625
    - student kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B H K P C I N J R D T E F G 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.625, 0.984375] x [0.546875, 0.6875]
    - number of entries in student   solution: 0
    - number of entries in reference solution: 13
    - 13 missing entries in student solution, including:
      '(0.71875, 0.890625)'

    - failed on trial 1 of 1000

==> FAILED

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
    - failed on trial 1 of 10000
    - student   nearest()  = (0.312, 0.592)
    - reference nearest()  = null

  * input1.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.5 0.5
    - query point                   = (0.646, 0.162)
    - student   nearest()           = (0.646, 0.162)
    - reference nearest()           = (0.5, 0.5)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.13556
    - (0.646, 0.162) was not inserted into data structure

  * input5.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.419, 0.669)
    - student   nearest()           = (0.419, 0.669)
    - reference nearest()           = (0.4, 0.7)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.001322
    - (0.419, 0.669) was not inserted into data structure

  * input10.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.023, 0.316)
    - student   nearest()           = (0.023, 0.316)
    - reference nearest()           = (0.144, 0.179)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.03341
    - (0.023, 0.316) was not inserted into data structure

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.25 0.125
      B  0.125 0.625
      C  0.875 0.5
      D  1.0 0.375
      E  0.5 0.875
    - query point                   = (0.625, 0.75)
    - student   nearest()           = (0.625, 0.75)
    - reference nearest()           = (0.5, 0.875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.03125
    - (0.625, 0.75) was not inserted into data structure

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.875 1.0
      B  0.0625 0.1875
      C  0.3125 0.0
      D  0.5 0.6875
      E  0.375 0.375
      F  0.8125 0.8125
      G  0.0 0.625
      H  0.9375 0.5
      I  0.1875 0.875
      J  0.75 0.3125
    - query point                   = (0.4375, 0.5625)
    - student   nearest()           = (0.4375, 0.5625)
    - reference nearest()           = (0.5, 0.6875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.01953125
    - (0.4375, 0.5625) was not inserted into data structure

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.03125 0.84375
      B  0.25 0.4375
      C  0.8125 0.46875
      D  0.5 0.3125
      E  0.9375 0.53125
      F  0.3125 0.15625
      G  0.78125 0.25
      H  0.53125 0.625
      I  0.875 0.78125
      J  0.1875 0.40625
      K  0.6875 0.5
      L  0.375 0.75
      M  0.09375 0.03125
      N  0.34375 0.21875
      O  0.4375 0.9375
      P  0.96875 0.96875
      Q  0.125 0.8125
      R  0.46875 0.0
      S  1.0 0.5625
      T  0.59375 0.28125
    - query point                   = (0.84375, 0.90625)
    - student   nearest()           = (0.84375, 0.90625)
    - reference nearest()           = (0.875, 0.78125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0166015625
    - (0.84375, 0.90625) was not inserted into data structure

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query point                   = (0.234375, 0.015625)
    - student   nearest()           = (0.234375, 0.015625)
    - reference nearest()           = (0.25, 0.0625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00244140625
    - (0.234375, 0.015625) was not inserted into data structure

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.4573974609375, 0.98577880859375)
    - student   nearest()           = (0.4573974609375, 0.98577880859375)
    - reference nearest()           = (0.458404541015625, 0.9863128662109375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000001299427822
    - (0.4573974609375, 0.98577880859375) was not inserted into data structure

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.0 0.5
      B  1.0 0.75
      C  0.5 0.25
      D  0.5 0.5
      E  0.75 0.5
      F  0.0 1.0
      G  0.75 1.0
      H  1.0 0.25
      I  0.25 1.0
      J  0.5 1.0
    - query point                   = (1.0, 0.5)
    - student   nearest()           = (1.0, 0.5)
    - reference nearest()           = (1.0, 0.75)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0625
    - (1.0, 0.5) was not inserted into data structure

  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.375 0.625
      B  0.5 0.25
      C  0.25 0.375
      D  0.25 1.0
      E  0.0 0.5
      F  0.5 1.0
      G  0.375 0.0
      H  0.375 0.25
      I  0.875 0.625
      J  0.875 1.0
      K  1.0 0.125
      L  0.5 0.125
      M  0.125 0.75
      N  0.625 0.0
      O  0.375 0.5
    - query point                   = (0.625, 0.75)
    - student   nearest()           = (0.625, 0.75)
    - reference nearest()           = (0.375, 0.625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.078125
    - (0.625, 0.75) was not inserted into data structure

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.6875 0.25
      B  0.75 0.25
      C  0.125 0.1875
      D  0.5 0.0
      E  0.8125 0.0
      F  0.9375 0.5625
      G  0.4375 0.3125
      H  0.3125 0.6875
      I  0.625 0.0625
      J  0.3125 0.1875
      K  0.0625 0.125
      L  0.0625 0.4375
      M  0.125 0.5625
      N  0.5625 0.4375
      O  0.125 0.125
      P  0.875 1.0
      Q  0.4375 0.0
      R  0.0625 0.625
      S  0.875 0.5625
      T  0.5 0.6875
    - query point                   = (0.6875, 0.4375)
    - student   nearest()           = (0.6875, 0.4375)
    - reference nearest()           = (0.5625, 0.4375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.015625
    - (0.6875, 0.4375) was not inserted into data structure

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point                   = (0.59375, 0.15625)
    - student   nearest()           = (0.59375, 0.15625)
    - reference nearest()           = (0.59375, 0.21875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00390625
    - (0.59375, 0.15625) was not inserted into data structure

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.0172271728515625, 0.710418701171875)
    - student   nearest()           = (0.0172271728515625, 0.710418701171875)
    - reference nearest()           = (0.0122833251953125, 0.707977294921875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000030402094126
    - (0.0172271728515625, 0.710418701171875) was not inserted into data structure

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
    - failed on trial 4 of 10000
    - query point                   = (0.1640625, 0.6640625)
    - student   nearest()           = (0.1640625, 0.6640625)
    - reference nearest()           = (0.1640625, 0.65625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00006103515625
    - (0.1640625, 0.6640625) was not inserted into data structure

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point                   = (0.265625, 0.0693359375)
    - student   nearest()           = (0.265625, 0.0693359375)
    - reference nearest()           = (0.26171875, 0.076171875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000061988830566
    - (0.265625, 0.0693359375) was not inserted into data structure

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.15, 0.12)
    - reference nearest() = (0.2, 0.3)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0349
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.15, 0.12)
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C 
    - failed on trial 1 of 1000

  * input10.txt
    - student   nearest() = (0.71, 0.33)
    - reference nearest() = (0.564, 0.413)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.028205
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.71, 0.33)
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B G J H I 
    - failed on trial 1 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (0.0, 0.125)
    - reference nearest() = (0.25, 0.0)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.078125
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.0, 0.125)
    - sequence of points inserted: 
      A  1.0 0.75
      B  0.875 0.625
      C  0.75 0.25
      D  0.5 0.5
      E  0.25 0.0
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D E 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.1875, 1.0)
    - reference nearest() = (0.125, 0.9375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0078125
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.1875, 1.0)
    - sequence of points inserted: 
      A  0.625 0.875
      B  0.0625 0.625
      C  0.6875 0.125
      D  0.875 0.75
      E  0.3125 0.0
      F  0.9375 0.375
      G  0.25 0.5625
      H  1.0 0.25
      I  0.125 0.9375
      J  0.75 0.0625
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B I 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.21875, 0.9375)
    - reference nearest() = (0.3125, 0.875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0126953125
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.21875, 0.9375)
    - sequence of points inserted: 
      A  0.125 0.1875
      B  0.625 0.84375
      C  0.5 0.25
      D  0.0625 0.5
      E  0.03125 0.0625
      F  0.78125 0.71875
      G  0.25 0.125
      H  0.28125 0.78125
      I  0.59375 0.15625
      J  0.4375 0.34375
      K  0.96875 0.96875
      L  0.6875 0.3125
      M  0.53125 0.75
      N  0.375 0.5625
      O  0.75 1.0
      P  0.90625 0.40625
      Q  0.3125 0.875
      R  0.65625 0.6875
      S  0.0 0.28125
      T  0.09375 0.09375
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B K O Q C G H D 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.140625, 0.6875)
    - reference nearest() = (0.125, 0.71875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.001220703125
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 8
    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.75, 0.921875)
    - reference nearest() = (0.8828125, 0.859375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.02154541015625
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 27
    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.03955078125, 0.4150390625)
    - reference nearest() = (0.03369140625, 0.41455078125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00003457069397
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 15
    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
    - failed on trial 1 of 10
    - query point          = (0.1142578125, 0.6611328125)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 

  * nearest()
    - failed on trial 1 of 10
    - student   nearest()  = (0.5, 0.125)
    - reference nearest()  = null

  * range()
==> FAILED

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
    - fails to throw an exception when calling add() with a null argument

  * argument to contains() is null
    - fails to throw an exception when calling contains() with a null argument

  * argument to range() is null
    - fails to throw an exception when calling range() with a null argument

  * argument to nearest() is null
    - fails to throw an exception when calling nearest() with a null argument

==> FAILED

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of operations was:
           st.insert(1.0, 1.0)
           st.insert(0.0, 0.0)
           st.isEmpty()  ==>  true

  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = (0.3125, 0.0)
    - reference nearest()  = (0.6875, 0.5)
    - (0.3125, 0.0) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.390625
    - sequence of operations was:
           st.insert(0.6875, 0.5)
           st.nearest((0.3125, 0.0))   ==>  (0.3125, 0.0)

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.21875, 0.75)
           st.contains((0.15625, 0.7265625))  ==>  true

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 6 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.isEmpty()  ==>  true
           st.insert(0.189453125, 0.5302734375)
           st.insert(0.83203125, 0.025390625)
           st.insert(0.0390625, 0.97265625)
           st.contains((0.28515625, 0.130859375))  ==>  true

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.9151611328125, 0.2236328125)
           st.contains((0.89794921875, 0.2138671875))  ==>  true

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = (0.8115081787109375, 0.6689605712890625)
    - reference nearest()  = (0.6239776611328125, 0.9244537353515625)
    - (0.8115081787109375, 0.6689605712890625) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.100444451905787
    - sequence of operations was:
           st.insert(0.6239776611328125, 0.9244537353515625)
           st.nearest((0.8115081787109375, 0.6689605712890625))   ==>  (0.8115081787109375, 0.6689605712890625)

==> FAILED

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   size() = 0
    - reference size() = 1
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(1.0, 1.0)
           st.size()  ==>  0

  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - rectangle = [0.0625, 0.6875] x [0.1875, 0.75]
    - student   range():  empty
    - reference range():  G 
    - sequence of operations was:
           st.insert(1.0, 1.0)
           st.insert(0.625, 0.5625)
           st.range([0.0625, 0.6875] x [0.1875, 0.75])  ==>  empty

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (0.703125, 0.2734375)
    - reference nearest()  = (0.703125, 0.203125)
    - (0.703125, 0.2734375) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00494384765625
    - sequence of operations was:
           st.insert(0.4609375, 0.453125)
           st.insert(0.703125, 0.203125)
           st.nearest((0.703125, 0.2734375))   ==>  (0.703125, 0.2734375)

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.08203125, 0.55859375)
           st.contains((0.3134765625, 0.2109375))  ==>  true

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.734375, 0.66455078125)
           st.contains((0.4268798828125, 0.06005859375))  ==>  true

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 7 of 20000
    - student   nearest()  = (0.7639923095703125, 0.29034423828125)
    - reference nearest()  = (0.6555328369140625, 0.088226318359375)
    - (0.7639923095703125, 0.29034423828125) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.052615110762417
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.6555328369140625, 0.088226318359375)
           st.range([0.80322265625, 0.8627471923828125] x [0.1642913818359375, 0.2371063232421875])  ==>  empty
           st.range([0.785675048828125, 0.8928070068359375] x [0.4702606201171875, 0.502960205078125])  ==>  empty
           st.insert(0.194915771484375, 0.39166259765625)
           st.insert(0.15704345703125, 0.0704803466796875)
           st.nearest((0.7639923095703125, 0.29034423828125))   ==>  (0.7639923095703125, 0.29034423828125)

==> FAILED

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - rectangle = [0.0, 1.0] x [0.0, 1.0]
    - student   range():  empty
    - reference range():  I W 
    - sequence of operations was:
           st.insert(1.0, 1.0)
           st.insert(1.0, 0.0)
           st.range([0.0, 0.0] x [1.0, 1.0])  ==>  empty
           st.range([0.0, 1.0] x [0.0, 1.0])  ==>  empty

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   size() = 0
    - reference size() = 1
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.25, 0.0625)
           st.size()  ==>  0

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 11 of 20000
    - student   nearest()  = (0.1328125, 0.6015625)
    - reference nearest()  = (0.1015625, 0.140625)
    - (0.1328125, 0.6015625) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.21343994140625
    - sequence of operations was:
           st.size()  ==>  0
           st.size()  ==>  0
           st.isEmpty()  ==>  true
           st.size()  ==>  0
           st.size()  ==>  0
           st.size()  ==>  0
           st.isEmpty()  ==>  true
           st.insert(0.1015625, 0.140625)
           st.insert(0.6328125, 0.9140625)
           st.range([0.25, 0.3125] x [0.4140625, 0.8515625])  ==>  empty
           st.nearest((0.1328125, 0.6015625))   ==>  

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.