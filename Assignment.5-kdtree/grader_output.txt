See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (4 warnings)
PMD:          FAILED (8 warnings)
Checkstyle:   FAILED (0 errors, 4 warnings)

Correctness:  6/36 tests passed
Memory:       16/16 tests passed
Timing:       26/42 tests passed

Aggregate score: 42.38%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.7K Oct 21 16:28 KdTree.java
1.8K Oct 21 16:28 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M B CO_COMPARETO_INCORRECT_FLOATING Co: The method 'compareTo()' incorrectly handles values of type 'double' when they are -0.0 or NaN. To handle these corner cases, use 'Double.compare()' or 'Float.compare()'.  At KdTree.java:[line 38]
M B CO_COMPARETO_INCORRECT_FLOATING Co: The method 'compareTo()' incorrectly handles values of type 'double' when they are -0.0 or NaN. To handle these corner cases, use 'Double.compare()' or 'Float.compare()'.  At KdTree.java:[line 43]
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'left' is never read. Consider removing it from the class.  At KdTree.java:[line 31]
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'right' is never read. Consider removing it from the class.  At KdTree.java:[line 32]
Warnings generated: 4


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:19: The private instance (or static) variable 'pointTree' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:23: The private instance (or static) variable 'xAxis' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:24: The private instance (or static) variable 'point' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:80: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
KdTree.java:95: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PointSET.java:19: The private instance (or static) variable 'pointTree' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PointSET.java:52: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PointSET.java:67: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 8 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:25:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
[WARN] KdTree.java:26:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:19:13: You should not need to use the 'SET' data type in this program. [IllegalType]
[WARN] KdTree.java:22:30: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: inserting n random points and check size() after each insertion
        (size may be less than n because of duplicates)
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 2: check isEmpty() for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==> passed

Test 3: insert n random points and check contains() for n random query points
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 4: insert n random points and check nearest() for n random query points
  * 1000 random points in a 65536-by-65536 grid
    - failed on trial 1 of 1000
    - student   nearest()           = (0.275665283203125, 0.796295166015625)
    - reference nearest()           = (0.2887725830078125, 0.807281494140625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00029250071384
    - (0.275665283203125, 0.796295166015625) was not inserted into the data structure

  * 1000 random points in a 8192-by-8192 grid
    - failed on trial 1 of 1000
    - student   nearest()           = (0.31591796875, 0.71728515625)
    - reference nearest()           = (0.3209228515625, 0.72705078125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000120416283607
    - (0.31591796875, 0.71728515625) was not inserted into the data structure

  * 1000 random points in a 1024-by-1024 grid
    - failed on trial 1 of 1000
    - student   nearest()           = (0.6435546875, 0.94140625)
    - reference nearest()           = (0.6298828125, 0.9638671875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000691413879395
    - (0.6435546875, 0.94140625) was not inserted into the data structure

  * 1000 random points in a 128-by-128 grid
    - failed on trial 1 of 1000
    - student   nearest()           = (0.5234375, 0.4375)
    - reference nearest()           = (0.5234375, 0.4453125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00006103515625
    - (0.5234375, 0.4375) was not inserted into the data structure

  * 1000 random points in a 16-by-16 grid
    - failed on trial 12 of 1000
    - student   nearest()           = (0.125, 1.0)
    - reference nearest()           = (0.125, 0.9375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00390625
    - (0.125, 1.0) was not inserted into the data structure

==> FAILED

Test 5: insert n random points and check range() for n random query rectangles
  * 1000 random rectangles and points in a 65536-by-65536 grid
    - failed on trial 1 of 1000
    - rectangle query        = [0.27480316162109375, 0.27481842041015625] x [3.5858154296875E-4, 3.7384033203125E-4]
    - student   range() size = 0
    - reference range() size = 1

  * 1000 random rectangles and points in a 8192-by-8192 grid
    - failed on trial 1 of 1000
    - rectangle query        = [0.18304443359375, 0.18316650390625] x [6.103515625E-5, 1.8310546875E-4]
    - student   range() size = 0
    - reference range() size = 1

  * 1000 random rectangles and points in a 1024-by-1024 grid
    - failed on trial 1 of 1000
    - rectangle query        = [0.20068359375, 0.20166015625] x [4.8828125E-4, 0.00146484375]
    - student   range() size = 0
    - reference range() size = 1

  * 1000 random rectangles and points in a 128-by-128 grid
    - failed on trial 1 of 972
    - rectangle query        = [0.06640625, 0.07421875] x [0.0, 0.00390625]
    - student   range() size = 0
    - reference range() size = 1

  * 1000 random rectangles and points in a 16-by-16 grid
    - failed on trial 1 of 278
    - rectangle query        = [0.03125, 0.09375] x [0.0, 0.03125]
    - student   range() size = 0
    - reference range() size = 1

==> FAILED

Test 6: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - failed on trial 8 of 10000
    - student   nearest()    = (0.0791015625, 0.6258544921875)
    - reference nearest()    = (0.404296875, 0.415283203125)
    - (0.0791015625, 0.6258544921875) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.150092259049416

  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - failed on trial 12 of 10000
    - student   nearest()    = (0.3359375, 0.564453125)
    - reference nearest()    = (0.4453125, 0.609375)
    - (0.3359375, 0.564453125) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.013980865478516

  * 10000 calls with random points in a 128-by-128 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - failed on trial 23 of 10000
    - student   nearest()    = (0.125, 0.28125)
    - reference nearest()    = (0.0625, 0.7109375)
    - (0.125, 0.28125) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.18853759765625

  * 10000 calls with random points in a 16-by-16 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - failed on trial 3 of 10000
    - student   nearest()    = (0.9375, 0.875)
    - reference nearest()    = (0.5, 0.875)
    - (0.9375, 0.875) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.19140625

  * 10000 calls with random points in a 1-by-1 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - failed on trial 10 of 10000
    - student   nearest()    = (1.0, 0.0)
    - reference nearest()    = (1.0, 1.0)
    - (1.0, 0.0) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 1

==> FAILED

Test 7: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
    - failed on trial 2 of 1000
    - student   nearest()    = (0.595703125, 0.1142578125)
    - reference nearest()    = null
    - (0.595703125, 0.1142578125) was not inserted into data structure
    - student   distanceSquaredTo() = 0

  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
    - failed on trial 3 of 1000
    - student   nearest()    = (0.1884765625, 0.8857421875)
    - reference nearest()    = null
    - (0.1884765625, 0.8857421875) was not inserted into data structure
    - student   distanceSquaredTo() = 0

==> FAILED

Test 8: check whether two PointSET objects can be created at the same time
==> passed


Total: 4/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 28 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
    - failed after inserting point 1 of 1
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5 0.5

  * input5.txt
    - failed after inserting point 1 of 5
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.7 0.2

  * input10.txt
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.372 0.497

==> FAILED

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
    - failed after inserting point 1 of 1
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.0 1.0

  * 5 random non-degenerate points in a 8-by-8 grid
    - failed after inserting point 1 of 5
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.25 0.5

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.375 0.0

  * 50 random non-degenerate points in a 128-by-128 grid
    - failed after inserting point 1 of 50
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5703125 0.9765625

  * 500 random non-degenerate points in a 1024-by-1024 grid
    - failed after inserting point 1 of 500
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.79296875 0.3759765625

  * 50000 random non-degenerate points in a 65536-by-65536 grid
    - failed after inserting point 1 of 50000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.7230987548828125 0.969696044921875

==> FAILED

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
    - failed after inserting point 1 of 1
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 0.0

  * 10 random distinct points in a 8-by-8 grid
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5 0.25

  * 20 random distinct points in a 16-by-16 grid
    - failed after inserting point 1 of 20
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.25 0.25

  * 10000 random distinct points in a 128-by-128 grid
    - failed after inserting point 1 of 10000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.984375 0.7421875

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.021484375 0.3046875

  * 100000 random distinct points in a 65536-by-65536 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.1752777099609375 0.9880218505859375

==> FAILED

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
    - failed after inserting point 1 of 5
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.0 0.0

  * 10 random general points in a 4-by-4 grid
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5 0.75

  * 50 random general points in a 8-by-8 grid
    - failed after inserting point 1 of 50
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 0.375

  * 100000 random general points in a 16-by-16 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.6875 0.5

  * 100000 random general points in a 128-by-128 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.1328125 0.3984375

  * 100000 random general points in a 1024-by-1024 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.138671875 0.150390625

==> FAILED

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
    - failed on trial 1 of 10000
    - query point          = (0.81, 0.61)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 

  * input1.txt
    - failed on trial 1 of 10000
    - query point          = (0.59, 0.12)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.5 0.5

  * input5.txt
    - failed on trial 1 of 10000
    - query point          = (0.34, 0.88)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6

  * input10.txt
    - failed on trial 1 of 10000
    - query point          = (0.08, 0.56)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208

==> FAILED

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
    - failed on trial 1 of 10000
    - query point          = (1.0, 0.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  1.0 1.0

  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query point          = (0.875, 1.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  1.0 0.5
      B  0.75 0.875
      C  0.5 0.25
      D  0.25 0.75
      E  0.0 0.125

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point          = (0.625, 0.875)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.9375 0.875
      B  0.75 0.375
      C  0.6875 0.3125
      D  0.625 0.125
      E  0.875 0.6875
      F  0.5 1.0
      G  1.0 0.1875
      H  0.5625 0.5625
      I  0.25 0.625
      J  0.8125 0.25

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point          = (0.3125, 0.46875)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.78125 0.84375
      B  0.875 0.0
      C  0.96875 0.59375
      D  0.0625 0.6875
      E  0.15625 0.90625
      F  0.4375 0.5625
      G  0.375 0.46875
      H  0.1875 0.96875
      I  0.65625 0.875
      J  0.03125 0.375
      K  0.25 0.3125
      L  0.8125 0.5
      M  0.5625 0.71875
      N  1.0 0.34375
      O  0.75 0.8125
      P  0.5 1.0
      Q  0.09375 0.78125
      R  0.6875 0.28125
      S  0.21875 0.9375
      T  0.90625 0.15625

  * 500 random non-degenerate points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point          = (0.4326171875, 0.8212890625)
    - student   contains() = true
    - reference contains() = false

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point          = (0.5526275634765625, 0.3087310791015625)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
    - failed on trial 1 of 10000
    - query point          = (0.0, 0.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.0 1.0

  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 1 of 10000
    - query point          = (0.5, 1.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.5 0.0
      B  0.25 0.0
      C  0.75 0.0
      D  0.25 0.75
      E  0.75 0.75
      F  0.25 0.5
      G  0.0 0.5
      H  1.0 0.25
      I  0.0 0.0
      J  0.75 1.0

  * 20 random distinct points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query point          = (0.0, 0.75)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.25 0.125
      B  0.625 1.0
      C  1.0 0.0
      D  0.125 1.0
      E  0.5 0.0
      F  0.625 0.5
      G  0.0 0.875
      H  0.625 0.125
      I  0.875 0.25
      J  0.25 0.375
      K  0.875 0.5
      L  0.875 1.0
      M  0.75 0.125
      N  0.375 0.125
      O  0.625 0.75
      P  1.0 0.5
      Q  0.875 0.875
      R  0.25 0.0
      S  0.125 0.875
      T  0.125 0.125

  * 10000 random distinct points in a 128-by-128 grid
    - failed on trial 4 of 10000
    - query point          = (0.46875, 0.40625)
    - student   contains() = true
    - reference contains() = false

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point          = (0.9697265625, 0.4658203125)
    - student   contains() = true
    - reference contains() = false

  * 100000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point          = (0.5581817626953125, 0.757720947265625)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
    - failed on trial 2 of 10000
    - query point          = (0.578125, 0.5078125)
    - student   contains() = true
    - reference contains() = false

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point          = (0.6767578125, 0.3046875)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.375, 0.75] x [0.0, 0.75]
    - sequence of points inserted: 
      A  0.25 0.125
      B  0.0 0.375
      C  0.625 1.0
      D  0.5 0.625
      E  0.875 0.875
    - student   range():  empty
    - reference range():  D 

  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.25, 0.4375] x [0.3125, 0.8125]
    - sequence of points inserted: 
      A  0.5625 0.375
      B  0.875 0.0625
      C  0.625 0.1875
      D  0.125 1.0
      E  0.8125 0.625
      F  0.375 0.75
      G  0.75 0.9375
      H  0.1875 0.6875
      I  0.6875 0.875
      J  0.0625 0.4375
    - student   range():  empty
    - reference range():  F 

  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.65625, 0.84375] x [0.46875, 0.9375]
    - sequence of points inserted: 
      A  0.09375 0.625
      B  0.4375 0.71875
      C  0.03125 0.25
      D  0.875 0.5625
      E  0.21875 0.65625
      F  0.625 0.90625
      G  0.78125 0.28125
      H  0.9375 0.4375
      I  0.71875 0.40625
      J  0.96875 0.03125
      K  0.28125 0.0
      L  0.5625 0.6875
      M  1.0 0.125
      N  0.3125 0.375
      O  0.125 0.875
      P  0.34375 0.15625
      Q  0.53125 0.5
      R  0.0 0.78125
      S  0.8125 0.75
      T  0.25 0.09375
    - student   range():  empty
    - reference range():  S 

  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.5107421875, 0.912109375] x [0.0927734375, 0.12890625]
    - student   range():  empty
    - reference range():  Q N E H I U 

  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.5115203857421875, 0.74505615234375] x [0.241180419921875, 0.533050537109375]
    - student   range():  empty
    - reference range():  I K T P A M N L Z K L G K T I K H F O U U V T N M S ...

==> FAILED

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.375, 0.5] x [0.25, 0.625]
    - sequence of points inserted: 
      A  0.0 0.375
      B  0.75 0.125
      C  1.0 0.0
      D  0.625 0.625
      E  0.375 0.75
      F  0.125 0.625
      G  0.125 0.125
      H  0.0 0.75
      I  0.375 1.0
      J  1.0 0.25
      K  0.125 1.0
      L  0.375 0.5
      M  0.5 0.75
      N  0.5 0.125
      O  0.0 0.625
      P  0.0 0.0
      Q  0.25 0.875
      R  0.5 0.875
      S  0.5 0.375
      T  0.875 0.0
    - student   range():  empty
    - reference range():  L S 

  * 100 random distinct points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0625, 0.3125] x [0.1875, 0.5]
    - student   range():  empty
    - reference range():  U M V V H S U B 

  * 1000 random distinct points and random rectangles in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.015625, 0.640625] x [0.09375, 0.734375]
    - student   range():  empty
    - reference range():  C K E H V M X H E N R T A M X S D F N Y Y B S S Q X ...

  * 10000 random distinct points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.3671875, 0.5390625] x [0.3984375, 0.9609375]
    - student   range():  empty
    - reference range():  H L N I E Q U E O X D P P R K R K A F O V B X Q Z D ...

==> FAILED

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 0.5] x [1.0, 1.0]
    - student   range():  empty
    - reference range():  Z L 

  * 5000 random general points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.125, 0.9375] x [0.5625, 0.75]
    - student   range():  empty
    - reference range():  A V H H O R C T G T A F R J P B T P D L J J R Q W D ...

  * 5000 random general points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.046875, 0.2421875] x [0.46875, 0.53125]
    - student   range():  empty
    - reference range():  W U B X Q M U J Q G L S Q F K D X Y T V A I S H V Z ...

  * 5000 random general points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.375, 0.4912109375] x [0.1982421875, 0.376953125]
    - student   range():  empty
    - reference range():  L Q Z T X A J P X X N C N J U P S R C D X E T X X K ...

==> FAILED

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
    - failed on trial 0 of 5
    - query rectangle = [0.25, 0.75] x [0.0, 0.25]
    - sequence of points inserted: 
      A  0.5 0.0
      B  0.0 0.0
      C  0.5 1.0
      D  0.5 0.5
      E  0.0 0.5
    - student   range():  empty
    - reference range():  A 

  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
    - failed on trial 0 of 10
    - query rectangle = [0.875, 1.0] x [0.125, 0.375]
    - sequence of points inserted: 
      A  1.0 0.25
      B  0.5 0.0
      C  0.75 0.0
      D  0.0 0.75
      E  0.0 0.75
      F  0.0 1.0
      G  1.0 0.25
      H  0.0 0.25
      I  0.75 0.75
      J  0.0 0.75
    - student   range():  empty
    - reference range():  G 

  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
    - failed on trial 0 of 20
    - query rectangle = [0.3125, 0.4375] x [0.3125, 0.4375]
    - sequence of points inserted: 
      A  0.375 0.375
      B  0.75 0.125
      C  0.75 0.125
      D  0.0 1.0
      E  0.5 0.875
      F  0.375 0.375
      G  0.125 0.75
      H  0.625 0.375
      I  0.125 1.0
      J  0.0 0.0
      K  0.0 1.0
      L  0.625 0.875
      M  0.0 0.5
      N  0.875 0.875
      O  0.625 0.0
      P  0.125 0.875
      Q  0.5 0.0
      R  0.0 0.125
      S  1.0 0.125
      T  0.25 0.75
    - student   range():  empty
    - reference range():  F 

  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.69921875, 0.70703125] x [0.53515625, 0.54296875]
    - student   range():  empty
    - reference range():  A 

  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.35498046875, 0.35595703125] x [0.76513671875, 0.76611328125]
    - student   range():  empty
    - reference range():  A 

  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.11806488037109375, 0.11808013916015625] x [0.01021575927734375, 0.01023101806640625]
    - student   range():  empty
    - reference range():  A 

==> FAILED

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.88, 0.91] x [0.11, 0.97]
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A E 

  * input10.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.34, 0.81] x [0.1, 0.48]
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A C D B G J H I 

==> FAILED

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.5, 1.0] x [0.25, 1.0]
    - sequence of points inserted: 
      A  0.0 0.75
      B  0.75 0.0
      C  0.25 0.5
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A B C 

  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.125, 0.75] x [0.0, 1.0]
    - sequence of points inserted: 
      A  0.625 0.875
      B  0.375 0.5
      C  1.0 0.625
      D  0.25 0.75
      E  0.875 0.25
      F  0.0 0.375
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A B F D C E 

  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.6875, 1.0] x [0.5, 0.6875]
    - sequence of points inserted: 
      A  0.125 0.875
      B  0.875 0.5625
      C  0.75 0.1875
      D  0.1875 0.125
      E  0.375 0.9375
      F  0.0 0.0625
      G  0.4375 0.4375
      H  0.5 1.0
      I  0.3125 0.375
      J  0.8125 0.3125
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A B C D G J E H 

  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.0, 0.09375] x [0.03125, 0.71875]
    - sequence of points inserted: 
      A  0.15625 0.375
      B  0.40625 0.28125
      C  0.0625 0.96875
      D  0.375 0.90625
      E  0.75 0.0
      F  0.1875 0.875
      G  0.65625 0.4375
      H  0.25 0.65625
      I  0.9375 0.1875
      J  0.875 0.0625
      K  0.8125 0.15625
      L  0.4375 0.40625
      M  0.21875 0.125
      N  0.3125 0.8125
      O  0.125 0.53125
      P  0.28125 0.75
      Q  0.34375 0.3125
      R  0.71875 0.09375
      S  0.78125 0.59375
      T  0.59375 1.0
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A C O 

  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.1875, 0.34375] x [0.234375, 0.625]
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including:
      '(0.4375, 0.90625)'


==> FAILED

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
    - failed on trial 1 of 10000
    - student   nearest()  = (0.861, 0.955)
    - reference nearest()  = null

  * input1.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.5 0.5
    - query point                   = (0.256, 0.797)
    - student   nearest()           = (0.256, 0.797)
    - reference nearest()           = (0.5, 0.5)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.147745
    - (0.256, 0.797) was not inserted into data structure

  * input5.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.879, 0.935)
    - student   nearest()           = (0.879, 0.935)
    - reference nearest()           = (0.9, 0.6)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.112666
    - (0.879, 0.935) was not inserted into data structure

  * input10.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.386, 0.08)
    - student   nearest()           = (0.386, 0.08)
    - reference nearest()           = (0.499, 0.208)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.029153
    - (0.386, 0.08) was not inserted into data structure

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.625 0.75
      B  0.5 0.0
      C  0.125 0.5
      D  0.75 0.125
      E  1.0 0.875
    - query point                   = (0.875, 0.375)
    - student   nearest()           = (0.875, 0.375)
    - reference nearest()           = (0.75, 0.125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.078125
    - (0.875, 0.375) was not inserted into data structure

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.3125 0.125
      B  0.0 0.3125
      C  0.8125 0.375
      D  0.625 0.6875
      E  0.9375 0.8125
      F  0.5625 0.625
      G  0.75 1.0
      H  0.25 0.1875
      I  0.6875 0.0
      J  0.1875 0.9375
    - query point                   = (0.375, 0.75)
    - student   nearest()           = (0.375, 0.75)
    - reference nearest()           = (0.5625, 0.625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.05078125
    - (0.375, 0.75) was not inserted into data structure

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.59375 0.9375
      B  0.28125 0.1875
      C  0.25 0.875
      D  0.8125 0.5625
      E  0.625 0.0625
      F  0.90625 0.71875
      G  0.65625 0.8125
      H  0.96875 0.6875
      I  0.09375 0.03125
      J  0.0 0.28125
      K  0.5625 0.625
      L  0.53125 0.84375
      M  0.75 0.65625
      N  1.0 0.15625
      O  0.3125 0.09375
      P  0.46875 0.75
      Q  0.71875 0.25
      R  0.4375 0.5
      S  0.03125 0.53125
      T  0.5 0.0
    - query point                   = (0.0625, 0.59375)
    - student   nearest()           = (0.0625, 0.59375)
    - reference nearest()           = (0.03125, 0.53125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0048828125
    - (0.0625, 0.59375) was not inserted into data structure

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query point                   = (0.71875, 0.5)
    - student   nearest()           = (0.71875, 0.5)
    - reference nearest()           = (0.734375, 0.59375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.009033203125
    - (0.71875, 0.5) was not inserted into data structure

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.0772857666015625, 0.3071136474609375)
    - student   nearest()           = (0.0772857666015625, 0.3071136474609375)
    - reference nearest()           = (0.073028564453125, 0.3094482421875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00002357410267
    - (0.0772857666015625, 0.3071136474609375) was not inserted into data structure

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.5 0.25
      B  1.0 0.5
      C  0.0 0.75
      D  0.5 1.0
      E  0.0 0.25
      F  1.0 0.75
      G  0.75 1.0
      H  0.75 0.75
      I  0.0 0.0
      J  0.25 0.25
    - query point                   = (0.25, 0.75)
    - student   nearest()           = (0.25, 0.75)
    - reference nearest()           = (0.0, 0.75)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0625
    - (0.25, 0.75) was not inserted into data structure

  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.0 0.875
      B  0.75 0.625
      C  0.75 1.0
      D  0.25 0.75
      E  0.5 0.5
      F  1.0 0.5
      G  0.625 0.625
      H  0.125 0.0
      I  0.625 0.25
      J  0.375 0.5
      K  0.875 0.125
      L  0.125 0.125
      M  0.875 0.625
      N  0.75 0.75
      O  0.875 0.75
    - query point                   = (0.375, 1.0)
    - student   nearest()           = (0.375, 1.0)
    - reference nearest()           = (0.25, 0.75)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.078125
    - (0.375, 1.0) was not inserted into data structure

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.625 0.625
      B  0.0625 1.0
      C  0.75 0.0
      D  0.0625 0.75
      E  0.8125 0.75
      F  0.4375 0.5
      G  0.25 0.875
      H  0.875 0.9375
      I  0.4375 0.0625
      J  0.875 0.5625
      K  0.0 1.0
      L  0.9375 0.625
      M  0.1875 0.0
      N  0.125 0.0625
      O  0.25 0.75
      P  0.375 0.1875
      Q  0.6875 0.1875
      R  0.5625 0.125
      S  0.3125 0.25
      T  0.1875 0.9375
    - query point                   = (1.0, 0.0)
    - student   nearest()           = (1.0, 0.0)
    - reference nearest()           = (0.75, 0.0)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0625
    - (1.0, 0.0) was not inserted into data structure

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point                   = (0.1875, 0.03125)
    - student   nearest()           = (0.1875, 0.03125)
    - reference nearest()           = (0.21875, 0.0)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.001953125
    - (0.1875, 0.03125) was not inserted into data structure

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.494720458984375, 0.462799072265625)
    - student   nearest()           = (0.494720458984375, 0.462799072265625)
    - reference nearest()           = (0.49493408203125, 0.4573974609375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000029223039746
    - (0.494720458984375, 0.462799072265625) was not inserted into data structure

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point                   = (0.5234375, 0.109375)
    - student   nearest()           = (0.5234375, 0.109375)
    - reference nearest()           = (0.5390625, 0.109375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000244140625
    - (0.5234375, 0.109375) was not inserted into data structure

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point                   = (0.10546875, 0.576171875)
    - student   nearest()           = (0.10546875, 0.576171875)
    - reference nearest()           = (0.10546875, 0.572265625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000015258789062
    - (0.10546875, 0.576171875) was not inserted into data structure

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.7, 0.17)
    - student   nearest()           = (0.7, 0.17)
    - reference nearest()           = (0.7, 0.2)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0009
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A E B C 

  * input10.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.0, 0.73)
    - student   nearest()           = (0.0, 0.73)
    - reference nearest()           = (0.083, 0.51)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.055289
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A C F D E 

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.75 0.625
      B  0.0 0.375
      C  0.875 0.0
      D  0.25 1.0
      E  0.5 0.875
    - query point                   = (0.125, 0.75)
    - student   nearest()           = (0.125, 0.75)
    - reference nearest()           = (0.25, 1.0)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.078125
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B D E 

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.8125 0.375
      B  0.1875 0.1875
      C  1.0 0.5
      D  0.0625 0.125
      E  0.3125 0.625
      F  0.25 0.5625
      G  0.9375 1.0
      H  0.5625 0.75
      I  0.5 0.25
      J  0.4375 0.4375
    - query point                   = (0.125, 0.0)
    - student   nearest()           = (0.125, 0.0)
    - reference nearest()           = (0.0625, 0.125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.01953125
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B D 

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.21875 0.90625
      B  0.03125 0.65625
      C  0.625 0.375
      D  0.1875 0.59375
      E  0.84375 0.5
      F  0.6875 0.40625
      G  0.78125 0.5625
      H  0.15625 0.6875
      I  0.46875 0.34375
      J  1.0 0.96875
      K  0.0 0.25
      L  0.96875 0.0
      M  0.5625 0.15625
      N  0.8125 0.28125
      O  0.53125 0.625
      P  0.125 0.4375
      Q  0.28125 0.1875
      R  0.90625 0.71875
      S  0.59375 0.21875
      T  0.5 0.3125
    - query point                   = (0.65625, 0.53125)
    - student   nearest()           = (0.65625, 0.53125)
    - reference nearest()           = (0.6875, 0.40625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0166015625
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A C E F G O 

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 8

  * 50 random non-degenerate points in a 128-by-128 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 8

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 15

==> FAILED

Test 7: insert n random points; check that repeated calls to get(),
         range(), and nearest() with the same argument yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed

Test 8a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.insert(0.0, 0.0)
           st.contains((1.0, 1.0))  ==>  true

  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = (0.5625, 0.875)
    - reference nearest()  = (0.25, 0.0)
    - (0.5625, 0.875) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.86328125
    - sequence of operations was:
           st.insert(0.25, 0.0)
           st.nearest((0.5625, 0.875))   ==>  (0.5625, 0.875)

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   size() = 0
    - reference size() = 1
    - sequence of operations was:
           st.insert(0.1015625, 0.6484375)
           st.size()  ==>  0

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.453125, 0.4423828125)
           st.range([0.248046875, 0.2685546875] x [0.3203125, 0.705078125])  ==>  empty
           st.contains((0.6962890625, 0.2783203125))  ==>  true

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (0.926025390625, 0.862548828125)
    - reference nearest()  = (0.8619384765625, 0.2872314453125)
    - (0.926025390625, 0.862548828125) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.335097223520279
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.8619384765625, 0.2872314453125)
           st.nearest((0.926025390625, 0.862548828125))   ==>  (0.926025390625, 0.862548828125)

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   size() = 0
    - reference size() = 1
    - sequence of operations was:
           st.insert(0.1523590087890625, 0.27996826171875)
           st.size()  ==>  0

==> FAILED

Test 8b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.0, 0.0)
           st.contains((0.0, 1.0))  ==>  true

  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - rectangle = [0.3125, 0.9375] x [0.1875, 0.6875]
    - student   range():  empty
    - reference range():  I 
    - sequence of operations was:
           st.insert(0.4375, 0.125)
           st.range([0.4375, 0.875] x [0.3125, 0.4375])  ==>  empty
           st.insert(0.9375, 0.625)
           st.range([0.625, 0.9375] x [0.75, 0.875])  ==>  empty
           st.range([0.3125, 0.9375] x [0.1875, 0.6875])  ==>  empty

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.0234375, 0.9609375)
           st.range([0.515625, 0.578125] x [0.265625, 0.5859375])  ==>  empty
           st.contains((0.6953125, 0.71875))  ==>  true

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = (0.2265625, 0.17578125)
    - reference nearest()  = (0.109375, 0.2177734375)
    - (0.2265625, 0.17578125) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.015496253967285
    - sequence of operations was:
           st.insert(0.109375, 0.2177734375)
           st.nearest((0.2265625, 0.17578125))   ==>  (0.2265625, 0.17578125)

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - rectangle = [0.254638671875, 0.5277099609375] x [0.29345703125, 0.9521484375]
    - student   range():  empty
    - reference range():  B 
    - sequence of operations was:
           st.insert(0.9239501953125, 0.6202392578125)
           st.insert(0.5556640625, 0.7745361328125)
           st.insert(0.4752197265625, 0.4378662109375)
           st.range([0.254638671875, 0.5277099609375] x [0.29345703125, 0.9521484375])  ==>  empty

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 8 of 20000
    - student   nearest()  = (0.253784179

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.