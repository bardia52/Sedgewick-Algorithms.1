See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (4 warnings)
PMD:          FAILED (8 warnings)
Checkstyle:   FAILED (0 errors, 4 warnings)

Correctness:  6/36 tests passed
Memory:       16/16 tests passed
Timing:       26/42 tests passed

Aggregate score: 42.38%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.7K Oct 21 20:04 KdTree.java
2.3K Oct 21 20:04 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M B CO_COMPARETO_INCORRECT_FLOATING Co: The method 'compareTo()' incorrectly handles values of type 'double' when they are -0.0 or NaN. To handle these corner cases, use 'Double.compare()' or 'Float.compare()'.  At KdTree.java:[line 38]
M B CO_COMPARETO_INCORRECT_FLOATING Co: The method 'compareTo()' incorrectly handles values of type 'double' when they are -0.0 or NaN. To handle these corner cases, use 'Double.compare()' or 'Float.compare()'.  At KdTree.java:[line 43]
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'left' is never read. Consider removing it from the class.  At KdTree.java:[line 31]
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'right' is never read. Consider removing it from the class.  At KdTree.java:[line 32]
Warnings generated: 4


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:19: The private instance (or static) variable 'pointTree' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:23: The private instance (or static) variable 'xAxis' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:24: The private instance (or static) variable 'point' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:80: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
KdTree.java:95: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PointSET.java:19: The private instance (or static) variable 'pointTree' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PointSET.java:52: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PointSET.java:82: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 8 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:25:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
[WARN] KdTree.java:26:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:19:13: You should not need to use the 'SET' data type in this program. [IllegalType]
[WARN] KdTree.java:22:30: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: inserting n random points and check size() after each insertion
        (size may be less than n because of duplicates)
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 2: check isEmpty() for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==> passed

Test 3: insert n random points and check contains() for n random query points
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 4: insert n random points and check nearest() for n random query points
  * 1000 random points in a 65536-by-65536 grid
  * 1000 random points in a 8192-by-8192 grid
  * 1000 random points in a 1024-by-1024 grid
  * 1000 random points in a 128-by-128 grid
  * 1000 random points in a 16-by-16 grid
==> passed

Test 5: insert n random points and check range() for n random query rectangles
  * 1000 random rectangles and points in a 65536-by-65536 grid
    - failed on trial 1 of 1000
    - rectangle query        = [0.6380386352539062, 0.6380538940429688] x [0.00115203857421875, 0.00116729736328125]
    - student   range() size = 0
    - reference range() size = 1

  * 1000 random rectangles and points in a 8192-by-8192 grid
    - failed on trial 1 of 1000
    - rectangle query        = [0.92864990234375, 0.92877197265625] x [6.103515625E-5, 1.8310546875E-4]
    - student   range() size = 0
    - reference range() size = 1

  * 1000 random rectangles and points in a 1024-by-1024 grid
    - failed on trial 1 of 1000
    - rectangle query        = [0.14892578125, 0.14990234375] x [0.00146484375, 0.00244140625]
    - student   range() size = 0
    - reference range() size = 1

  * 1000 random rectangles and points in a 128-by-128 grid
    - failed on trial 1 of 974
    - rectangle query        = [0.02734375, 0.03515625] x [0.0, 0.00390625]
    - student   range() size = 0
    - reference range() size = 1

  * 1000 random rectangles and points in a 16-by-16 grid
    - failed on trial 1 of 278
    - rectangle query        = [0.0, 0.03125] x [0.0, 0.03125]
    - student   range() size = 0
    - reference range() size = 1

==> FAILED

Test 6: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(0.65625, 0.6943359375)'

    - failed on trial 17 of 10000
    - rectangle = [0.5419921875, 0.762939453125] x [0.666015625, 0.95849609375]

  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(0.27734375, 0.2509765625)'

    - failed on trial 17 of 10000
    - rectangle = [0.1171875, 0.3857421875] x [0.0078125, 0.25390625]

  * 10000 calls with random points in a 128-by-128 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(0.359375, 0.6171875)'

    - failed on trial 18 of 10000
    - rectangle = [0.0078125, 0.4765625] x [0.4375, 0.8984375]

  * 10000 calls with random points in a 16-by-16 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(0.5, 0.1875)'

    - failed on trial 9 of 10000
    - rectangle = [0.5, 0.75] x [0.125, 0.5]

  * 10000 calls with random points in a 1-by-1 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - failed on trial 7 of 10000
    - student   nearest()    = (0.0, 1.0)
    - reference nearest()    = (1.0, 0.0)
    - (0.0, 1.0) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 2

==> FAILED

Test 7: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
    - failed on trial 1 of 1000
    - student   nearest()    = (0.7275390625, 0.9580078125)
    - reference nearest()    = null
    - (0.7275390625, 0.9580078125) was not inserted into data structure
    - student   distanceSquaredTo() = 0

  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
    - failed on trial 1 of 1000
    - student   nearest()    = (0.01171875, 0.3779296875)
    - reference nearest()    = null
    - (0.01171875, 0.3779296875) was not inserted into data structure
    - student   distanceSquaredTo() = 0

==> FAILED

Test 8: check whether two PointSET objects can be created at the same time
==> passed


Total: 5/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 28 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
    - failed after inserting point 1 of 1
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5 0.5

  * input5.txt
    - failed after inserting point 1 of 5
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.7 0.2

  * input10.txt
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.372 0.497

==> FAILED

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
    - failed after inserting point 1 of 1
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.0 0.0

  * 5 random non-degenerate points in a 8-by-8 grid
    - failed after inserting point 1 of 5
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.75 1.0

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 0.6875

  * 50 random non-degenerate points in a 128-by-128 grid
    - failed after inserting point 1 of 50
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5 0.984375

  * 500 random non-degenerate points in a 1024-by-1024 grid
    - failed after inserting point 1 of 500
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.0029296875 0.59375

  * 50000 random non-degenerate points in a 65536-by-65536 grid
    - failed after inserting point 1 of 50000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.2701416015625 0.0350189208984375

==> FAILED

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
    - failed after inserting point 1 of 1
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.0 0.0

  * 10 random distinct points in a 8-by-8 grid
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.75 0.0

  * 20 random distinct points in a 16-by-16 grid
    - failed after inserting point 1 of 20
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.3125 0.5

  * 10000 random distinct points in a 128-by-128 grid
    - failed after inserting point 1 of 10000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.8515625 0.7578125

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.2802734375 0.6044921875

  * 100000 random distinct points in a 65536-by-65536 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.963165283203125 0.16339111328125

==> FAILED

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
    - failed after inserting point 1 of 5
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 0.0

  * 10 random general points in a 4-by-4 grid
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.75 0.25

  * 50 random general points in a 8-by-8 grid
    - failed after inserting point 1 of 50
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 0.125

  * 100000 random general points in a 16-by-16 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5 0.375

  * 100000 random general points in a 128-by-128 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.8984375 0.4296875

  * 100000 random general points in a 1024-by-1024 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.384765625 0.541015625

==> FAILED

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
    - failed on trial 1 of 10000
    - query point          = (0.08, 0.67)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 

  * input1.txt
    - failed on trial 1 of 10000
    - query point          = (0.6, 0.62)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.5 0.5

  * input5.txt
    - failed on trial 1 of 10000
    - query point          = (0.23, 0.76)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6

  * input10.txt
    - failed on trial 1 of 10000
    - query point          = (0.39, 0.92)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208

==> FAILED

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
    - failed on trial 1 of 10000
    - query point          = (0.0, 0.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.0 1.0

  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query point          = (0.75, 0.625)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.625 0.375
      B  0.375 0.875
      C  0.75 1.0
      D  0.875 0.0
      E  0.5 0.625

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point          = (0.4375, 0.0625)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.625 0.6875
      B  0.9375 0.875
      C  0.0 0.5
      D  0.0625 0.125
      E  0.8125 0.4375
      F  0.75 0.1875
      G  0.25 0.9375
      H  0.125 0.3125
      I  0.875 0.8125
      J  0.5 0.0625

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point          = (0.875, 0.09375)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.0625 0.125
      B  0.40625 1.0
      C  0.90625 0.84375
      D  0.6875 0.65625
      E  0.875 0.90625
      F  1.0 0.09375
      G  0.46875 0.71875
      H  0.4375 0.59375
      I  0.1875 0.5
      J  0.8125 0.5625
      K  0.21875 0.34375
      L  0.625 0.03125
      M  0.5 0.3125
      N  0.0 0.625
      O  0.5625 0.40625
      P  0.9375 0.46875
      Q  0.59375 0.21875
      R  0.3125 0.96875
      S  0.125 0.15625
      T  0.25 0.28125

  * 500 random non-degenerate points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point          = (0.5400390625, 0.3486328125)
    - student   contains() = true
    - reference contains() = false

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point          = (0.43597412109375, 0.7453155517578125)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
    - failed on trial 1 of 10000
    - query point          = (1.0, 1.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  1.0 0.0

  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 1 of 10000
    - query point          = (0.0, 1.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.0 0.5
      B  0.25 0.25
      C  0.0 0.25
      D  0.25 0.75
      E  0.75 1.0
      F  0.0 0.0
      G  1.0 0.5
      H  1.0 0.0
      I  0.75 0.5
      J  1.0 0.75

  * 20 random distinct points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query point          = (0.25, 0.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.0 0.0
      B  0.25 0.375
      C  0.125 1.0
      D  0.875 0.375
      E  0.375 0.0
      F  0.875 0.875
      G  1.0 0.25
      H  0.125 0.75
      I  0.25 0.75
      J  0.375 0.25
      K  0.375 0.125
      L  0.125 0.375
      M  0.375 0.375
      N  0.0 1.0
      O  0.375 0.75
      P  0.75 0.625
      Q  0.25 0.5
      R  0.625 0.25
      S  1.0 0.375
      T  0.0 0.625

  * 10000 random distinct points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point          = (0.3984375, 0.109375)
    - student   contains() = true
    - reference contains() = false

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed on trial 2 of 10000
    - query point          = (0.955078125, 0.8115234375)
    - student   contains() = true
    - reference contains() = false

  * 100000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point          = (0.2298431396484375, 0.1166534423828125)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point          = (0.5, 0.1953125)
    - student   contains() = true
    - reference contains() = false

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point          = (0.8291015625, 0.033203125)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
    - failed on trial 1 of 10000
    - query rectangle = [0.136, 0.238] x [0.22, 0.61]
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student   range():  empty
    - reference range():  C 

  * input10.txt
==> FAILED

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.25, 0.75] x [0.125, 0.5]
    - sequence of points inserted: 
      A  1.0 1.0
      B  0.875 0.625
      C  0.625 0.25
      D  0.375 0.375
      E  0.125 0.0
    - student   range():  empty
    - reference range():  C D 

  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.1767578125, 0.83984375] x [0.166015625, 0.6220703125]
    - student   range():  empty
    - reference range():  E G E V H T D J I E C M N U B T V N Q A T O L D T M ...

  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.17041015625, 0.8141326904296875] x [0.2509307861328125, 0.3772735595703125]
    - student   range():  empty
    - reference range():  R K E C Q T L I C B J X E T Z N L S E G L E W V T F ...

==> FAILED

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 0.5] x [0.0, 1.0]
    - sequence of points inserted: 
      A  1.0 0.5
      B  0.5 0.5
    - student   range():  empty
    - reference range():  B 

  * 10 random distinct points and random rectangles in a 4-by-4 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 1.0] x [0.0, 0.25]
    - sequence of points inserted: 
      A  1.0 0.5
      B  0.5 0.25
      C  0.5 1.0
      D  1.0 0.75
      E  0.75 0.25
      F  0.25 1.0
      G  0.25 0.5
      H  0.25 0.0
      I  0.75 0.75
      J  0.5 0.75
    - student   range():  empty
    - reference range():  B H E 

  * 20 random distinct points and random rectangles in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.625, 1.0] x [0.0, 0.625]
    - sequence of points inserted: 
      A  0.25 0.875
      B  0.125 0.5
      C  0.125 0.875
      D  1.0 1.0
      E  0.25 0.5
      F  0.875 0.75
      G  0.625 0.5
      H  0.625 0.25
      I  0.0 0.625
      J  0.375 1.0
      K  0.75 0.375
      L  0.625 0.875
      M  0.625 0.375
      N  0.0 0.0
      O  0.875 0.125
      P  0.375 0.75
      Q  0.0 1.0
      R  0.5 0.625
      S  0.0 0.875
      T  0.875 0.5
    - student   range():  empty
    - reference range():  G H O K M T 

  * 100 random distinct points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.6875, 0.75] x [0.1875, 0.375]
    - student   range():  empty
    - reference range():  O 

  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.4921875, 0.8515625] x [0.609375, 0.8515625]
    - student   range():  empty
    - reference range():  I P R H R V W O F E O X A F B R J O W M N A P F P S ...

==> FAILED

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 1.0] x [0.0, 0.5]
    - student   range():  empty
    - reference range():  A Z G X H B 

  * 5000 random general points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.25, 0.6875] x [0.125, 1.0]
    - student   range():  empty
    - reference range():  U X I K F F N H Z V C U I L S T Y C O N N C S S Q V ...

  * 5000 random general points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0546875, 0.2890625] x [0.2734375, 1.0]
    - student   range():  empty
    - reference range():  X C H W N J Y F W H Z G J G X I U W P K Z D N M C F ...

  * 5000 random general points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.54296875, 0.8544921875] x [0.2548828125, 0.900390625]
    - student   range():  empty
    - reference range():  C A B J A Z S K Q C Y X G Q U M C X F C Q A Q O U Z ...

==> FAILED

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
    - failed on trial 0 of 5
    - query rectangle = [0.25, 0.75] x [0.75, 1.0]
    - sequence of points inserted: 
      A  0.5 1.0
      B  0.0 0.5
      C  0.0 0.5
      D  0.0 1.0
      E  0.0 1.0
    - student   range():  empty
    - reference range():  A 

  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
    - failed on trial 0 of 10
    - query rectangle = [0.625, 0.875] x [0.625, 0.875]
    - sequence of points inserted: 
      A  0.75 0.75
      B  0.0 0.75
      C  0.5 0.25
      D  0.5 0.5
      E  0.75 0.25
      F  0.5 0.0
      G  1.0 1.0
      H  0.5 0.0
      I  0.75 1.0
      J  0.75 0.75
    - student   range():  empty
    - reference range():  J 

  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
    - failed on trial 0 of 20
    - query rectangle = [0.3125, 0.4375] x [0.1875, 0.3125]
    - sequence of points inserted: 
      A  0.375 0.25
      B  1.0 0.875
      C  0.625 0.375
      D  0.375 0.25
      E  0.0 0.25
      F  0.25 0.125
      G  0.875 0.375
      H  0.0 0.125
      I  0.375 0.875
      J  0.5 0.125
      K  0.875 0.25
      L  0.375 0.375
      M  0.875 0.875
      N  0.875 0.125
      O  0.875 0.0
      P  0.75 0.75
      Q  0.0 1.0
      R  0.25 0.25
      S  0.75 0.5
      T  0.0 1.0
    - student   range():  empty
    - reference range():  D 

  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.22265625, 0.23046875] x [0.74609375, 0.75390625]
    - student   range():  empty
    - reference range():  A 

  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.14013671875, 0.14111328125] x [0.95458984375, 0.95556640625]
    - student   range():  empty
    - reference range():  A 

  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.7463455200195312, 0.7463607788085938] x [0.8172683715820312, 0.8172836303710938]
    - student   range():  empty
    - reference range():  A 

==> FAILED

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.19, 0.49] x [0.78, 0.8]
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A B D 

  * input10.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.0, 0.67] x [0.24, 0.38]
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A C D E B G J 

==> FAILED

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.75, 1.0] x [0.75, 1.0]
    - sequence of points inserted: 
      A  0.0 0.5
      B  0.25 0.0
      C  0.5 0.25
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A B C 

  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.375, 0.5] x [0.0, 0.375]
    - sequence of points inserted: 
      A  0.0 0.5
      B  1.0 1.0
      C  0.25 0.625
      D  0.125 0.75
      E  0.625 0.25
      F  0.875 0.125
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A B C E F 

  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.1875, 0.6875] x [0.5, 0.6875]
    - sequence of points inserted: 
      A  0.875 0.25
      B  0.8125 0.0625
      C  0.25 0.4375
      D  0.4375 0.625
      E  0.375 0.5625
      F  0.0625 0.875
      G  0.5625 0.8125
      H  0.3125 0.9375
      I  0.75 0.375
      J  0.9375 0.1875
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A B C F D E I G H 

  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.25, 0.4375] x [0.4375, 0.875]
    - sequence of points inserted: 
      A  0.125 0.3125
      B  0.15625 0.125
      C  0.65625 0.90625
      D  0.8125 0.8125
      E  0.78125 0.75
      F  0.53125 0.46875
      G  0.03125 0.59375
      H  0.75 0.03125
      I  1.0 0.71875
      J  0.9375 0.96875
      K  0.3125 1.0
      L  0.0625 0.0
      M  0.1875 0.28125
      N  0.625 0.34375
      O  0.21875 0.6875
      P  0.46875 0.25
      Q  0.5 0.15625
      R  0.90625 0.84375
      S  0.28125 0.9375
      T  0.09375 0.65625
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A B C F M N K O S 

  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.265625, 0.765625] x [0.046875, 0.546875]
    - number of entries in student   solution: 0
    - number of entries in reference solution: 23
    - 23 missing entries in student solution, including:
      '(0.828125, 0.9375)'


==> FAILED

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
    - failed on trial 1 of 10000
    - student   nearest()  = (0.092, 0.722)
    - reference nearest()  = null

  * input1.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.5 0.5
    - query point                   = (0.824, 0.954)
    - student   nearest()           = (0.824, 0.954)
    - reference nearest()           = (0.5, 0.5)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.311092
    - (0.824, 0.954) was not inserted into data structure

  * input5.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.802, 0.275)
    - student   nearest()           = (0.802, 0.275)
    - reference nearest()           = (0.7, 0.2)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.016029
    - (0.802, 0.275) was not inserted into data structure

  * input10.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.896, 0.928)
    - student   nearest()           = (0.896, 0.928)
    - reference nearest()           = (0.862, 0.825)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.011765
    - (0.896, 0.928) was not inserted into data structure

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  1.0 0.625
      B  0.0 0.5
      C  0.25 0.375
      D  0.375 1.0
      E  0.75 0.125
    - query point                   = (0.625, 0.875)
    - student   nearest()           = (0.625, 0.875)
    - reference nearest()           = (0.375, 1.0)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.078125
    - (0.625, 0.875) was not inserted into data structure

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.8125 0.4375
      B  0.25 0.0
      C  0.6875 0.1875
      D  0.5 0.625
      E  0.1875 0.5625
      F  0.875 0.6875
      G  1.0 0.8125
      H  0.75 0.25
      I  0.625 0.3125
      J  0.0 0.875
    - query point                   = (0.4375, 0.0625)
    - student   nearest()           = (0.4375, 0.0625)
    - reference nearest()           = (0.25, 0.0)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0390625
    - (0.4375, 0.0625) was not inserted into data structure

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.9375 0.25
      B  0.03125 0.0
      C  0.125 1.0
      D  0.6875 0.4375
      E  0.0 0.15625
      F  0.1875 0.46875
      G  0.28125 0.78125
      H  1.0 0.90625
      I  0.65625 0.5625
      J  0.71875 0.1875
      K  0.625 0.0625
      L  0.4375 0.84375
      M  0.59375 0.40625
      N  0.84375 0.375
      O  0.375 0.65625
      P  0.0625 0.125
      Q  0.09375 0.5
      R  0.90625 0.75
      S  0.75 0.875
      T  0.78125 0.6875
    - query point                   = (0.875, 0.09375)
    - student   nearest()           = (0.875, 0.09375)
    - reference nearest()           = (0.9375, 0.25)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0283203125
    - (0.875, 0.09375) was not inserted into data structure

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query point                   = (0.421875, 0.765625)
    - student   nearest()           = (0.421875, 0.765625)
    - reference nearest()           = (0.5, 0.71875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00830078125
    - (0.421875, 0.765625) was not inserted into data structure

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.7978057861328125, 0.2314605712890625)
    - student   nearest()           = (0.7978057861328125, 0.2314605712890625)
    - reference nearest()           = (0.79541015625, 0.2311859130859375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000005814479664
    - (0.7978057861328125, 0.2314605712890625) was not inserted into data structure

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.25 0.75
      B  0.75 0.0
      C  1.0 0.0
      D  1.0 0.25
      E  0.25 0.0
      F  0.75 1.0
      G  1.0 0.75
      H  0.75 0.5
      I  0.0 0.5
      J  1.0 1.0
    - query point                   = (0.0, 0.0)
    - student   nearest()           = (0.0, 0.0)
    - reference nearest()           = (0.25, 0.0)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0625
    - (0.0, 0.0) was not inserted into data structure

  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  1.0 0.375
      B  0.375 0.25
      C  0.625 0.25
      D  1.0 0.75
      E  1.0 0.25
      F  0.875 0.625
      G  0.375 1.0
      H  1.0 1.0
      I  0.875 0.875
      J  0.0 0.75
      K  0.25 0.125
      L  0.5 0.5
      M  0.125 0.375
      N  0.125 0.125
      O  0.375 0.5
    - query point                   = (0.875, 0.125)
    - student   nearest()           = (0.875, 0.125)
    - reference nearest()           = (1.0, 0.25)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.03125
    - (0.875, 0.125) was not inserted into data structure

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.375 0.0
      B  0.75 0.0625
      C  1.0 0.5625
      D  0.5625 0.625
      E  0.9375 1.0
      F  0.75 0.9375
      G  0.6875 0.1875
      H  0.9375 0.6875
      I  1.0 0.875
      J  0.9375 0.8125
      K  0.5625 0.75
      L  0.125 0.9375
      M  0.125 0.75
      N  0.375 0.875
      O  0.875 0.25
      P  0.375 0.5625
      Q  0.6875 0.625
      R  0.0625 0.125
      S  0.3125 0.8125
      T  0.5 0.5
    - query point                   = (0.0, 0.4375)
    - student   nearest()           = (0.0, 0.4375)
    - reference nearest()           = (0.0625, 0.125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.1015625
    - (0.0, 0.4375) was not inserted into data structure

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point                   = (0.3125, 0.0)
    - student   nearest()           = (0.3125, 0.0)
    - reference nearest()           = (0.25, 0.0625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0078125
    - (0.3125, 0.0) was not inserted into data structure

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.6514129638671875, 0.447113037109375)
    - student   nearest()           = (0.6514129638671875, 0.447113037109375)
    - reference nearest()           = (0.6473541259765625, 0.44744873046875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000016586855054
    - (0.6514129638671875, 0.447113037109375) was not inserted into data structure

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point                   = (0.3203125, 0.0)
    - student   nearest()           = (0.3203125, 0.0)
    - reference nearest()           = (0.328125, 0.0)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00006103515625
    - (0.3203125, 0.0) was not inserted into data structure

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point                   = (0.84765625, 0.3486328125)
    - student   nearest()           = (0.84765625, 0.3486328125)
    - reference nearest()           = (0.845703125, 0.34765625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000004768371582
    - (0.84765625, 0.3486328125) was not inserted into data structure

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.87, 0.94)
    - student   nearest()           = (0.87, 0.94)
    - reference nearest()           = (0.9, 0.6)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.1165
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A E B D 

  * input10.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.96, 0.77)
    - student   nearest()           = (0.96, 0.77)
    - reference nearest()           = (0.862, 0.825)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.012629
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B H I 

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.25 0.625
      B  0.125 0.5
      C  0.75 0.0
      D  0.625 0.875
      E  0.875 0.375
    - query point                   = (0.5, 0.25)
    - student   nearest()           = (0.5, 0.25)
    - reference nearest()           = (0.75, 0.0)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.125
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A C D E B 

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.75 0.0
      B  0.9375 0.3125
      C  0.0 0.9375
      D  0.1875 0.625
      E  0.375 0.0625
      F  0.3125 0.875
      G  0.875 1.0
      H  0.25 0.75
      I  0.8125 0.125
      J  0.0625 0.375
    - query point                   = (0.5, 0.5625)
    - student   nearest()           = (0.5, 0.5625)
    - reference nearest()           = (0.25, 0.75)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.09765625
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A C D E F H B G 

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.34375 1.0
      B  0.71875 0.34375
      C  0.125 0.25
      D  0.15625 0.40625
      E  0.0625 0.53125
      F  0.65625 0.59375
      G  0.5625 0.71875
      H  0.3125 0.3125
      I  0.90625 0.375
      J  0.21875 0.28125
      K  0.9375 0.875
      L  0.96875 0.21875
      M  0.6875 0.4375
      N  1.0 0.5625
      O  0.5 0.90625
      P  0.625 0.125
      Q  0.4375 0.9375
      R  0.1875 0.65625
      S  0.75 0.15625
      T  0.40625 0.5
    - query point                   = (0.0, 0.84375)
    - student   nearest()           = (0.0, 0.84375)
    - reference nearest()           = (0.1875, 0.65625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0703125
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A C D E H R 

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 6

  * 50 random non-degenerate points in a 128-by-128 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 7

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 14

==> FAILED

Test 7: insert n random points; check that repeated calls to get(),
         range(), and nearest() with the same argument yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed

Test 8a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of operations was:
           st.insert(1.0, 1.0)
           st.isEmpty()  ==>  true

  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 7 of 20000
    - student   nearest()  = (0.8125, 0.625)
    - reference nearest()  = (0.4375, 0.4375)
    - (0.8125, 0.625) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.17578125
    - sequence of operations was:
           st.size()  ==>  0
           st.size()  ==>  0
           st.isEmpty()  ==>  true
           st.insert(0.3125, 0.125)
           st.insert(0.0, 0.8125)
           st.insert(0.4375, 0.4375)
           st.nearest((0.8125, 0.625))   ==>  (0.8125, 0.625)

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.insert(0.3671875, 0.875)
           st.insert(0.4140625, 0.9765625)
           st.insert(0.4453125, 0.59375)
           st.isEmpty()  ==>  true

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.5205078125, 0.5107421875)
           st.insert(0.3642578125, 0.91796875)
           st.insert(0.568359375, 0.6103515625)
           st.insert(0.681640625, 0.90234375)
           st.contains((0.9658203125, 0.9560546875))  ==>  true

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.size()  ==>  0
           st.isEmpty()  ==>  true
           st.insert(0.90625, 0.3720703125)
           st.contains((0.762939453125, 0.135986328125))  ==>  true

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of operations was:
           st.insert(0.14447021484375, 0.5614776611328125)
           st.insert(0.6175689697265625, 0.58123779296875)
           st.range([0.2689666748046875, 0.8355255126953125] x [0.040679931640625, 0.1920013427734375])  ==>  empty
           st.isEmpty()  ==>  true

==> FAILED

Test 8b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (0.0, 1.0)
    - reference nearest()  = (0.0, 0.0)
    - (0.0, 1.0) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 1
    - sequence of operations was:
           st.insert(1.0, 0.0)
           st.insert(0.0, 0.0)
           st.nearest((0.0, 1.0))   ==>  (0.0, 1.0)

  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (1.0, 0.25)
    - reference nearest()  = (0.3125, 1.0)
    - (1.0, 0.25) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 1.03515625
    - sequence of operations was:
           st.insert(0.3125, 1.0)
           st.range([0.625, 0.6875] x [0.5, 0.875])  ==>  empty
           st.nearest((1.0, 0.25))   ==>  (1.0, 0.25)

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (0.234375, 0.0390625)
    - reference nearest()  = (0.4140625, 0.4375)
    - (0.234375, 0.0390625) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.1910400390625
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.insert(0.4140625, 0.4375)
           st.nearest((0.234375, 0.0390625))   ==>  (0.234375, 0.0390625)

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.0146484375, 0.7392578125)
           st.contains((0.759765625, 0.609375))  ==>  true

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - student   nearest()  = (0.1070556640625, 0.904296875)
    - reference nearest()  = (0.735595703125, 0.363525390625)
    - (0.1070556640625, 0.904296875) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.68749637901783
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.735595703125, 0.363525390625)
           st.insert(0.33349609375, 7.32421875E-4)
           st.nearest((0.1070556640625, 0.904296875))   ==>  (0.1070556640625, 0.904296875)

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = (0.854766845703125, 0.4172210693359375)
    - reference nearest()  = (0.7487030029296875, 0.911376953125)
    - (0.854766845703125, 0.4172210693359375) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.255439576227218
    - sequence of operations was:
           st.insert(0.7487030029296875, 0.911376953125)
           st.nearest((0.854766845703125, 0.4172210693359375))   ==>  (0.854766845703125, 0.4172210693359375)

==> FAILED

Test 8c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.0, 1.0)
           st.insert(0.0, 1.0)
           st.range([1.0, 1.0] x [0.0, 1.0])  ==>  empty
           st.contains((1.0, 0.0))  ==>  true

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.5, 0.375)
           st.contains((0.125, 0.625))  ==>  true

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   nearest()  = (0.60

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.