See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (4 warnings)
PMD:          FAILED (8 warnings)
Checkstyle:   FAILED (0 errors, 4 warnings)

Correctness:  8/36 tests passed
Memory:       16/16 tests passed
Timing:       26/42 tests passed

Aggregate score: 45.71%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.7K Oct 22 04:37 KdTree.java
2.5K Oct 22 04:37 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M B CO_COMPARETO_INCORRECT_FLOATING Co: The method 'compareTo()' incorrectly handles values of type 'double' when they are -0.0 or NaN. To handle these corner cases, use 'Double.compare()' or 'Float.compare()'.  At KdTree.java:[line 38]
M B CO_COMPARETO_INCORRECT_FLOATING Co: The method 'compareTo()' incorrectly handles values of type 'double' when they are -0.0 or NaN. To handle these corner cases, use 'Double.compare()' or 'Float.compare()'.  At KdTree.java:[line 43]
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'left' is never read. Consider removing it from the class.  At KdTree.java:[line 31]
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'right' is never read. Consider removing it from the class.  At KdTree.java:[line 32]
Warnings generated: 4


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:19: The private instance (or static) variable 'pointTree' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:23: The private instance (or static) variable 'xAxis' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:24: The private instance (or static) variable 'point' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:80: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
KdTree.java:95: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PointSET.java:19: The private instance (or static) variable 'pointTree' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PointSET.java:52: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PointSET.java:86: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 8 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:25:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
[WARN] KdTree.java:26:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:19:13: You should not need to use the 'SET' data type in this program. [IllegalType]
[WARN] KdTree.java:22:30: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: inserting n random points and check size() after each insertion
        (size may be less than n because of duplicates)
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 2: check isEmpty() for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==> passed

Test 3: insert n random points and check contains() for n random query points
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 4: insert n random points and check nearest() for n random query points
  * 1000 random points in a 65536-by-65536 grid
  * 1000 random points in a 8192-by-8192 grid
  * 1000 random points in a 1024-by-1024 grid
  * 1000 random points in a 128-by-128 grid
  * 1000 random points in a 16-by-16 grid
==> passed

Test 5: insert n random points and check range() for n random query rectangles
  * 1000 random rectangles and points in a 65536-by-65536 grid
  * 1000 random rectangles and points in a 8192-by-8192 grid
  * 1000 random rectangles and points in a 1024-by-1024 grid
  * 1000 random rectangles and points in a 128-by-128 grid
  * 1000 random rectangles and points in a 16-by-16 grid
==> passed

Test 6: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
==> passed

Test 7: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
    - failed on trial 1 of 1000
    - student   nearest()    = (0.689453125, 0.9248046875)
    - reference nearest()    = null
    - (0.689453125, 0.9248046875) was not inserted into data structure
    - student   distanceSquaredTo() = 0

  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
    - failed on trial 6 of 1000
    - student   nearest()    = (0.166015625, 0.5234375)
    - reference nearest()    = null
    - (0.166015625, 0.5234375) was not inserted into data structure
    - student   distanceSquaredTo() = 0

==> FAILED

Test 8: check whether two PointSET objects can be created at the same time
==> passed


Total: 7/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 28 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
    - failed after inserting point 1 of 1
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5 0.5

  * input5.txt
    - failed after inserting point 1 of 5
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.7 0.2

  * input10.txt
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.372 0.497

==> FAILED

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
    - failed after inserting point 1 of 1
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 0.0

  * 5 random non-degenerate points in a 8-by-8 grid
    - failed after inserting point 1 of 5
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.125 0.25

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.375 0.375

  * 50 random non-degenerate points in a 128-by-128 grid
    - failed after inserting point 1 of 50
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.9765625 0.0625

  * 500 random non-degenerate points in a 1024-by-1024 grid
    - failed after inserting point 1 of 500
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.052734375 0.59375

  * 50000 random non-degenerate points in a 65536-by-65536 grid
    - failed after inserting point 1 of 50000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.8521728515625 0.56890869140625

==> FAILED

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
    - failed after inserting point 1 of 1
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.0 0.0

  * 10 random distinct points in a 8-by-8 grid
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 1.0

  * 20 random distinct points in a 16-by-16 grid
    - failed after inserting point 1 of 20
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.875 0.0

  * 10000 random distinct points in a 128-by-128 grid
    - failed after inserting point 1 of 10000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.140625 0.140625

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.509765625 0.2041015625

  * 100000 random distinct points in a 65536-by-65536 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.73779296875 0.09991455078125

==> FAILED

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
    - failed after inserting point 1 of 5
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.0 0.0

  * 10 random general points in a 4-by-4 grid
    - failed after inserting point 1 of 10
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5 0.0

  * 50 random general points in a 8-by-8 grid
    - failed after inserting point 1 of 50
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 1.0

  * 100000 random general points in a 16-by-16 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.8125 0.0

  * 100000 random general points in a 128-by-128 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.4375 0.6171875

  * 100000 random general points in a 1024-by-1024 grid
    - failed after inserting point 1 of 100000
    - student   size()    = 0
    - reference size()    = 1
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.8095703125 0.3935546875

==> FAILED

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
    - failed on trial 1 of 10000
    - query point          = (0.46, 0.06)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 

  * input1.txt
    - failed on trial 1 of 10000
    - query point          = (0.57, 0.06)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.5 0.5

  * input5.txt
    - failed on trial 1 of 10000
    - query point          = (0.71, 0.1)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6

  * input10.txt
    - failed on trial 1 of 10000
    - query point          = (0.69, 0.51)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208

==> FAILED

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
    - failed on trial 3 of 10000
    - query point          = (0.0, 1.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  1.0 0.0

  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query point          = (0.125, 0.375)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.125 0.75
      B  1.0 0.125
      C  0.25 0.875
      D  0.625 0.5
      E  0.5 1.0

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point          = (0.4375, 0.1875)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.375 0.3125
      B  0.25 0.4375
      C  0.5 0.9375
      D  0.5625 0.5625
      E  0.625 0.5
      F  0.6875 0.8125
      G  0.75 0.375
      H  0.8125 0.25
      I  0.875 0.0625
      J  0.9375 0.1875

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point          = (1.0, 0.3125)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.5 0.3125
      B  0.0625 1.0
      C  0.34375 0.34375
      D  0.0 0.125
      E  0.4375 0.0625
      F  0.65625 0.6875
      G  0.90625 0.9375
      H  1.0 0.0
      I  0.3125 0.71875
      J  0.625 0.625
      K  0.375 0.5625
      L  0.53125 0.875
      M  0.6875 0.8125
      N  0.28125 0.03125
      O  0.09375 0.375
      P  0.21875 0.78125
      Q  0.40625 0.84375
      R  0.25 0.65625
      S  0.03125 0.46875
      T  0.125 0.28125

  * 500 random non-degenerate points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point          = (0.18359375, 0.00390625)
    - student   contains() = true
    - reference contains() = false

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point          = (0.2990875244140625, 0.7208099365234375)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
    - failed on trial 1 of 10000
    - query point          = (1.0, 1.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.0 0.0

  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 1 of 10000
    - query point          = (0.0, 0.75)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.0 0.25
      B  0.5 0.75
      C  0.25 0.75
      D  0.5 1.0
      E  0.25 0.5
      F  1.0 0.0
      G  1.0 0.75
      H  0.25 0.0
      I  0.25 1.0
      J  0.5 0.5

  * 20 random distinct points in a 8-by-8 grid
    - failed on trial 2 of 10000
    - query point          = (0.0, 0.875)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted: 
      A  0.125 0.25
      B  1.0 0.75
      C  0.0 0.0
      D  0.75 0.5
      E  1.0 0.125
      F  0.25 0.75
      G  0.0 0.375
      H  0.875 0.25
      I  0.875 1.0
      J  0.625 0.0
      K  0.875 0.875
      L  0.75 0.875
      M  0.75 0.625
      N  0.5 0.125
      O  0.875 0.75
      P  0.5 0.625
      Q  0.375 0.0
      R  0.375 0.625
      S  0.0 0.625
      T  0.875 0.125

  * 10000 random distinct points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point          = (0.109375, 0.65625)
    - student   contains() = true
    - reference contains() = false

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point          = (0.1416015625, 0.658203125)
    - student   contains() = true
    - reference contains() = false

  * 100000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point          = (0.7449798583984375, 0.3032073974609375)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point          = (0.3515625, 0.578125)
    - student   contains() = true
    - reference contains() = false

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point          = (0.65625, 0.8095703125)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
    - failed on trial 1 of 10000
    - query rectangle = [0.487, 0.585] x [0.236, 0.697]
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student   range():  empty
    - reference range():  B 

==> FAILED

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 0.5] x [0.125, 0.875]
    - sequence of points inserted: 
      A  1.0 0.0
      B  0.875 0.75
      C  0.625 0.25
      D  0.75 0.5
      E  0.125 0.375
    - student   range():  empty
    - reference range():  E 

  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.15625, 0.625] x [0.25, 0.9375]
    - sequence of points inserted: 
      A  0.9375 0.5625
      B  0.34375 0.3125
      C  0.59375 0.65625
      D  0.53125 0.71875
      E  0.75 0.0625
      F  0.90625 0.625
      G  0.125 0.125
      H  0.3125 0.46875
      I  0.0625 0.1875
      J  0.21875 0.90625
      K  0.96875 0.375
      L  0.65625 0.53125
      M  1.0 0.84375
      N  0.28125 0.8125
      O  0.4375 0.40625
      P  0.40625 0.59375
      Q  0.84375 0.96875
      R  0.5625 0.0
      S  0.46875 0.28125
      T  0.09375 0.34375
    - student   range():  empty
    - reference range():  B S C D H O P J N 

  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.1435546875, 0.8681640625] x [0.6318359375, 0.6904296875]
    - student   range():  empty
    - reference range():  M U B F G P P P F H X J L Y Y U Q V H U K N F W X M 

  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0090484619140625, 0.688232421875] x [0.3207244873046875, 0.8005218505859375]
    - student   range():  empty
    - reference range():  G X S D O K T J W A W Y T J X C A U X Q D F C C C Z ...

==> FAILED

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 1.0] x [0.0, 0.5]
    - sequence of points inserted: 
      A  0.5 0.5
      B  1.0 1.0
    - student   range():  empty
    - reference range():  A 

  * 10 random distinct points and random rectangles in a 4-by-4 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 1.0] x [0.0, 0.75]
    - sequence of points inserted: 
      A  0.5 0.75
      B  0.0 1.0
      C  0.5 0.5
      D  0.25 0.5
      E  0.5 1.0
      F  0.75 0.5
      G  0.0 0.25
      H  0.25 0.75
      I  0.5 0.25
      J  0.75 0.0
    - student   range():  empty
    - reference range():  A D G H C I J F 

  * 20 random distinct points and random rectangles in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 0.125] x [0.125, 0.625]
    - sequence of points inserted: 
      A  0.125 0.25
      B  0.875 0.25
      C  0.875 0.75
      D  0.375 0.625
      E  1.0 0.75
      F  0.5 1.0
      G  0.0 1.0
      H  0.5 0.0
      I  1.0 1.0
      J  0.125 0.875
      K  0.75 0.625
      L  0.875 0.875
      M  0.75 1.0
      N  0.375 0.25
      O  0.75 0.75
      P  1.0 0.5
      Q  0.5 0.75
      R  0.125 0.0
      S  0.75 0.125
      T  0.25 1.0
    - student   range():  empty
    - reference range():  A 

  * 100 random distinct points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.375, 0.75] x [0.0, 0.5625]
    - student   range():  empty
    - reference range():  B E K D P S B C P T W U J K S H A I U 

  * 1000 random distinct points and random rectangles in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.484375, 0.5625] x [0.046875, 0.0625]
    - student   range():  empty
    - reference range():  X B J F 

  * 10000 random distinct points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0390625, 0.515625] x [0.59375, 0.8984375]
    - student   range():  empty
    - reference range():  L M O H A R B G Q G V E I I P S T I O T X I W G O G ...

==> FAILED

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.5, 0.5] x [0.0, 0.5]
    - student   range():  empty
    - reference range():  F G 

  * 5000 random general points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.1875, 0.25] x [0.875, 1.0]
    - student   range():  empty
    - reference range():  E R X H X O 

  * 5000 random general points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.625, 0.9296875] x [0.1171875, 0.15625]
    - student   range():  empty
    - reference range():  Q L B Y S Q Z B M E R N Q S Z Z P S Q F U C U H H A ...

  * 5000 random general points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.638671875, 0.6669921875] x [0.6259765625, 0.6865234375]
    - student   range():  empty
    - reference range():  Q L J D T J L Z D X 

==> FAILED

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
    - failed on trial 0 of 5
    - query rectangle = [0.75, 1.0] x [0.0, 0.25]
    - sequence of points inserted: 
      A  1.0 0.0
      B  1.0 0.0
      C  0.5 0.5
      D  1.0 0.5
      E  1.0 1.0
    - student   range():  empty
    - reference range():  B 

  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
    - failed on trial 0 of 10
    - query rectangle = [0.625, 0.875] x [0.875, 1.0]
    - sequence of points inserted: 
      A  0.75 1.0
      B  0.75 0.25
      C  0.0 0.75
      D  1.0 0.75
      E  0.5 0.0
      F  0.75 0.5
      G  0.25 0.5
      H  0.0 1.0
      I  1.0 0.75
      J  1.0 1.0
    - student   range():  empty
    - reference range():  A 

  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
    - failed on trial 0 of 20
    - query rectangle = [0.8125, 0.9375] x [0.6875, 0.8125]
    - sequence of points inserted: 
      A  0.875 0.75
      B  0.0 0.25
      C  0.25 0.625
      D  1.0 1.0
      E  0.875 0.0
      F  0.625 0.5
      G  0.75 0.0
      H  0.875 0.125
      I  0.875 0.0
      J  0.0 0.25
      K  0.125 0.25
      L  1.0 0.125
      M  1.0 0.375
      N  0.375 0.375
      O  0.75 1.0
      P  0.875 0.125
      Q  0.0 0.0
      R  0.625 0.25
      S  0.625 1.0
      T  0.875 0.75
    - student   range():  empty
    - reference range():  T 

  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.55859375, 0.56640625] x [0.33203125, 0.33984375]
    - student   range():  empty
    - reference range():  A 

  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.43701171875, 0.43798828125] x [0.38720703125, 0.38818359375]
    - student   range():  empty
    - reference range():  A 

  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.00478363037109375, 0.00479888916015625] x [0.5338363647460938, 0.5338516235351562]
    - student   range():  empty
    - reference range():  A 

==> FAILED

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.06, 0.58] x [0.28, 0.68]
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A B C D 

  * input10.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.13, 0.18] x [0.47, 0.53]
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A C D E 

==> FAILED

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.0, 0.5] x [0.25, 1.0]
    - sequence of points inserted: 
      A  1.0 0.5
      B  0.25 0.0
      C  0.75 0.75
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A B C 

  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.25, 0.75] x [0.0, 0.75]
    - sequence of points inserted: 
      A  0.375 0.625
      B  0.625 0.125
      C  1.0 0.5
      D  0.875 0.875
      E  0.0 0.375
      F  0.5 1.0
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A E B C D 

  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.3125, 0.9375] x [0.625, 0.875]
    - sequence of points inserted: 
      A  0.5 0.6875
      B  0.5625 0.0
      C  0.0 0.8125
      D  0.6875 0.4375
      E  0.25 0.25
      F  0.75 0.9375
      G  0.125 0.5
      H  0.0625 0.5625
      I  0.375 0.0625
      J  0.875 0.75
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A C E I B D F J 

  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.25, 0.28125] x [0.40625, 1.0]
    - sequence of points inserted: 
      A  0.1875 0.4375
      B  0.84375 0.71875
      C  0.0625 0.125
      D  0.34375 0.15625
      E  0.875 0.34375
      F  0.59375 0.6875
      G  0.8125 0.1875
      H  0.375 0.5625
      I  0.6875 0.90625
      J  0.4375 0.59375
      K  0.46875 0.5
      L  0.5625 0.84375
      M  0.90625 0.9375
      N  0.3125 0.28125
      O  0.65625 0.96875
      P  0.15625 0.0
      Q  0.0 0.78125
      R  0.5 0.53125
      S  0.625 0.75
      T  0.96875 0.46875
    - student sequence of kd-tree nodes involved in calls to contains():
      empty
    - reference sequence of kd-tree nodes involved in calls to contains():
      A B D N I L S O 

  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.28125, 0.78125] x [0.390625, 0.765625]
    - number of entries in student   solution: 0
    - number of entries in reference solution: 16
    - 16 missing entries in student solution, including:
      '(0.453125, 0.96875)'


==> FAILED

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
    - failed on trial 1 of 10000
    - student   nearest()  = (0.861, 0.282)
    - reference nearest()  = null

  * input1.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.5 0.5
    - query point                   = (0.152, 0.609)
    - student   nearest()           = (0.152, 0.609)
    - reference nearest()           = (0.5, 0.5)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.132985
    - (0.152, 0.609) was not inserted into data structure

  * input5.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.099, 0.334)
    - student   nearest()           = (0.099, 0.334)
    - reference nearest()           = (0.2, 0.3)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.011357
    - (0.099, 0.334) was not inserted into data structure

  * input10.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.25, 0.514)
    - student   nearest()           = (0.25, 0.514)
    - reference nearest()           = (0.226, 0.577)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.004545
    - (0.25, 0.514) was not inserted into data structure

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  1.0 0.875
      B  0.5 0.75
      C  0.875 0.125
      D  0.625 0.0
      E  0.75 0.25
    - query point                   = (0.25, 1.0)
    - student   nearest()           = (0.25, 1.0)
    - reference nearest()           = (0.5, 0.75)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.125
    - (0.25, 1.0) was not inserted into data structure

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.375 0.625
      B  1.0 1.0
      C  0.4375 0.3125
      D  0.8125 0.125
      E  0.3125 0.4375
      F  0.0 0.75
      G  0.0625 0.25
      H  0.625 0.375
      I  0.5 0.5625
      J  0.25 0.0625
    - query point                   = (0.5625, 0.5)
    - student   nearest()           = (0.5625, 0.5)
    - reference nearest()           = (0.5, 0.5625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0078125
    - (0.5625, 0.5) was not inserted into data structure

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.09375 0.40625
      B  0.9375 0.4375
      C  0.15625 0.59375
      D  0.25 0.15625
      E  0.1875 0.6875
      F  0.40625 0.875
      G  0.03125 0.1875
      H  0.84375 0.28125
      I  0.75 0.09375
      J  0.5 0.34375
      K  0.625 0.8125
      L  0.375 0.25
      M  0.4375 1.0
      N  0.59375 0.84375
      O  0.21875 0.125
      P  0.65625 0.3125
      Q  0.71875 0.90625
      R  0.0 0.65625
      S  0.8125 0.9375
      T  0.46875 0.46875
    - query point                   = (0.34375, 0.625)
    - student   nearest()           = (0.34375, 0.625)
    - reference nearest()           = (0.1875, 0.6875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0283203125
    - (0.34375, 0.625) was not inserted into data structure

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query point                   = (0.9375, 0.234375)
    - student   nearest()           = (0.9375, 0.234375)
    - reference nearest()           = (0.890625, 0.359375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.017822265625
    - (0.9375, 0.234375) was not inserted into data structure

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.98590087890625, 0.9539337158203125)
    - student   nearest()           = (0.98590087890625, 0.9539337158203125)
    - reference nearest()           = (0.979034423828125, 0.9529266357421875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000048162415624
    - (0.98590087890625, 0.9539337158203125) was not inserted into data structure

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  1.0 1.0
      B  0.5 0.25
      C  0.0 1.0
      D  0.25 0.5
      E  0.25 0.0
      F  0.75 1.0
      G  0.5 0.5
      H  0.75 0.75
      I  1.0 0.75
      J  1.0 0.5
    - query point                   = (0.75, 0.5)
    - student   nearest()           = (0.75, 0.5)
    - reference nearest()           = (0.75, 0.75)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0625
    - (0.75, 0.5) was not inserted into data structure

  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.0 0.125
      B  0.625 0.75
      C  0.5 0.875
      D  0.375 0.625
      E  0.625 0.375
      F  0.375 0.375
      G  0.25 0.5
      H  0.0 0.875
      I  0.75 0.5
      J  0.125 0.375
      K  0.375 0.125
      L  0.375 0.25
      M  0.625 0.125
      N  0.0 0.0
      O  0.75 0.625
    - query point                   = (0.375, 0.5)
    - student   nearest()           = (0.375, 0.5)
    - reference nearest()           = (0.375, 0.625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.015625
    - (0.375, 0.5) was not inserted into data structure

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.0625 0.3125
      B  0.75 0.3125
      C  0.4375 0.4375
      D  0.5 0.125
      E  0.375 0.625
      F  0.4375 0.5
      G  0.375 0.9375
      H  0.125 0.8125
      I  0.9375 0.625
      J  0.375 0.5625
      K  0.375 1.0
      L  0.1875 0.0625
      M  0.5 0.25
      N  1.0 0.25
      O  0.875 0.5
      P  0.0 0.4375
      Q  0.75 0.6875
      R  0.75 0.1875
      S  0.25 0.9375
      T  0.0625 0.125
    - query point                   = (0.5, 0.9375)
    - student   nearest()           = (0.5, 0.9375)
    - reference nearest()           = (0.375, 0.9375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.015625
    - (0.5, 0.9375) was not inserted into data structure

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point                   = (0.25, 0.75)
    - student   nearest()           = (0.25, 0.75)
    - reference nearest()           = (0.28125, 0.71875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.001953125
    - (0.25, 0.75) was not inserted into data structure

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.0887451171875, 0.0717620849609375)
    - student   nearest()           = (0.0887451171875, 0.0717620849609375)
    - reference nearest()           = (0.092437744140625, 0.07110595703125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000014065997675
    - (0.0887451171875, 0.0717620849609375) was not inserted into data structure

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
    - failed on trial 2 of 10000
    - query point                   = (0.1171875, 0.3203125)
    - student   nearest()           = (0.1171875, 0.3203125)
    - reference nearest()           = (0.1171875, 0.3125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00006103515625
    - (0.1171875, 0.3203125) was not inserted into data structure

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point                   = (0.3564453125, 0.8740234375)
    - student   nearest()           = (0.3564453125, 0.8740234375)
    - reference nearest()           = (0.361328125, 0.8779296875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000039100646973
    - (0.3564453125, 0.8740234375) was not inserted into data structure

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.09, 0.94)
    - student   nearest()           = (0.09, 0.94)
    - reference nearest()           = (0.4, 0.7)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.1537
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B D 

  * input10.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.23, 0.28)
    - student   nearest()           = (0.23, 0.28)
    - reference nearest()           = (0.144, 0.179)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.017597
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A C D E 

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.25 0.75
      B  0.875 0.0
      C  0.75 1.0
      D  1.0 0.875
      E  0.125 0.25
    - query point                   = (0.0, 0.125)
    - student   nearest()           = (0.0, 0.125)
    - reference nearest()           = (0.125, 0.25)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.03125
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A E 

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.3125 0.9375
      B  0.4375 0.875
      C  0.75 0.8125
      D  0.25 0.375
      E  0.0 0.0625
      F  0.625 0.75
      G  0.9375 0.125
      H  0.6875 0.6875
      I  0.875 0.5625
      J  0.375 0.4375
    - query point                   = (0.8125, 0.25)
    - student   nearest()           = (0.8125, 0.25)
    - reference nearest()           = (0.9375, 0.125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.03125
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B C G I F H J 

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.46875 0.65625
      B  0.34375 0.1875
      C  0.0625 0.0
      D  0.75 0.8125
      E  0.3125 0.84375
      F  0.875 0.21875
      G  0.53125 0.28125
      H  0.65625 0.0625
      I  0.1875 0.375
      J  0.84375 1.0
      K  0.8125 0.71875
      L  0.21875 0.09375
      M  0.78125 0.625
      N  0.9375 0.15625
      O  0.59375 0.5
      P  0.96875 0.3125
      Q  0.375 0.34375
      R  0.5625 0.59375
      S  0.40625 0.5625
      T  0.71875 0.40625
    - query point                   = (0.6875, 0.46875)
    - student   nearest()           = (0.6875, 0.46875)
    - reference nearest()           = (0.71875, 0.40625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0048828125
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      empty
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A D F G K M O T 

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 9

  * 50 random non-degenerate points in a 128-by-128 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 11

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 32

==> FAILED

Test 7: insert n random points; check that repeated calls to get(),
         range(), and nearest() with the same argument yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed

Test 8a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.insert(0.0, 1.0)
           st.isEmpty()  ==>  true

  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 9 of 20000
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.size()  ==>  0
           st.size()  ==>  0
           st.size()  ==>  0
           st.insert(0.875, 0.25)
           st.range([0.5625, 0.625] x [0.125, 0.4375])  ==>  empty
           st.insert(0.125, 0.8125)
           st.insert(0.0, 1.0)
           st.isEmpty()  ==>  true

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.390625, 0.6796875)
           st.contains((0.4296875, 0.265625))  ==>  true

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of operations was:
           st.insert(0.431640625, 0.744140625)
           st.isEmpty()  ==>  true

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   size() = 0
    - reference size() = 1
    - sequence of operations was:
           st.insert(0.2435302734375, 0.3848876953125)
           st.size()  ==>  0

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   nearest()  = (0.6804962158203125, 0.0375213623046875)
    - reference nearest()  = (0.139923095703125, 0.5025634765625)
    - (0.6804962158203125, 0.0375213623046875) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.508483466226608
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.139923095703125, 0.5025634765625)
           st.range([0.4510498046875, 0.9626312255859375] x [0.025665283203125, 0.148040771484375])  ==>  empty
           st.range([0.165863037109375, 0.7661590576171875] x [0.011688232421875, 0.55712890625])  ==>  empty
           st.nearest((0.6804962158203125, 0.0375213623046875))   ==>  (0.6804962158203125, 0.0375213623046875)

==> FAILED

Test 8b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - student   isEmpty() = true
    - reference isEmpty() = false
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.isEmpty()  ==>  true
           st.insert(1.0, 1.0)
           st.isEmpty()  ==>  true

  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = (0.0625, 0.0)
    - reference nearest()  = (0.3125, 0.5625)
    - (0.0625, 0.0) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.37890625
    - sequence of operations was:
           st.insert(0.3125, 0.5625)
           st.nearest((0.0625, 0.0))   ==>  (0.0625, 0.0)

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.65625, 0.46875)
           st.contains((0.34375, 0.9375))  ==>  true

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   size() = 0
    - reference size() = 2
    - sequence of operations was:
           st.insert(0.05859375, 0.505859375)
           st.insert(0.9560546875, 0.6669921875)
           st.size()  ==>  0

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = (0.943603515625, 0.228271484375)
    - reference nearest()  = (0.8436279296875, 0.0279541015625)
    - (0.943603515625, 0.228271484375) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.050122171640396
    - sequence of operations was:
           st.insert(0.8436279296875, 0.0279541015625)
           st.nearest((0.943603515625, 0.228271484375))   ==>  (0.943603515625, 0.228271484375)

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - rectangle = [0.323516845703125, 0.43646240234375] x [0.131866455078125, 0.377777099609375]
    - student   range():  empty
    - reference range():  S 
    - sequence of operations was:
           st.insert(0.9101715087890625, 0.42645263671875)
           st.insert(0.3830413818359375, 0.20880126953125)
           st.insert(0.763092041015625, 0.7130279541015625)
           st.range([0.323516845703125, 0.43646240234375] x [0.131866455078125, 0.377777099609375])  ==>  empty

==> FAILED

Test 8c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   size() = 0
    - reference size() = 1
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.0, 0.0)
           st.size()  ==>  0

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   size() = 0
    - reference size() = 1
    - sequence of operations was:
           st.insert(0.0625, 0.0)
           st.size()  ==>  0

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.7578125, 0.0078125)
           st.insert(0.5390625, 0.328125)
           st.contains((0.4140625, 0.1796875))  ==>  true

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.4013671875, 0.5830078125)
           st.insert(0.966796875, 0.5029296875)
           st.insert(0.765625, 0.55859375)
           st.contains((0.251953125, 0.3740234375))  ==>  true

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - student   size() = 0
    - reference size() = 3
    - sequence of operations was:
           st.insert(0.392578125, 0.601806640625)
           st.insert(0.033935546875, 0.4228515625)
           st.insert(0.010498046875, 0.3310546875)
           st.size()  ==>  0

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.78668212890625, 0.0909576416015625)
           st.range([0.449951171875, 0.757049560546875] x [0.2077178955078125, 0.925201416015625])  ==>  empty
           st.range([0.47589111328125, 0.6472320556640625] x [0.02679443359375, 0.31695556640625])  ==>  empty
           st.contains((0.5478515625, 0.488555908203125))  ==>  true

==> FAILED

Test 9: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with probabilities
        (p1=0, p2, p3, p4, p5, p6), respectively
        (data structure with 0 points)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.5, 0.5, 0.0, 0.0, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.