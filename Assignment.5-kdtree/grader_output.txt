See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (3 warnings)
PMD:          FAILED (2 warnings)
Checkstyle:   FAILED (0 errors, 6 warnings)

Correctness:  23/35 tests passed
Memory:       16/16 tests passed
Timing:       34/42 tests passed

Aggregate score: 75.62%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
7.9K Nov 11 20:10 KdTree.java
2.6K Nov 11 20:10 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M B CO_COMPARETO_INCORRECT_FLOATING Co: The method 'compareTo()' incorrectly handles values of type 'double' when they are -0.0 or NaN. To handle these corner cases, use 'Double.compare()' or 'Float.compare()'.  At KdTree.java:[line 39]
M B CO_COMPARETO_INCORRECT_FLOATING Co: The method 'compareTo()' incorrectly handles values of type 'double' when they are -0.0 or NaN. To handle these corner cases, use 'Double.compare()' or 'Float.compare()'.  At KdTree.java:[line 44]
M D CFS_CONFUSING_FUNCTION_SEMANTICS CFS: Method KdTree.insert(KdTree$KdTreeNode, Point2D, boolean) returns modified parameter  At KdTree.java:[line 96]
Warnings generated: 3


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:24: The private instance (or static) variable 'isXAxis' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:25: The private instance (or static) variable 'point' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 2 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:17:1: Unnecessary import statement for 'java.lang.Double' because it is from the package 'java.lang'. [RedundantImport]
[WARN] KdTree.java:17:8: Unused import statement for 'java.lang.Double'. [UnusedImports]
[WARN] KdTree.java:26:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
[WARN] KdTree.java:27:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
[WARN] KdTree.java:77:51: ',' is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 0 errors and 5 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:23:30: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: inserting n random points and check size() after each insertion
        (size may be less than n because of duplicates)
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 2: check isEmpty() for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==> passed

Test 3: insert n random points and check contains() for n random query points
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 4: insert n random points and check nearest() for n random query points
  * 1000 random points in a 65536-by-65536 grid
  * 1000 random points in a 8192-by-8192 grid
  * 1000 random points in a 1024-by-1024 grid
  * 1000 random points in a 128-by-128 grid
  * 1000 random points in a 16-by-16 grid
==> passed

Test 5: insert n random points and check range() for n random query rectangles
  * 1000 random rectangles and points in a 65536-by-65536 grid
  * 1000 random rectangles and points in a 8192-by-8192 grid
  * 1000 random rectangles and points in a 1024-by-1024 grid
  * 1000 random rectangles and points in a 128-by-128 grid
  * 1000 random rectangles and points in a 16-by-16 grid
==> passed

Test 6: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - failed on trial 2 of 10000
    - student   nearest()    = (1.0, 1.0)
    - reference nearest()    = (0.0, 0.0)
    - (1.0, 1.0) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 2

==> FAILED

Test 7: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==> passed

Test 8: check whether two PointSET objects can be created at the same time
==> passed


Total: 7/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
    - failed on trial 1 of 10000
    - student   nearest()  = (0.203, 0.2)
    - reference nearest()  = null

  * input1.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.5 0.5
    - query point                   = (0.037, 0.035)
    - student   nearest()           = (0.037, 0.035)
    - reference nearest()           = (0.5, 0.5)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.430594
    - (0.037, 0.035) was not inserted into data structure

  * input5.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.091, 0.465)
    - student   nearest()           = (0.091, 0.465)
    - reference nearest()           = (0.2, 0.3)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.039106
    - (0.091, 0.465) was not inserted into data structure

  * input10.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.289, 0.398)
    - student   nearest()           = (0.289, 0.398)
    - reference nearest()           = (0.372, 0.497)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.01669
    - (0.289, 0.398) was not inserted into data structure

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  1.0 0.75
      B  0.25 0.375
      C  0.75 0.5
      D  0.125 0.875
      E  0.625 0.25
    - query point                   = (0.5, 0.125)
    - student   nearest()           = (0.5, 0.125)
    - reference nearest()           = (0.625, 0.25)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.03125
    - (0.5, 0.125) was not inserted into data structure

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.0625 1.0
      B  0.25 0.0625
      C  0.875 0.625
      D  0.5625 0.9375
      E  0.125 0.5
      F  0.3125 0.375
      G  0.75 0.0
      H  0.8125 0.75
      I  0.0 0.3125
      J  0.9375 0.25
    - query point                   = (0.6875, 0.1875)
    - student   nearest()           = (0.6875, 0.1875)
    - reference nearest()           = (0.75, 0.0)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0390625
    - (0.6875, 0.1875) was not inserted into data structure

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.28125 0.875
      B  0.90625 0.28125
      C  0.375 0.71875
      D  0.1875 0.59375
      E  0.15625 0.625
      F  0.625 0.03125
      G  0.59375 0.5
      H  1.0 0.125
      I  0.125 0.53125
      J  0.9375 0.78125
      K  0.5625 0.25
      L  0.46875 0.1875
      M  0.75 0.90625
      N  0.53125 0.0625
      O  0.21875 0.21875
      P  0.3125 0.0
      Q  0.0 0.40625
      R  0.4375 0.15625
      S  0.8125 0.4375
      T  0.65625 0.96875
    - query point                   = (0.03125, 0.8125)
    - student   nearest()           = (0.03125, 0.8125)
    - reference nearest()           = (0.15625, 0.625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.05078125
    - (0.03125, 0.8125) was not inserted into data structure

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query point                   = (0.40625, 0.421875)
    - student   nearest()           = (0.40625, 0.421875)
    - reference nearest()           = (0.5, 0.515625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.017578125
    - (0.40625, 0.421875) was not inserted into data structure

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.447235107421875, 0.4657745361328125)
    - student   nearest()           = (0.447235107421875, 0.4657745361328125)
    - reference nearest()           = (0.448455810546875, 0.46795654296875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000006251269951
    - (0.447235107421875, 0.4657745361328125) was not inserted into data structure

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.75 0.25
      B  0.75 0.0
      C  0.5 0.0
      D  1.0 0.5
      E  0.25 0.0
      F  1.0 0.25
      G  0.75 0.5
      H  0.0 0.5
      I  0.25 0.5
      J  0.75 1.0
    - query point                   = (0.0, 1.0)
    - student   nearest()           = (0.0, 1.0)
    - reference nearest()           = (0.0, 0.5)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.25
    - (0.0, 1.0) was not inserted into data structure

  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.5 0.875
      B  0.625 0.875
      C  0.0 0.0
      D  0.5 1.0
      E  0.375 0.375
      F  0.375 0.25
      G  0.625 0.75
      H  0.625 0.5
      I  0.5 0.0
      J  0.75 0.0
      K  0.625 1.0
      L  0.625 0.25
      M  0.375 0.0
      N  0.625 0.375
      O  0.875 0.5
    - query point                   = (0.0, 0.375)
    - student   nearest()           = (0.0, 0.375)
    - reference nearest()           = (0.0, 0.0)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.140625
    - (0.0, 0.375) was not inserted into data structure

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.875 0.0
      B  0.1875 0.75
      C  0.5625 0.4375
      D  0.75 0.875
      E  0.5 0.75
      F  0.4375 0.0625
      G  0.6875 0.8125
      H  0.9375 0.8125
      I  1.0 0.25
      J  0.25 1.0
      K  0.0625 0.875
      L  0.6875 0.25
      M  0.0625 0.1875
      N  0.0625 0.0625
      O  0.6875 0.5
      P  0.1875 0.8125
      Q  0.625 0.6875
      R  0.8125 0.75
      S  0.625 0.0625
      T  0.6875 0.625
    - query point                   = (0.5, 0.5625)
    - student   nearest()           = (0.5, 0.5625)
    - reference nearest()           = (0.5625, 0.4375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.01953125
    - (0.5, 0.5625) was not inserted into data structure

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point                   = (0.90625, 0.65625)
    - student   nearest()           = (0.90625, 0.65625)
    - reference nearest()           = (0.875, 0.65625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0009765625
    - (0.90625, 0.65625) was not inserted into data structure

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.919586181640625, 0.627838134765625)
    - student   nearest()           = (0.919586181640625, 0.627838134765625)
    - reference nearest()           = (0.9171295166015625, 0.6209716796875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000053183408454
    - (0.919586181640625, 0.627838134765625) was not inserted into data structure

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point                   = (0.703125, 0.40625)
    - student   nearest()           = (0.703125, 0.40625)
    - reference nearest()           = (0.703125, 0.4140625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00006103515625
    - (0.703125, 0.40625) was not inserted into data structure

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point                   = (0.958984375, 0.939453125)
    - student   nearest()           = (0.958984375, 0.939453125)
    - reference nearest()           = (0.9560546875, 0.935546875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00002384185791
    - (0.958984375, 0.939453125) was not inserted into data structure

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.18, 0.56)
    - reference nearest() = (0.4, 0.7)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.068
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.18, 0.56)
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D C 
    - failed on trial 1 of 1000

  * input10.txt
    - student   nearest() = (0.84, 0.8)
    - reference nearest() = (0.862, 0.825)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.001109
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.84, 0.8)
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B H I 
    - failed on trial 1 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (0.75, 0.0)
    - reference nearest() = (0.5, 0.25)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.125
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.75, 0.0)
    - sequence of points inserted: 
      A  0.0 0.625
      B  0.5 0.25
      C  0.25 0.875
      D  0.125 1.0
      E  0.875 0.375
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C E 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.375, 0.875)
    - reference nearest() = (0.5, 0.8125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.01953125
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.375, 0.875)
    - sequence of points inserted: 
      A  0.875 0.9375
      B  0.75 0.4375
      C  0.5 0.8125
      D  1.0 0.3125
      E  0.625 0.1875
      F  0.5625 0.125
      G  0.9375 1.0
      H  0.6875 0.25
      I  0.4375 0.375
      J  0.125 0.0625
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.125, 0.375)
    - reference nearest() = (0.3125, 0.25)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.05078125
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.125, 0.375)
    - sequence of points inserted: 
      A  0.0625 0.15625
      B  0.34375 0.125
      C  0.71875 0.59375
      D  0.40625 0.34375
      E  0.46875 0.0625
      F  0.25 0.09375
      G  0.625 0.84375
      H  0.15625 0.96875
      I  0.3125 0.25
      J  0.28125 0.5625
      K  0.03125 0.6875
      L  0.375 0.21875
      M  0.78125 0.53125
      N  0.84375 0.28125
      O  0.21875 0.75
      P  0.875 0.3125
      Q  0.53125 0.0
      R  0.9375 0.625
      S  0.5 1.0
      T  0.5625 0.5
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D G H J O T I L K 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.078125, 0.984375)
    - reference nearest() = (0.125, 0.890625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.010986328125
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 12
    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.703125, 0.4609375)
    - reference nearest() = (0.65625, 0.515625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00518798828125
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 14
    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.47705078125, 0.99169921875)
    - reference nearest() = (0.46728515625, 0.9853515625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000135660171509
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 17
    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
  * nearest()
    - failed on trial 1 of 10
    - student   nearest()  = (0.75, 0.6875)
    - reference nearest()  = null

  * range()
==> FAILED

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
    - fails to throw an exception when calling add() with a null argument

  * argument to contains() is null
    - throws wrong exception when calling contains() with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

  * argument to range() is null
    - throws wrong exception when calling range() with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

  * argument to nearest() is null
    - fails to throw an exception when calling nearest() with a null argument

==> FAILED

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 9 of 20000
    - student   nearest()  = (0.125, 0.4375)
    - reference nearest()  = (0.0, 0.75)
    - (0.125, 0.4375) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.11328125
    - sequence of operations was:
           st.insert(0.25, 0.0)
           st.contains((0.625, 0.75))  ==>  false
           st.isEmpty()  ==>  false
           st.range([0.0625, 0.625] x [0.1875, 0.75])  ==>  empty
           st.insert(0.5, 0.25)
           st.insert(0.0, 0.75)
           st.insert(0.375, 0.0625)
           st.range([0.5625, 0.8125] x [0.8125, 0.9375])  ==>  empty
           st.nearest((0.125, 0.4375))   ==>  (0.125, 0.4375)

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 11 of 20000
    - student   nearest()  = (0.453125, 0.9296875)
    - reference nearest()  = (0.65625, 0.6640625)
    - (0.453125, 0.9296875) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.11181640625
    - sequence of operations was:
           st.insert(0.65625, 0.6640625)
           st.isEmpty()  ==>  false
           st.range([0.453125, 0.890625] x [0.0625, 0.53125])  ==>  empty
           st.insert(0.015625, 0.84375)
           st.range([0.5390625, 0.6328125] x [0.140625, 0.3515625])  ==>  empty
           st.range([0.671875, 0.9765625] x [0.4921875, 0.921875])  ==>  empty
           st.range([0.390625, 0.578125] x [0.0859375, 0.4765625])  ==>  empty
           st.range([0.578125, 0.84375] x [0.296875, 0.4765625])  ==>  empty
           st.insert(0.96875, 0.3203125)
           st.insert(0.546875, 0.1640625)
           st.nearest((0.453125, 0.9296875))   ==>  (0.453125, 0.9296875)

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = (0.5869140625, 0.8984375)
    - reference nearest()  = (0.1552734375, 0.3359375)
    - (0.5869140625, 0.8984375) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.502719879150391
    - sequence of operations was:
           st.insert(0.1552734375, 0.3359375)
           st.nearest((0.5869140625, 0.8984375))   ==>  (0.5869140625, 0.8984375)

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 6 of 20000
    - student   nearest()  = (0.638427734375, 0.1865234375)
    - reference nearest()  = (0.4764404296875, 0.1099853515625)
    - (0.638427734375, 0.1865234375) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.032097965478897
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.4764404296875, 0.1099853515625)
           st.contains((0.1590576171875, 0.3170166015625))  ==>  false
           st.contains((0.7132568359375, 0.865966796875))  ==>  false
           st.size()  ==>  1
           st.nearest((0.638427734375, 0.1865234375))   ==>  (0.638427734375, 0.1865234375)

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   nearest()  = (0.17974853515625, 0.024200439453125)
    - reference nearest()  = (0.27740478515625, 0.789764404296875)
    - (0.17974853515625, 0.024200439453125) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.595624927431345
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.27740478515625, 0.789764404296875)
           st.size()  ==>  1
           st.range([0.44781494140625, 0.7522735595703125] x [0.469085693359375, 0.5699310302734375])  ==>  empty
           st.nearest((0.17974853515625, 0.024200439453125))   ==>  (0.17974853515625, 0.024200439453125)

==> FAILED

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   nearest()  = (0.0, 0.0)
    - reference nearest()  = (1.0, 0.0)
    - (0.0, 0.0) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 1
    - sequence of operations was:
           st.insert(1.0, 0.0)
           st.insert(1.0, 1.0)
           st.contains((0.0, 1.0))  ==>  false
           st.contains((0.0, 0.0))  ==>  false
           st.nearest((0.0, 0.0))   ==>  (0.0, 0.0)

  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   nearest()  = (0.125, 0.5)
    - reference nearest()  = (0.1875, 0.5)
    - (0.125, 0.5) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00390625
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.insert(0.1875, 0.5)
           st.range([0.5625, 0.625] x [0.375, 0.9375])  ==>  empty
           st.contains((0.3125, 0.1875))  ==>  false
           st.nearest((0.125, 0.5))   ==>  (0.125, 0.5)

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 7 of 20000
    - student   nearest()  = (0.3828125, 0.1640625)
    - reference nearest()  = (0.046875, 0.1875)
    - (0.3828125, 0.1640625) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.1134033203125
    - sequence of operations was:
           st.insert(0.046875, 0.1875)
           st.range([0.7421875, 0.921875] x [0.7265625, 0.7734375])  ==>  empty
           st.range([0.5078125, 0.7578125] x [0.453125, 0.71875])  ==>  empty
           st.isEmpty()  ==>  false
           st.contains((0.34375, 0.3359375))  ==>  false
           st.range([0.234375, 0.4375] x [0.484375, 0.5546875])  ==>  empty
           st.nearest((0.3828125, 0.1640625))   ==>  (0.3828125, 0.1640625)

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (0.5078125, 0.9345703125)
    - reference nearest()  = (0.88671875, 0.048828125)
    - (0.5078125, 0.9345703125) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.928109169006348
    - sequence of operations was:
           st.insert(0.88671875, 0.048828125)
           st.range([0.2841796875, 0.41796875] x [0.0029296875, 0.212890625])  ==>  empty
           st.nearest((0.5078125, 0.9345703125))   ==>  (0.5078125, 0.9345703125)

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   nearest()  = (0.744140625, 0.3782958984375)
    - reference nearest()  = (0.37841796875, 0.500732421875)
    - (0.744140625, 0.3782958984375) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.148743763566017
    - sequence of operations was:
           st.insert(0.37841796875, 0.500732421875)
           st.insert(0.0858154296875, 0.8375244140625)
           st.contains((0.7686767578125, 0.0946044921875))  ==>  false
           st.contains((0.5616455078125, 0.814453125))  ==>  false
           st.nearest((0.744140625, 0.3782958984375))   ==>  (0.744140625, 0.3782958984375)

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (0.39593505859375, 0.9846038818359375)
    - reference nearest()  = (0.0676422119140625, 0.5771026611328125)
    - (0.39593505859375, 0.9846038818359375) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.27383343805559
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.0676422119140625, 0.5771026611328125)
           st.nearest((0.39593505859375, 0.9846038818359375))   ==>  (0.39593505859375, 0.9846038818359375)

==> FAILED

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - student   nearest()  = (1.0, 0.0)
    - reference nearest()  = (0.0, 1.0)
    - (1.0, 0.0) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 2
    - sequence of operations was:
           st.insert(0.0, 1.0)
           st.range([1.0, 1.0] x [0.0, 0.0])  ==>  empty
           st.contains((1.0, 0.0))  ==>  false
           st.nearest((1.0, 0.0))   ==>  (1.0, 0.0)

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (0.875, 0.0625)
    - reference nearest()  = (0.375, 0.375)
    - (0.875, 0.0625) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.34765625
    - sequence of operations was:
           st.insert(0.375, 0.375)
           st.insert(0.5, 0.875)
           st.nearest((0.875, 0.0625))   ==>  (0.875, 0.0625)

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - student   nearest()  = (0.3671875, 0.0234375)
    - reference nearest()  = (0.4921875, 0.0234375)
    - (0.3671875, 0.0234375) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.015625
    - sequence of operations was:
           st.insert(0.8125, 0.921875)
           st.insert(0.4921875, 0.0234375)
           st.contains((0.28125, 0.46875))  ==>  false
           st.nearest((0.3671875, 0.0234375))   ==>  (0.3671875, 0.0234375)

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 25 of 20000
    - student   nearest()  = (0.2548828125, 0.216796875)
    - reference nearest()  = (0.1630859375, 0.31640625)
    - (0.2548828125, 0.216796875) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.018348693847656
    - sequence of operations was:
           st.insert(0.5654296875, 0.4765625)
           st.range([0.271484375, 0.7705078125] x [0.6826171875, 0.7978515625])  ==>  empty
           st.insert(0.869140625, 0.8818359375)
           st.range([0.0712890625, 0.88671875] x [0.126953125, 0.8720703125])  ==>  T 
           st.range([0.7626953125, 0.916015625] x [0.6337890625, 0.75390625])  ==>  empty
           st.size()  ==>  2
           st.insert(0.892578125, 0.46875)
           st.insert(0.87890625, 0.837890625)
           st.contains((0.1103515625, 0.125))  ==>  false
           st.range([0.3798828125, 0.9072265625] x [0.3525390625, 0.87890625])  ==>  T G N 
           st.contains((0.0576171875, 0.1552734375))  ==>  false
           st.isEmpty()  ==>  false
           st.range([0.228515625, 0.447265625] x [0.3828125, 0.7822265625])  ==>  empty
           st.insert(0.1630859375, 0.31640625)
           st.contains((0.78515625, 0.5458984375))  ==>  false
           st.insert(0.091796875, 0.6298828125)
           st.insert(0.0517578125, 0.349609375)
           st.contains((0.546875, 0.7783203125))  ==>  false
           st.range([0.0986328125, 0.4716796875] x [0.451171875, 0.4755859375])  ==>  empty
           st.isEmpty()  ==>  false
           st.contains((0.35546875, 0.36328125))  ==>  false
           st.contains((0.0146484375, 0.4140625))  ==>  false
           st.range([0.099609375, 0.1318359375] x [0.3203125, 0.5888671875])  ==>  empty
           st.insert(0.7060546875, 0.4375)
           st.nearest((0.2548828125, 0.216796875))   ==>  (0.2548828125, 0.216796875)

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 6 of 20000
    - student   nearest()  = (0.0648193359375, 0.5616455078125)
    - reference nearest()  = (0.106689453125, 0.80712890625)
    - (0.0648193359375, 0.5616455078125) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.062015205621719
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.106689453125, 0.80712890625)
           st.size()  ==>  1
           st.range([0.042724609375, 0.79833984375] x [0.455810546875, 0.8436279296875])  ==>  E 
           st.range([0.376708984375, 0.391845703125] x [0.1656494140625, 0.6029052734375])  ==>  empty
           st.nearest((0.0648193359375, 0.5616455078125))   ==>  (0.0648193359375, 0.5616455078125)

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 6 of 20000
    - student   nearest()  = (0.9107666015625, 0.0079803466796875)
    - reference nearest()  = (0.7657470703125, 0.5461578369140625)
    - (0.9107666015625, 0.0079803466796875) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.310665675438941
    - sequence of operations was:
           st.insert(0.9087066650390625, 0.6452484130859375)
           st.insert(0.354888916015625, 0.6202392578125)
           st.insert(0.6776275634765625, 0.7192840576171875)
           st.insert(0.7657470703125, 0.5461578369140625)
           st.insert(0.0395660400390625, 0.3315582275390625)
           st.nearest((0.9107666015625, 0.0079803466796875))   ==>  (0.9107666015625, 0.0079803466796875)

==> FAILED

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 16/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          272                264
=> passed        2          368                360
=> passed        5          656                648
=> passed       10         1136               1128
=> passed       25         2576               2568
=> passed      100         9776               9768
=> passed      400        38576              38568
=> passed      800        76976              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 176.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)
================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          120                160
=> passed        2          208                288
=> passed        5          472                672
=> passed       10          912               1312
=> passed       25         2232               3232
=> passed      100         8832              12832
=> passed      400        35232              51232
=> passed      800        70432             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 88.00 n + 32.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)
================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1198125         
=> passed   320000    1251520         
=> passed   640000     990004         
=> passed  1280000     915500         
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     358522         
=> passed   320000     347783         
=> passed   640000     290234         
=> passed  1280000     339331         
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       3902         
=> passed    20000       1863         
=> passed    40000        757         
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4471         
=> passed    20000       2082         
=> passed    40000        828         
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000     973069               0.0              65.4              64.4               0.0         
=> passed   320000     990901               0.0              66.6              65.6               0.0         
=> passed   640000     780470               0.0              71.1              70.1               0.0         
=> passed  1280000     606737               0.0              77.4              76.4               0.0         
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000     359253              36.0              36.0               0.0         
=> passed    20000     353644              38.3              38.3               0.0         
=> passed    40000     358460              42.6              42.6               0.0         
=> passed    80000     350633              43.0              43.0               0.0         
=> passed   160000     342633              45.5              45.5               0.0         
=> passed   320000     317521              49.1              49.1               0.0         
=> passed   640000     278851              50.4              50.4               0.0         
=> passed  1280000     312099              53.4              53.4               0.0         
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     198462               0.0              31.1              88.5              50.2         
=> passed    20000     206825               0.0              32.6              94.8              54.9         
=> passed    40000     117672               0.0              39.3             110.9              61.7         
=> passed    80000     135876               0.0              40.7             114.6              64.1         
=> passed   160000     170911               0.0              42.5             124.4              70.2         
=> passed   320000     151098               0.0              40.2             114.3              63.4         
=> passed   640000     151859               0.0              43.3             124.3              69.7         
=> passed  1280000     129821               0.0              47.0             130.7              71.2         
==> 8/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> FAILED    10000   443246                   0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED    20000   469387                   0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED    40000   470097                   0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED    80000   459102                   0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED   160000   455232                   0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED   320000   439900                   0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED   640000   456101                   0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED  1280000   468399                   0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
==> 0/8 tests passed



Total: 20/28 tests passed!


================================================================



