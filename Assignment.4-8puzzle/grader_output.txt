See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 2 warnings)
API:          PASSED

Spotbugs:     FAILED (3 warnings)
PMD:          FAILED (7 warnings)
Checkstyle:   FAILED (0 errors, 9 warnings)

Correctness:  9/49 tests passed
Memory:       22/22 tests passed
Timing:       25/125 tests passed

Aggregate score: 30.02%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.7K Aug 20 00:45 Board.java
2.1K Aug 20 00:45 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------
Solver.java:18: warning: [rawtypes] found raw type: MinPQ
    private final MinPQ<SearchNode> minPQ = new MinPQ();
                                                ^
  missing type arguments for generic class MinPQ<Key>
  where Key is a type-variable:
    Key extends Object declared in class MinPQ
Solver.java:18: warning: [unchecked] unchecked conversion
    private final MinPQ<SearchNode> minPQ = new MinPQ();
                                            ^
  required: MinPQ<SearchNode>
  found:    MinPQ
2 warnings


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
H C EQ_ALWAYS_TRUE Eq: The 'equals()' method always returns true.  At Board.java:[line 107]
L P URF_UNREAD_FIELD UrF: The instance (or static) variable 'previous' is never read. Consider removing it from the class.  At Solver.java:[line 55]
L P URF_UNREAD_FIELD UrF: The instance (or static) variable 'current' is never read. Consider removing it from the class.  At Solver.java:[line 56]
Warnings generated: 3


================================================================


% pmd .
*-----------------------------------------------------------
Board.java:19: The private instance (or static) variable 'hammingScore' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:20: The private instance (or static) variable 'manhattanScore' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:17: The private instance (or static) variable 'distance' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:50: Avoid unused private instance (or static) variables, such as 'previous'. [UnusedPrivateField]
Solver.java:50: Can you replace the instance (or static) variable 'previous' with a local variable? [SingularField]
Solver.java:51: Avoid unused private instance (or static) variables, such as 'current'. [UnusedPrivateField]
Solver.java:51: Can you replace the instance (or static) variable 'current' with a local variable? [SingularField]
PMD ends with 7 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Solver.java:12:1: Your program defines 3 outer types, but there should be only 1. [OuterTypeNumber]
[WARN] Solver.java:24:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Solver.java:30:9: Conditional logic can be removed. [SimplifyBooleanReturn]
[WARN] Solver.java:48: The .java file must have exactly one top-level class. [OneTopLevelClass]
[WARN] Solver.java:60:5: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Solver.java:65: The .java file must have exactly one top-level class. [OneTopLevelClass]
Checkstyle ends with 0 errors and 6 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:12: You should use 'isGoal()' to check whether a board is the goal board. [MethodCallCount]
[WARN] Solver.java:12: You will need to call the 'equals()' method in Board in order to implement the critical optimization; do not use the '==' operator to compare Board objects. [Performance]
[WARN] Solver.java:18:19: Can you make the variable of type 'MinPQ' a local variable instead of an instance (or static) variable? [Design]
Checkstyle ends with 0 errors and 3 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 24 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
    - student   hamming() = 5
    - reference hamming() = 4
        3
         0  1  3 
         4  2  5 
         7  8  6 


  * puzzle00.txt
  * puzzle07.txt
    - student   hamming() = 5
    - reference hamming() = 4
        3
         1  2  3 
         0  7  6 
         5  4  8 


  * puzzle17.txt
    - student   hamming() = 9
    - reference hamming() = 8
        3
         5  1  8 
         2  7  3 
         4  0  6 


  * puzzle27.txt
    - student   hamming() = 8
    - reference hamming() = 7
        3
         5  8  7 
         1  4  6 
         3  0  2 


  * puzzle2x2-unsolvable1.txt
    - student   hamming() = 3
    - reference hamming() = 2
        2
         1  0 
         2  3 


==> FAILED

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
    - student   hamming() = 4
    - reference hamming() = 3
        2
         3  0 
         2  1 


    - failed on trial 2 of 1000

  * 3-by-3
    - student   hamming() = 9
    - reference hamming() = 8
        3
         2  8  0 
         5  7  3 
         1  6  4 


    - failed on trial 1 of 1000

  * 4-by-4
    - student   hamming() = 14
    - reference hamming() = 13
        4
         5 10  0  4 
         6 13  3 11 
        15  2  7  1 
         9 14  8 12 


    - failed on trial 1 of 1000

  * 5-by-5
    - student   hamming() = 23
    - reference hamming() = 22
        5
         2  0  8 15 12 
        16 13  9 10  4 
         3 24 18 14  6 
        23 22 20 19  1 
        17  7 11  5 21 


    - failed on trial 1 of 1000

  * 9-by-9
    - student   hamming() = 81
    - reference hamming() = 80
        9
         6 26  1 24  3 66 46 14 21 
         8 15 78 57 25 64 73 60 67 
        51 19 37 77 35 12  4 61 29 
        11 76 34 45 30 28 32 23  2 
        47  0 49 69 38 31 41 54 55 
        18 40 63 48 20 50 75 74 62 
        80 65  5  9 71 17 39 58 59 
        79 43 68  7 53 10 44 42 27 
        70 56 72 52 36 16 22 33 13 


    - failed on trial 1 of 1000

  * 10-by-10
    - student   hamming() = 100
    - reference hamming() = 99
        10
         2 34  6 60 66 41 17 94 43 26 
        16 64  5 78 50 95 46  9 33 28 
        49 39 69 23 67 62 74 31 56 81 
        27 53 37 42 25 24 48 12 51 68 
        45 85 89 73 61 19 76 11 36  0 
        59 10 32 14 54 98 93 52 44 40 
        18 35 47 70 20 82  4 99  3 63 
        80  7 65 79 84 77 86 57  8 55 
        90 87 30 58 75 15 29 21 97 13 
        96 72 38 91 88 83 71 22 92  1 


    - failed on trial 1 of 1000

  * 127-by-127
    - student   hamming() = 16126
    - reference hamming() = 16125

    - failed on trial 1 of 10

==> FAILED

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
    - student   manhattan() = 8
    - reference manhattan() = 7
        3
         1  2  3 
         0  7  6 
         5  4  8 


  * puzzle17.txt
    - student   manhattan() = 16
    - reference manhattan() = 13
        3
         5  1  8 
         2  7  3 
         4  0  6 


  * puzzle27.txt
    - student   manhattan() = 18
    - reference manhattan() = 17
        3
         5  8  7 
         1  4  6 
         3  0  2 


  * puzzle2x2-unsolvable1.txt
    - student   manhattan() = 4
    - reference manhattan() = 3
        2
         1  0 
         2  3 


==> FAILED

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
    - student   manhattan() = 4
    - reference manhattan() = 3
        2
         3  1 
         0  2 


    - failed on trial 1 of 1000

  * 3-by-3
    - student   manhattan() = 10
    - reference manhattan() = 9
        3
         5  1  2 
         0  4  3 
         7  6  8 


    - failed on trial 1 of 1000

  * 4-by-4
    - student   manhattan() = 40
    - reference manhattan() = 37
        4
         4  2 14  7 
        12 10  3  9 
         8  1  5  6 
         0 11 13 15 


    - failed on trial 1 of 1000

  * 5-by-5
    - student   manhattan() = 70
    - reference manhattan() = 71
        5
        20 24  9  8  1 
         0  7 11  2 15 
        19  4 13  6 14 
        16 10  5 12 22 
        23 21  3 17 18 


    - failed on trial 1 of 1000

  * 9-by-9
    - student   manhattan() = 416
    - reference manhattan() = 417
        9
        12 11 24 37 45 39 34 27 23 
        28 66 15 54 43 71 20 16 19 
        59  0 63 80 70 48 51  7 53 
        74 72 67  4 25 44 26 17 18 
         2 69 77 55  6 33 41 56 73 
        76 49  3 58 21  9  5 22  8 
        13 75 30 14 36 79 62 29 65 
        31 38 47 32 60 42 40 50 35 
        64  1 52 57 10 61 46 78 68 


    - failed on trial 1 of 1000

  * 10-by-10
    - student   manhattan() = 666
    - reference manhattan() = 676
        10
         7 58 70 86 63 11 47 67 25  6 
        33 37 79 40 22 73 60 64 56 38 
        36 84 42 80 59 17 57 35 82 13 
        83 99  5 96 44 55  1 74 75 48 
        98 85  0 71 53 19  8 93 81 49 
         4 77 52 16 94 39 41 89 27 69 
        76 24 97 61  9 32 50 54 34 30 
        45 72 51 15 12 31 10 87 46 26 
        18 78 92 95 21 65 68 14 91 43 
        62 90 66 23 88 28 29 20  3  2 


    - failed on trial 1 of 1000

  * 127-by-127
    - student   manhattan() = 1355959
    - reference manhattan() = 1356029

    - failed on trial 1 of 10

==> FAILED

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        3
         0  1  3 
         4  2  5 
         7  8  6 


  * puzzle00.txt
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78 79 80 
        81 82 83 84 85 86 87 88 89 90 
        91 92 93 94 95 96 97 98 99  0 


  * puzzle06.txt
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        4
         0  1  2  3 
         5  6  7  4 
         9 10 11  8 
        13 14 15 12 


  * puzzle09.txt
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        4
         2  0  3  4 
         1 10  6  8 
         5  9  7 12 
        13 14 11 15 


  * puzzle23.txt
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        3
         5  0  4 
         2  3  8 
         7  1  6 


  * puzzle2x2-unsolvable1.txt
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        2
         1  0 
         2  3 


==> FAILED

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        2
         2  0 
         3  1 


    - failed on trial 1 of 1000

  * 3-by-3
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        3
         3  5  6 
         4  1  8 
         0  7  2 


    - failed on trial 1 of 1000

  * 4-by-4
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        4
         6 13  4  5 
         3 11 12 14 
         9  2 10  1 
        15  7  8  0 


    - failed on trial 1 of 1000

  * 5-by-5
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        5
        12 15 23  2 13 
         4  7 22 10 19 
         1  0 24 17  3 
         9 11  6 18 14 
         8 20 21  5 16 


    - failed on trial 1 of 1000

  * 9-by-9
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        9
        27 54 42 41  9 80 64  0 15 
        14 13 75 40 22 56 71 52  4 
        61 78 38 33 45 18 23 74 39 
        59 51 76  8  5 26 36 44 34 
        79 11 53 25 73 28  6 55 31 
        67 43 63  7 30 60 32 10 35 
         1 49 65 62 24 21 47 19 72 
        17 48 66  2 46 77  3 69 20 
        58 68 29 57 37 12 50 70 16 


    - failed on trial 1 of 100

  * 10-by-10
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        10
        65 81 44 26 88 43 53 46  0  6 
        23 25 19 73 67  9 59 35 99 58 
        29  4 86 33 60 51 63 76 94 92 
        95 16 28  5 96 15  8 45 37 75 
        78 71 24 79 91 48 69 12 97 32 
        41 49 72 74 21 87 57 68 31 14 
         7 42 11 38 22 82 30 89 52 70 
        13 85 66 93 64 20 17 62 50 83 
        39  2 55 54  1 77 10 84 27 90 
        40  3 80 98 36 18 61 47 56 34 


    - failed on trial 1 of 100

  * 127-by-127
    - toString() returns wrong value

    - failed on trial 1 of 10

==> FAILED

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        3
         0  1  3 
         4  2  5 
         7  8  6 


  * puzzle00.txt
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78 79 80 
        81 82 83 84 85 86 87 88 89 90 
        91 92 93 94 95 96 97 98 99  0 


  * puzzle06.txt
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        4
         0  1  2  3 
         5  6  7  4 
         9 10 11  8 
        13 14 15 12 


  * puzzle09.txt
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 3
    - board
        4
         2  0  3  4 
         1 10  6  8 
         5  9  7 12 
        13 14 11 15 


  * puzzle23.txt
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 3
    - board
        3
         5  0  4 
         2  3  8 
         7  1  6 


  * puzzle2x2-unsolvable1.txt
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        2
         1  0 
         2  3 


==> FAILED

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        2
         0  2 
         1  3 


    - failed on trial 1 of 1000

  * 3-by-3
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        3
         6  8  5 
         1  7  3 
         4  2  0 


    - failed on trial 1 of 1000

  * 4-by-4
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        4
        10  8  3  0 
         9 12  6 14 
         5  7  1  4 
         2 15 11 13 


    - failed on trial 1 of 1000

  * 5-by-5
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 4
    - board
        5
        18 12  4 22 21 
         7  5  8  0  9 
         3 11 16 14 24 
        17 23 19 13  1 
        15 20 10  6  2 


    - failed on trial 1 of 1000

  * 9-by-9
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 3
    - board
        9
         4 60 71 42 53 20 57 70 27 
        51 41 23 58 61 45 79  6 72 
        29 67 49 39 50 13 68 69 63 
        25 74 28 56 47 66 21 43 55 
        12  2 32 46  5 33 73 19 15 
        18 40 65 31 64 48 75 11 34 
        16 44 24 26  1 77 14 30  7 
        17 54 78 10 80 76 38 35  0 
        37 62 22  9  8 59  3 36 52 


    - failed on trial 1 of 1000

  * 10-by-10
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 4
    - board
        10
        28 98  7 71 78 16 34 14  4 42 
        93 74 52 73 51 21 41  6 92 59 
        48 12  0 24 81 44 32 75 15 30 
        38 97 80 26 50 99 19 46 33 87 
        39 88 25 53 67 95 79  2 65 70 
         1 55  5 61  3 49 63 85 91 27 
        89 77 20 62 68 11 40 58 76 13 
        37 54  8 31  9 64 29 43 90 96 
        56 18 57 60 84 47 83 86 66 35 
        10 22 94 69 36 82 23 45 72 17 


    - failed on trial 1 of 1000

  * 127-by-127
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 4

    - failed on trial 1 of 10

==> FAILED

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 6
    - board
        3
         0  1  3 
         4  2  5 
         7  8  6 


  * puzzle00.txt
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 6
    - board
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78 79 80 
        81 82 83 84 85 86 87 88 89 90 
        91 92 93 94 95 96 97 98 99  0 


  * puzzle06.txt
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 6
    - board
        4
         0  1  2  3 
         5  6  7  4 
         9 10 11  8 
        13 14 15 12 


  * puzzle09.txt
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 9
    - board
        4
         2  0  3  4 
         1 10  6  8 
         5  9  7 12 
        13 14 11 15 


  * puzzle23.txt
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 8
    - board
        3
         5  0  4 
         2  3  8 
         7  1  6 


  * puzzle2x2-unsolvable1.txt
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 4
    - board
        2
         1  0 
         2  3 


==> FAILED

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 4
    - board
        2
         1  0 
         3  2 


    - failed on trial 1 of 1000

  * 3-by-3
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 6
    - board
        3
         8  5  2 
         6  4  7 
         0  3  1 


    - failed on trial 1 of 1000

  * 4-by-4
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 9
    - board
        4
         5  8 10  7 
         4  6 15 12 
        13  9 14  1 
         3 11  0  2 


    - failed on trial 1 of 1000

  * 5-by-5
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 9
    - board
        5
        12  0 13 20  4 
        18  7 24 23  5 
        10 15 22  2  6 
        16  1 19  8  9 
        14 17  3 21 11 


    - failed on trial 1 of 1000

  * 9-by-9
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 15
    - board
        9
        76 65 23  1 60 69  3 61  2 
         5 45 37  0 55 40 15 57 32 
         9 51 52 70 59 53 48 80 20 
        41 31 73 18  4 13 30 46 64 
        24 21 63 58 72 47 17 44 67 
        22 79 14 25 35 77 66 75  7 
        12 28 62 26 68 43 74 49 11 
         8 54 34 50 39 29 27 38 71 
         6 42 78 56 19 33 10 16 36 


    - failed on trial 1 of 1000

  * 10-by-10
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 15
    - board
        10
        99 54 94 97 66 75  8 41 67 24 
        80 48 69 49 76 25  1 81 63 70 
        16  3 60 89 47  4 13 65 64  2 
        92  0 88 72 15 71 73 61 14 36 
        28 83 23 20 31 26 45 35 10 21 
        53 91 62 32 27 79 77 39 18 96 
        17 57  5 19 55 95 50 30  9 59 
        93  7 33 37 12 22 46 29 86  6 
        78 51 98 56 43 42 40 82 74 84 
        34 68 85 44 87 58 52 90 38 11 


    - failed on trial 1 of 1000

==> FAILED

Test 7a: check twin() with file inputs
  * puzzle04.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 3

  * puzzle00.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 10

  * puzzle06.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 4

  * puzzle09.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 4

  * puzzle23.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 3

  * puzzle2x2-unsolvable1.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 2

==> FAILED

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 2

    - failed on trial 1 of 1000

  * 3-by-3
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 3

    - failed on trial 1 of 1000

  * 4-by-4
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 4

    - failed on trial 1 of 1000

  * 5-by-5
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 5

    - failed on trial 1 of 1000

  * 9-by-9
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 9

    - failed on trial 1 of 100

  * 10-by-10
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 10

    - failed on trial 1 of 10

==> FAILED

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
    - isGoal() returns wrong answer
    - student   isGoal() = true
    - reference isGoal() = false
        3
         0  1  3 
         4  2  5 
         7  8  6 


  * puzzle16.txt
    - isGoal() returns wrong answer
    - student   isGoal() = true
    - reference isGoal() = false
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 47 37 39 40 
        41 42 43 44 45 46  0 38 49 50 
        51 52 53 54 55 56 57 48 59 60 
        61 62 63 64 65 66 67 58 69 80 
        71 72 73 74 75 76 77 68 70 78 
        81 82 83 84 85 86 87 88 79 89 
        91 92 93 94 95 96 97 98 99 90 


  * puzzle06.txt
    - isGoal() returns wrong answer
    - student   isGoal() = true
    - reference isGoal() = false
        4
         0  1  2  3 
         5  6  7  4 
         9 10 11  8 
        13 14 15 12 


  * puzzle09.txt
    - isGoal() returns wrong answer
    - student   isGoal() = true
    - reference isGoal() = false
        4
         2  0  3  4 
         1 10  6  8 
         5  9  7 12 
        13 14 11 15 


  * puzzle23.txt
    - isGoal() returns wrong answer
    - student   isGoal() = true
    - reference isGoal() = false
        3
         5  0  4 
         2  3  8 
         7  1  6 


  * puzzle2x2-unsolvable1.txt
    - isGoal() returns wrong answer
    - student   isGoal() = true
    - reference isGoal() = false
        2
         1  0 
         2  3 


  * puzzle3x3-unsolvable1.txt
    - isGoal() returns wrong answer
    - student   isGoal() = true
    - reference isGoal() = false
        3
         1  2  3 
         4  6  5 
         7  8  0 


  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> FAILED

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
    - equals() returns true when argument is null
    - equals() should return false
    - failed on trial 1 of 100000

  * argument is of type String
    - fails to return false when argument is of type String

  * Board object stored in a variable of type Object
==> FAILED

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
    - failed on trial 1 of 100
    - student   equals() = true
    - reference equals() = false
    - board1
        2
         1  0 
         3  2 
    - board2
        2
         3  2 
         0  1 

  * n = 3
    - failed on trial 1 of 1000
    - student   equals() = true
    - reference equals() = false
    - board1
        3
         4  7  6 
         2  3  5 
         8  1  0 
    - board2
        3
         1  5  4 
         7  3  6 
         8  2  0 

  * n = 4
    - failed on trial 1 of 1000
    - student   equals() = true
    - reference equals() = false
    - board1
        4
        15  2  1 11 
         0 12  7 14 
         9  4  3  6 
         8  5 13 10 
    - board2
        4
        10 14  8  4 
         0 12  2  1 
         5  9  6 15 
        13  7  3 11 

  * 5 <= n < 10
    - failed on trial 1 of 1000
    - student   equals() = true
    - reference equals() = false
    - board1
        6
         8 14  2 18 29  9 
         7 11 26  6 22 20 
         0 28 33 21  1  5 
        24 19  3 12 27 10 
        13 31 17 34 30 16 
        35 25 23  4 32 15 
    - board2
        6
         1  2 16 25 34 27 
        31 30 24 11 21 35 
        32  3 13 29  5  6 
        10 26 18  4 14 12 
        23  9 33 20 28 19 
        22  8  7  0 15 17 

==> FAILED

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
    - failed on trial 1 of 1000
    - student   equals() = true
    - reference equals() = false
    - board1
        4
        11  1  6 13 
         5  9  8  7 
         3  0 10  2 
        14  4 15 12 
    - board2
        5
        19 15  1  0  9 
        17  6 23 18  4 
         2 11  3  7 12 
         5  8 20 21 13 
        24 14 10 16 22 

  * m = 2, n = 5
    - failed on trial 1 of 1000
    - student   equals() = true
    - reference equals() = false
    - board1
        2
         1  0 
         2  3 
    - board2
        5
         8 12 24 15 21 
         7  6 19 17 20 
        22 11 18  2 16 
        14  3 13  0  5 
         1 23  9  4 10 

  * m = 5, n = 3
    - failed on trial 1 of 1000
    - student   equals() = true
    - reference equals() = false
    - board1
        5
         7 15 18  0  5 
         3  2  6 23 12 
        11 22  9  4 19 
        16 10  8 24 14 
        13 17 20 21  1 
    - board2
        3
         4  8  5 
         2  1  6 
         7  0  3 

  * m = 2, n = 3
    - failed on trial 1 of 10000
    - student   equals() = true
    - reference equals() = false
    - board1
        2
         3  2 
         1  0 
    - board2
        3
         5  3  2 
         1  8  0 
         4  6  7 

  * m = 3, n = 2
    - failed on trial 1 of 10000
    - student   equals() = true
    - reference equals() = false
    - board1
        3
         0  4  2 
         7  5  8 
         1  3  6 
    - board2
        2
         1  3 
         0  2 

==> FAILED

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check dimension() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:279)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:268)
    TestBoard.test13(TestBoard.java:1513)
    TestBoard.main(TestBoard.java:1576)

  * 2nd neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:279)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:268)
    TestBoard.test13(TestBoard.java:1514)
    TestBoard.main(TestBoard.java:1576)

  * 13th neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:279)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:268)
    TestBoard.test13(TestBoard.java:1515)
    TestBoard.main(TestBoard.java:1576)

  * 13th neighbor of puzzle00.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:279)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:268)
    TestBoard.test13(TestBoard.java:1516)
    TestBoard.main(TestBoard.java:1576)

  * 13th neighbor of puzzle2x2-unsolvable1.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:279)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:268)
    TestBoard.test13(TestBoard.java:1517)
    TestBoard.main(TestBoard.java:1576)

==> FAILED

Test 14: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 3

  * 1st neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:193)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:182)
    TestBoard.test14(TestBoard.java:1525)
    TestBoard.main(TestBoard.java:1577)

  * 2nd neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:193)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:182)
    TestBoard.test14(TestBoard.java:1526)
    TestBoard.main(TestBoard.java:1577)

  * 13th neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:193)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:182)
    TestBoard.test14(TestBoard.java:1527)
    TestBoard.main(TestBoard.java:1577)

  * 13th neighbor of puzzle00.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:193)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:182)
    TestBoard.test14(TestBoard.java:1528)
    TestBoard.main(TestBoard.java:1577)

  * 13th neighbor of puzzle2x2-unsolvable1.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:193)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:182)
    TestBoard.test14(TestBoard.java:1529)
    TestBoard.main(TestBoard.java:1577)

==> FAILED

Test 15: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 3

  * 1st neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:364)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:351)
    TestBoard.test15(TestBoard.java:1537)
    TestBoard.main(TestBoard.java:1578)

  * 2nd neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:364)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:351)
    TestBoard.test15(TestBoard.java:1538)
    TestBoard.main(TestBoard.java:1578)

  * 13th neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:364)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:351)
    TestBoard.test15(TestBoard.java:1539)
    TestBoard.main(TestBoard.java:1578)

  * 13th neighbor of puzzle00.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:364)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:351)
    TestBoard.test15(TestBoard.java:1540)
    TestBoard.main(TestBoard.java:1578)

  * 13th neighbor of puzzle2x2-unsolvable1.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:364)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:351)
    TestBoard.test15(TestBoard.java:1541)
    TestBoard.main(TestBoard.java:1578)

==> FAILED


Total: 5/24 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2           144                  128
=> passed     3           208                  192
=> passed     4           256                  240
=> passed     8           576                  560
=> passed    12          1024                 1008
=> passed    16          1600                 1584
=> passed    20          2304                 2288
=> passed    37          6872                 6856
=> passed    72         23104                23088
=> passed   120         61504                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 64.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 1
    - board =
        2
         1  0 
         3  2 

  * puzzle02.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 2
    - board =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64 65 66 67 68 69 70  0 71 
        73 74 75 76 77 78 79 80 72 

  * puzzle03.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 3
    - board =
        2
         2  0 
         1  3 

  * puzzle04.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 4
    - board =
        3
         0  1  3 
         4  2  5 
         7  8  6 

  * puzzle05.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 5
    - board =
        3
         4  1  3 
         0  2  6 
         7  5  8 

  * puzzle06.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 6
    - board =
        4
         0  1  2  3 
         5  6  7  4 
         9 10 11  8 
        13 14 15 12 

  * puzzle07.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 7
    - board =
        3
         1  2  3 
         0  7  6 
         5  4  8 

  * puzzle08.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 8
    - board =
        3
         2  3  5 
         1  0  4 
         7  8  6 

  * puzzle09.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 9
    - board =
        4
         2  0  3  4 
         1 10  6  8 
         5  9  7 12 
        13 14 11 15 

  * puzzle10.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 10
    - board =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64  0 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

  * puzzle11.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 11
    - board =
        3
         1  0  2 
         7  5  4 
         8  6  3 

  * puzzle12.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 12
    - board =
        5
         1  2  3  4  5 
        12  6  8  9 10 
         0  7 13 19 14 
        11 16 17 18 15 
        21 22 23 24 20 

  * puzzle13.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 13
    - board =
        4
         2  3  4  8 
         1  6  0 12 
         5 10  7 11 
         9 13 14 15 

==> FAILED

Test 1b: check solution() with file inputs
  * puzzle00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle01.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle02.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle03.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle04.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle05.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle06.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle07.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle08.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle09.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle10.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle11.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle12.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle13.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

==> FAILED

Test 2a: check moves() with more file inputs
  * puzzle14.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 14
    - board =
        7
         1  2  3  4  5  7 14 
         8  9 10 11 12 13  6 
        15 16 17 18 19 20 21 
        22 23 24 25 26 27 28 
        29 30 31 32  0 33 34 
        36 37 38 39 40 41 35 
        43 44 45 46 47 48 42 

  * puzzle15.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 15
    - board =
        8
         1  2  3  4  5  6  7  8 
         9 10 11 12 13 14 15 16 
        17 18 19 20 21 22 23 24 
         0 25 27 28 29 30 31 32 
        34 26 35 36 37 38 39 40 
        33 41 42 43 45 46 47 48 
        49 50 51 44 61 53 54 56 
        57 58 59 52 60 62 55 63 

  * puzzle16.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 16
    - board =
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 47 37 39 40 
        41 42 43 44 45 46  0 38 49 50 
        51 52 53 54 55 56 57 48 59 60 
        61 62 63 64 65 66 67 58 69 80 
        71 72 73 74 75 76 77 68 70 78 
        81 82 83 84 85 86 87 88 79 89 
        91 92 93 94 95 96 97 98 99 90 

  * puzzle17.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 17
    - board =
        3
         5  1  8 
         2  7  3 
         4  0  6 

  * puzzle18.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 18
    - board =
        3
         5  6  2 
         1  8  4 
         7  3  0 

  * puzzle19.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 19
    - board =
        3
         1  2  7 
         0  4  3 
         6  5  8 

  * puzzle20.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 20
    - board =
        3
         1  6  4 
         7  0  8 
         2  3  5 

  * puzzle21.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 21
    - board =
        3
         5  2  3 
         4  7  0 
         8  6  1 

  * puzzle22.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 22
    - board =
        3
         4  8  2 
         3  6  5 
         1  7  0 

  * puzzle23.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 23
    - board =
        3
         5  0  4 
         2  3  8 
         7  1  6 

  * puzzle24.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 24
    - board =
        3
         5  7  4 
         3  0  8 
         1  6  2 

  * puzzle25.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 25
    - board =
        3
         2  8  5 
         3  6  1 
         7  0  4 

  * puzzle26.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 26
    - board =
        3
         5  7  0 
         3  2  8 
         1  6  4 

  * puzzle27.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 27
    - board =
        3
         5  8  7 
         1  4  6 
         3  0  2 

  * puzzle28.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 28
    - board =
        3
         7  8  5 
         4  0  2 
         3  6  1 

  * puzzle29.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 29
    - board =
        3
         6  0  5 
         8  7  4 
         3  2  1 

  * puzzle30.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 30
    - board =
        3
         8  4  7 
         1  5  6 
         3  2  0 

  * puzzle31.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 31
    - board =
        3
         8  6  7 
         2  5  4 
         3  0  1 

==> FAILED

Test 2b: check solution() with more file inputs
  * puzzle14.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle15.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle16.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle17.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle18.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle19.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle20.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle21.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle22.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle23.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle24.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle25.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle26.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle27.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle28.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle29.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle30.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle31.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

==> FAILED

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 1
    - board =
        3
         1  2  3 
         4  5  0 
         7  8  6 

    - failed on trial 1 of 1000

==> FAILED

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

    - failed on trial 1 of 1000

==> FAILED

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
    - wrong number of moves()
    - student   moves() for puzzle04.txt = 0
    - reference moves() for puzzle04.txt = 4

  * puzzle00.txt and puzzle04.txt
    - wrong number of moves()
    - student   moves() for puzzle04.txt = 0
    - reference moves() for puzzle04.txt = 4

  * puzzle04.txt and puzzle00.txt
    - wrong number of moves()
    - student   moves() for puzzle04.txt = 0
    - reference moves() for puzzle04.txt = 4

==> FAILED

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        2
         1  0 
         3  2 

  * puzzle03.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        2
         2  0 
         1  3 

  * puzzle04.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        3
         0  1  3 
         4  2  5 
         7  8  6 

  * puzzle17.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        3
         5  1  8 
         2  7  3 
         4  0  6 

  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> FAILED

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        2
         1  0 
         3  2 

    - failed on trial 1 of 100

==> FAILED

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = -1
    - board =
        2
         1  0 
         2  3 

  * puzzle2x2-unsolvable2.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = -1
    - board =
        2
         0  1 
         2  3 

  * puzzle3x3-unsolvable1.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = -1
    - board =
        3
         1  2  3 
         4  6  5 
         7  8  0 

  * puzzle3x3-unsolvable2.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = -1
    - board =
        3
         8  6  7 
         2  5  4 
         1  3  0 

  * puzzle4x4-unsolvable.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = -1
    - board =
        4
         3  2  4  8 
         1  6  0 12 
         5 10  7 11 
         9 13 14 15 

==> FAILED

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
    - student solution() does not return null

  * puzzle2x2-unsolvable2.txt
    - student solution() does not return null

  * puzzle3x3-unsolvable1.txt
    - student solution() does not return null

  * puzzle3x3-unsolvable2.txt
    - student solution() does not return null

  * puzzle4x4-unsolvable.txt
    - student solution() does not return null

==> FAILED

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==> passed

Test 9a: check that equals() method in Board is called
  * puzzle00.txt
    - number of boards in so

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.
