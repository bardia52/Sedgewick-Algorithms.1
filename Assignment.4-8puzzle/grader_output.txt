See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 2 warnings)
API:          PASSED

Spotbugs:     FAILED (2 warnings)
PMD:          FAILED (6 warnings)
Checkstyle:   FAILED (0 errors, 7 warnings)

Correctness:  17/49 tests passed
Memory:       22/22 tests passed
Timing:       25/125 tests passed

Aggregate score: 39.82%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
5.5K Aug 21 05:04 Board.java
2.0K Aug 21 05:04 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------
Solver.java:18: warning: [rawtypes] found raw type: MinPQ
    private final MinPQ<SearchNode> minPQ = new MinPQ();
                                                ^
  missing type arguments for generic class MinPQ<Key>
  where Key is a type-variable:
    Key extends Object declared in class MinPQ
Solver.java:18: warning: [unchecked] unchecked conversion
    private final MinPQ<SearchNode> minPQ = new MinPQ();
                                            ^
  required: MinPQ<SearchNode>
  found:    MinPQ
2 warnings


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L P URF_UNREAD_FIELD UrF: The instance (or static) variable 'previous' is never read. Consider removing it from the class.  At Solver.java:[line 52]
L P URF_UNREAD_FIELD UrF: The instance (or static) variable 'current' is never read. Consider removing it from the class.  At Solver.java:[line 53]
Warnings generated: 2


================================================================


% pmd .
*-----------------------------------------------------------
Board.java:19: The private instance (or static) variable 'hammingScore' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:20: The private instance (or static) variable 'manhattanScore' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:47: Avoid unused private instance (or static) variables, such as 'previous'. [UnusedPrivateField]
Solver.java:47: Can you replace the instance (or static) variable 'previous' with a local variable? [SingularField]
Solver.java:48: Avoid unused private instance (or static) variables, such as 'current'. [UnusedPrivateField]
Solver.java:48: Can you replace the instance (or static) variable 'current' with a local variable? [SingularField]
PMD ends with 6 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Board.java:98:9: Conditional logic can be removed. [SimplifyBooleanReturn]
[WARN] Solver.java:12:1: Your program defines 3 outer types, but there should be only 1. [OuterTypeNumber]
[WARN] Solver.java:45: The .java file must have exactly one top-level class. [OneTopLevelClass]
[WARN] Solver.java:61: The .java file must have exactly one top-level class. [OneTopLevelClass]
Checkstyle ends with 0 errors and 4 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:12: You should use 'isGoal()' to check whether a board is the goal board. [MethodCallCount]
[WARN] Solver.java:12: You will need to call the 'equals()' method in Board in order to implement the critical optimization; do not use the '==' operator to compare Board objects. [Performance]
[WARN] Solver.java:18:19: Can you make the variable of type 'MinPQ' a local variable instead of an instance (or static) variable? [Design]
Checkstyle ends with 0 errors and 3 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 24 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        3
         0  1  3 
         4  2  5 
         7  8  6 


  * puzzle00.txt
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78 79 80 
        81 82 83 84 85 86 87 88 89 90 
        91 92 93 94 95 96 97 98 99  0 


  * puzzle06.txt
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        4
         0  1  2  3 
         5  6  7  4 
         9 10 11  8 
        13 14 15 12 


  * puzzle09.txt
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        4
         2  0  3  4 
         1 10  6  8 
         5  9  7 12 
        13 14 11 15 


  * puzzle23.txt
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        3
         5  0  4 
         2  3  8 
         7  1  6 


  * puzzle2x2-unsolvable1.txt
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        2
         1  0 
         2  3 


==> FAILED

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        2
         3  1 
         2  0 


    - failed on trial 1 of 1000

  * 3-by-3
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        3
         6  5  4 
         2  3  0 
         7  8  1 


    - failed on trial 1 of 1000

  * 4-by-4
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        4
         4  7 12  8 
        13 10  1 15 
         9 14 11  6 
         3  0  5  2 


    - failed on trial 1 of 1000

  * 5-by-5
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        5
        21 15  9 24  4 
        22 20 16  1 14 
         8 19 17  3 13 
         0  7 23 11 18 
         5  6 12 10  2 


    - failed on trial 1 of 1000

  * 9-by-9
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        9
        16 12 55 24 54 58 37  1 50 
        64 21 66 11 77 25 70 40 14 
        28 48 59 13  0 19 78 35 44 
        72 27 46 38 33 23 65  8 15 
         7 26 30 49 67  2 79 75 20 
        22 57 61 53 39 36  3 62 68 
        32 41 45 51 10 52 47 74  9 
        69 73 56 29 42 80 18 63 34 
        17  5 71 43 76 60 31  4  6 


    - failed on trial 1 of 100

  * 10-by-10
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        10
        79 46 75 35 37 39 21 74 94 89 
        29 52 55 38 28 76 80 81 49 70 
        56  7 57 91 22 93 64  0 69 14 
        34 83 41 27 88 31 68 44 60 54 
        97 10 51 84  9 19 48  4 99 71 
        15 24 20 11 72 30 25 36 65 43 
        50 12 45 86  2 87 23 63 58 67 
         1 85 62 92 47 18 61 17 96 78 
         8 95 32 66 77  3 82 40 98 13 
        26 16 42  6 90 59 33 73  5 53 


    - failed on trial 1 of 100

  * 127-by-127
    - toString() returns wrong value

    - failed on trial 1 of 10

==> FAILED

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        3
         0  1  3 
         4  2  5 
         7  8  6 


  * puzzle00.txt
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78 79 80 
        81 82 83 84 85 86 87 88 89 90 
        91 92 93 94 95 96 97 98 99  0 


  * puzzle06.txt
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        4
         0  1  2  3 
         5  6  7  4 
         9 10 11  8 
        13 14 15 12 


  * puzzle09.txt
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 3
    - board
        4
         2  0  3  4 
         1 10  6  8 
         5  9  7 12 
        13 14 11 15 


  * puzzle23.txt
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 3
    - board
        3
         5  0  4 
         2  3  8 
         7  1  6 


  * puzzle2x2-unsolvable1.txt
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        2
         1  0 
         2  3 


==> FAILED

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        2
         1  0 
         3  2 


    - failed on trial 1 of 1000

  * 3-by-3
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        3
         3  6  8 
         4  1  7 
         0  2  5 


    - failed on trial 1 of 1000

  * 4-by-4
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        4
         0 14 15 11 
         3 10  6  5 
         9 12  8  7 
         1 13  4  2 


    - failed on trial 1 of 1000

  * 5-by-5
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 3
    - board
        5
        15 10 21 18  9 
        16 22 12  1  0 
         3 23  2 14 20 
         4 24 17  8  6 
        13 11 19  7  5 


    - failed on trial 1 of 1000

  * 9-by-9
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 3
    - board
        9
        62 49 28 27 26 54 19 57 61 
        78 48 42 74 43 30 58 10  0 
        77  7 39 72 32 11 71 25 37 
        46 21 68 34 35 80 29 18 51 
        33 79  6 76  4 36 55 15  8 
        59 67  3 70 24 44 38 47 73 
        66 40 63  5 20 65 23 75 45 
        41 13  9 16 50  2 14 12 17 
         1 69 52 60 53 22 56 64 31 


    - failed on trial 1 of 1000

  * 10-by-10
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 3
    - board
        10
        24 62 33 37 13 47 54 86 85 34 
        41 46 14 82 10 83 49 64  6 74 
        52 45 11  8 56 77 58 72 42 44 
        81 30 65 96  2 57 50  7 99 23 
        91 25 90  1 66 75 27 61 92 98 
        89 12 36 22 95 93 28 17 39  0 
        78 35 84 79 80 32 69 73 40 60 
        38  3 21 31 43 18 59 63 53  5 
        94 26 88 67 29 19 51  9 48 15 
         4 68 76 20 71 97 70 87 16 55 


    - failed on trial 1 of 1000

  * 127-by-127
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 4

    - failed on trial 1 of 10

==> FAILED

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 6
    - board
        3
         0  1  3 
         4  2  5 
         7  8  6 


  * puzzle00.txt
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 6
    - board
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78 79 80 
        81 82 83 84 85 86 87 88 89 90 
        91 92 93 94 95 96 97 98 99  0 


  * puzzle06.txt
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 6
    - board
        4
         0  1  2  3 
         5  6  7  4 
         9 10 11  8 
        13 14 15 12 


  * puzzle09.txt
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 9
    - board
        4
         2  0  3  4 
         1 10  6  8 
         5  9  7 12 
        13 14 11 15 


  * puzzle23.txt
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 8
    - board
        3
         5  0  4 
         2  3  8 
         7  1  6 


  * puzzle2x2-unsolvable1.txt
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 4
    - board
        2
         1  0 
         2  3 


==> FAILED

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 4
    - board
        2
         1  2 
         3  0 


    - failed on trial 1 of 1000

  * 3-by-3
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 8
    - board
        3
         4  2  5 
         0  1  3 
         6  7  8 


    - failed on trial 1 of 1000

  * 4-by-4
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 14
    - board
        4
         9  8  4 10 
         3 13  2  1 
         5  0  7 15 
        11 12 14  6 


    - failed on trial 1 of 1000

  * 5-by-5
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 14
    - board
        5
        22 13  2 21  4 
        24  0  5 10 18 
        23 14  7  8 12 
        20  6 19 17 11 
        16  1  9 15  3 


    - failed on trial 1 of 1000

  * 9-by-9
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 16
    - board
        9
        59 26 30 43 38 61 63 40 55 
         3 35 23 46 31 28 14 36  6 
        27 60 48 24 58 67  7 79 34 
        57 54 19 33 11  9 44 45 12 
        29 13 52 41 72 53 50 73 25 
        51  5 75 78  0 42 37 74 22 
        70 65  8 64 17 47 32 39 49 
        20 15 10 56  1 18 62 68 16 
         4 76 77 21 80 71  2 66 69 


    - failed on trial 1 of 1000

  * 10-by-10
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 10
    - board
        10
        11 35 47 12 43 87 21 83 81  5 
        34 63 56 36 19 71 90 57  3 46 
        26 76 61 74 49 45 24 95 68 39 
        28 91 42 40 93 98 60 79 30  0 
         8 78 96 85 23 20 86 29 55 94 
        75 54 13 67 17 44 33 88 66  6 
        25 65 64  2 70 89 53 59 38 92 
        73 51 41 14 37 22 15 18 10 80 
         7 52 32 72 16 50 31 77  4 97 
        48 82 69 99 84 62 27 58  1  9 


    - failed on trial 1 of 1000

==> FAILED

Test 7a: check twin() with file inputs
  * puzzle04.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 3

  * puzzle00.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 10

  * puzzle06.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 4

  * puzzle09.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 4

  * puzzle23.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 3

  * puzzle2x2-unsolvable1.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 2

==> FAILED

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 2

    - failed on trial 1 of 1000

  * 3-by-3
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 3

    - failed on trial 1 of 1000

  * 4-by-4
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 4

    - failed on trial 1 of 1000

  * 5-by-5
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 5

    - failed on trial 1 of 1000

  * 9-by-9
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 9

    - failed on trial 1 of 100

  * 10-by-10
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 10

    - failed on trial 1 of 10

==> FAILED

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
  * argument is of type String
  * Board object stored in a variable of type Object
==> passed

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
  * n = 3
  * n = 4
  * 5 <= n < 10
==> passed

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
  * m = 2, n = 5
  * m = 5, n = 3
  * m = 2, n = 3
  * m = 3, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check dimension() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:279)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:268)
    TestBoard.test13(TestBoard.java:1513)
    TestBoard.main(TestBoard.java:1576)

  * 2nd neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:279)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:268)
    TestBoard.test13(TestBoard.java:1514)
    TestBoard.main(TestBoard.java:1576)

  * 13th neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:279)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:268)
    TestBoard.test13(TestBoard.java:1515)
    TestBoard.main(TestBoard.java:1576)

  * 13th neighbor of puzzle00.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:279)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:268)
    TestBoard.test13(TestBoard.java:1516)
    TestBoard.main(TestBoard.java:1576)

  * 13th neighbor of puzzle2x2-unsolvable1.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:279)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:268)
    TestBoard.test13(TestBoard.java:1517)
    TestBoard.main(TestBoard.java:1576)

==> FAILED

Test 14: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 3

  * 1st neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:193)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:182)
    TestBoard.test14(TestBoard.java:1525)
    TestBoard.main(TestBoard.java:1577)

  * 2nd neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:193)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:182)
    TestBoard.test14(TestBoard.java:1526)
    TestBoard.main(TestBoard.java:1577)

  * 13th neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:193)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:182)
    TestBoard.test14(TestBoard.java:1527)
    TestBoard.main(TestBoard.java:1577)

  * 13th neighbor of puzzle00.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:193)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:182)
    TestBoard.test14(TestBoard.java:1528)
    TestBoard.main(TestBoard.java:1577)

  * 13th neighbor of puzzle2x2-unsolvable1.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:193)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:182)
    TestBoard.test14(TestBoard.java:1529)
    TestBoard.main(TestBoard.java:1577)

==> FAILED

Test 15: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 3

  * 1st neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:364)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:351)
    TestBoard.test15(TestBoard.java:1537)
    TestBoard.main(TestBoard.java:1578)

  * 2nd neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:364)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:351)
    TestBoard.test15(TestBoard.java:1538)
    TestBoard.main(TestBoard.java:1578)

  * 13th neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:364)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:351)
    TestBoard.test15(TestBoard.java:1539)
    TestBoard.main(TestBoard.java:1578)

  * 13th neighbor of puzzle00.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:364)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:351)
    TestBoard.test15(TestBoard.java:1540)
    TestBoard.main(TestBoard.java:1578)

  * 13th neighbor of puzzle2x2-unsolvable1.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:364)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:351)
    TestBoard.test15(TestBoard.java:1541)
    TestBoard.main(TestBoard.java:1578)

==> FAILED


Total: 13/24 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2           144                  128
=> passed     3           208                  192
=> passed     4           256                  240
=> passed     8           576                  560
=> passed    12          1024                 1008
=> passed    16          1600                 1584
=> passed    20          2304                 2288
=> passed    37          6872                 6856
=> passed    72         23104                23088
=> passed   120         61504                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 64.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 1
    - board =
        2
         1  0 
         3  2 

  * puzzle02.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 2
    - board =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64 65 66 67 68 69 70  0 71 
        73 74 75 76 77 78 79 80 72 

  * puzzle03.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 3
    - board =
        2
         2  0 
         1  3 

  * puzzle04.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 4
    - board =
        3
         0  1  3 
         4  2  5 
         7  8  6 

  * puzzle05.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 5
    - board =
        3
         4  1  3 
         0  2  6 
         7  5  8 

  * puzzle06.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 6
    - board =
        4
         0  1  2  3 
         5  6  7  4 
         9 10 11  8 
        13 14 15 12 

  * puzzle07.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 7
    - board =
        3
         1  2  3 
         0  7  6 
         5  4  8 

  * puzzle08.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 8
    - board =
        3
         2  3  5 
         1  0  4 
         7  8  6 

  * puzzle09.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 9
    - board =
        4
         2  0  3  4 
         1 10  6  8 
         5  9  7 12 
        13 14 11 15 

  * puzzle10.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 10
    - board =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64  0 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

  * puzzle11.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 11
    - board =
        3
         1  0  2 
         7  5  4 
         8  6  3 

  * puzzle12.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 12
    - board =
        5
         1  2  3  4  5 
        12  6  8  9 10 
         0  7 13 19 14 
        11 16 17 18 15 
        21 22 23 24 20 

  * puzzle13.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 13
    - board =
        4
         2  3  4  8 
         1  6  0 12 
         5 10  7 11 
         9 13 14 15 

==> FAILED

Test 1b: check solution() with file inputs
  * puzzle00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle01.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle02.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle03.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle04.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle05.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle06.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle07.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle08.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle09.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle10.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle11.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle12.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle13.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

==> FAILED

Test 2a: check moves() with more file inputs
  * puzzle14.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 14
    - board =
        7
         1  2  3  4  5  7 14 
         8  9 10 11 12 13  6 
        15 16 17 18 19 20 21 
        22 23 24 25 26 27 28 
        29 30 31 32  0 33 34 
        36 37 38 39 40 41 35 
        43 44 45 46 47 48 42 

  * puzzle15.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 15
    - board =
        8
         1  2  3  4  5  6  7  8 
         9 10 11 12 13 14 15 16 
        17 18 19 20 21 22 23 24 
         0 25 27 28 29 30 31 32 
        34 26 35 36 37 38 39 40 
        33 41 42 43 45 46 47 48 
        49 50 51 44 61 53 54 56 
        57 58 59 52 60 62 55 63 

  * puzzle16.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 16
    - board =
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 47 37 39 40 
        41 42 43 44 45 46  0 38 49 50 
        51 52 53 54 55 56 57 48 59 60 
        61 62 63 64 65 66 67 58 69 80 
        71 72 73 74 75 76 77 68 70 78 
        81 82 83 84 85 86 87 88 79 89 
        91 92 93 94 95 96 97 98 99 90 

  * puzzle17.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 17
    - board =
        3
         5  1  8 
         2  7  3 
         4  0  6 

  * puzzle18.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 18
    - board =
        3
         5  6  2 
         1  8  4 
         7  3  0 

  * puzzle19.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 19
    - board =
        3
         1  2  7 
         0  4  3 
         6  5  8 

  * puzzle20.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 20
    - board =
        3
         1  6  4 
         7  0  8 
         2  3  5 

  * puzzle21.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 21
    - board =
        3
         5  2  3 
         4  7  0 
         8  6  1 

  * puzzle22.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 22
    - board =
        3
         4  8  2 
         3  6  5 
         1  7  0 

  * puzzle23.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 23
    - board =
        3
         5  0  4 
         2  3  8 
         7  1  6 

  * puzzle24.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 24
    - board =
        3
         5  7  4 
         3  0  8 
         1  6  2 

  * puzzle25.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 25
    - board =
        3
         2  8  5 
         3  6  1 
         7  0  4 

  * puzzle26.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 26
    - board =
        3
         5  7  0 
         3  2  8 
         1  6  4 

  * puzzle27.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 27
    - board =
        3
         5  8  7 
         1  4  6 
         3  0  2 

  * puzzle28.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 28
    - board =
        3
         7  8  5 
         4  0  2 
         3  6  1 

  * puzzle29.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 29
    - board =
        3
         6  0  5 
         8  7  4 
         3  2  1 

  * puzzle30.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 30
    - board =
        3
         8  4  7 
         1  5  6 
         3  2  0 

  * puzzle31.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 31
    - board =
        3
         8  6  7 
         2  5  4 
         3  0  1 

==> FAILED

Test 2b: check solution() with more file inputs
  * puzzle14.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle15.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle16.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle17.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle18.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle19.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle20.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle21.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle22.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle23.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle24.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle25.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle26.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle27.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle28.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle29.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle30.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle31.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

==> FAILED

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 1
    - board =
        3
         1  2  3 
         4  5  0 
         7  8  6 

    - failed on trial 1 of 1000

==> FAILED

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

    - failed on trial 1 of 1000

==> FAILED

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
    - wrong number of moves()
    - student   moves() for puzzle04.txt = 0
    - reference moves() for puzzle04.txt = 4

  * puzzle00.txt and puzzle04.txt
    - wrong number of moves()
    - student   moves() for puzzle04.txt = 0
    - reference moves() for puzzle04.txt = 4

  * puzzle04.txt and puzzle00.txt
    - wrong number of moves()
    - student   moves() for puzzle04.txt = 0
    - reference moves() for puzzle04.txt = 4

==> FAILED

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        2
         1  0 
         3  2 

  * puzzle03.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        2
         2  0 
         1  3 

  * puzzle04.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        3
         0  1  3 
         4  2  5 
         7  8  6 

  * puzzle17.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        3
         5  1  8 
         2  7  3 
         4  0  6 

  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> FAILED

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        2
         1  0 
         3  2 

    - failed on trial 1 of 100

==> FAILED

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = -1
    - board =
        2
         1  0 
         2  3 

  * puzzle2x2-unsolvable2.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = -1
    - board =
        2
         0  1 
         2  3 

  * puzzle3x3-unsolvable1.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = -1
    - board =
        3
         1  2  3 
         4  6  5 
         7  8  0 

  * puzzle3x3-unsolvable2.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = -1
    - board =
        3
         8  6  7 
         2  5  4 
         1  3  0 

  * puzzle4x4-unsolvable.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = -1
    - board =
        4
         3  2  4  8 
         1  6  0 12 
         5 10  7 11 
         9 13 14 15 

==> FAILED

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
    - student solution() does not return null

  * puzzle2x2-unsolvable2.txt
    - student solution() does not return null

  * puzzle3x3-unsolvable1.txt
    - student solution() does not return null

  * puzzle3x3-unsolvable2.txt
    - student solution() does not return null

  * puzzle4x4-unsolvable.txt
    - student solution() does not return null

==> FAILED

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==> passed

Test 9a: check that equals() method in Board is called
  * puzzle00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

    - did not call the equals() method in Board
    - likely a bug in the critical optimization

  * puzzle04.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 4
    - board =
        3
         0  1  3 
         4  2  5 
         7  8  6 

    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

    - did not call the equals() method in Board
    - likely a bug in the critical optimization

  * puzzle05.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 5
    - board =
        3
         4  1  3 
         0  2  6 
         7  5  8 

    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

    - did not call the equals() method in Board
    - likely a bug in the critical optimization

  * puzzle10.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 10
    - board =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64  0 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

    - did not call the equals() method in Board
    - likely a bug in the critical optimization

==> FAILED

Test 9b: check that equals() method in Board is called only
         with an argument of type Board
  * puzzle00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle04.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 4
    - board =
        3
         0  1  3 
         4  2  5 
         7  8  6 

    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle05.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 5
    - board =
        3
         4  1  3 
         0  2  6 
         7  5  8 

    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle10.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 10
    - board =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64  0 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

==> passed

Test 9c: check that equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
  * puzzle27.txt
==> passed

Test 10: check that constructor throws exception if board is null
    - throws wrong exception when calling constructor with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 11a: check moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 1
    - board =
        2
         1  2 
         0  3 

  * puzzle2x2-02.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 2
    - board =
        2
         0  1 
         3  2 

  * puzzle2x2-03.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 3
    - board =
        2
         3  1 
         0  2 

  * puzzle2x2-04.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 4
    - board =
        2
         2  3 
         1  0 

  * puzzle2x2-05.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 5
    - board =
        2
         2  3 
         0  1 

  * puzzle2x2-06.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 6
    - board =
        2
         0  3 
         2  1 

==> FAILED

Test 11b: check solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle2x2-01.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle2x2-02.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle2x2-03.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle2x2-04.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle2x2-05.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle2x2-06.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

==> FAILED

Test 12a: check moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 1
    - board =
        3
         1  2  3 
         4  5  0 
         7  8  6 

  * puzzle3x3-02.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 2
    - board =
        3
         1  2  3 
         4  0  5 
         7  8  6 

  * puzzle3x3-03.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 3
    - board =
        3
         1  2  3 
         0  4  5 
         7  8  6 

  * puzzle3x3-04.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 4
    - board =
        3
         0  1  2 
         4  5  3 
         7  8  6 

  * puzzle3x3-05.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 5
    - board =
        3
         1  0  2 
         4  6  3 
         7  5  8 

  * puzzle3x3-06.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 6
    - board =
        3
         1  2  0 
         4  8  3 
         7  6  5 

  * puzzle3x3-07.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 7
    - board =
        3
         1  2  3 
         0  4  8 
         7  6  5 

  * puzzle3x3-08.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 8
    - board =
        3
         0  4  3 
         2  1  6 
         7  5  8 

  * puzzle3x3-09.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 9
    - board =
        3
         1  3  6 
         5  2  8 
         4  0  7 

  * puzzle3x3-10.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 10
    - board =
        3
         0  4  1 
         5  3  2 
         7  8  6 

  * puzzle3x3-11.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 11
    - board =
        3
         1  3  5 
         7  2  6 
         8  0  4 

  * puzzle3x3-12.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 12
    - board =
        3
         4  1  2 
         3  0  6 
         5  7  8 

  * puzzle3x3-13.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference m

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.