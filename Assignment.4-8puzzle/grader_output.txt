See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (2 warnings)
Checkstyle:   FAILED (0 errors, 4 warnings)

Correctness:  24/49 tests passed
Memory:       10/22 tests passed
Timing:       0/125 tests passed

Aggregate score: 43.93%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 12K Aug 30 06:05 Board.java
3.7K Aug 30 06:05 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------
Solver.java:20: The private instance (or static) variable 'numMoves' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:28: Avoid unused local variables, such as 'b'. [UnusedLocalVariable]
PMD ends with 2 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Solver.java:13:3: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Solver.java:48:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------
[WARN] Board.java:16:1: Defining a nested class in this program suggests poor design. [DescendantToken]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:70:25: Do not print to standard output in 'solution()'. [SideEffect]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 24 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
  * argument is of type String
  * Board object stored in a variable of type Object
==> passed

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
  * n = 3
  * n = 4
  * 5 <= n < 10
==> passed

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
  * m = 2, n = 5
  * m = 5, n = 3
  * m = 2, n = 3
  * m = 3, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check dimension() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 15: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed


Total: 24/24 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2           136                  128
=> passed     3           200                  192
=> passed     4           248                  240
=> passed     8           568                  560
=> passed    12          1016                 1008
=> passed    16          1592                 1584
=> passed    20          2296                 2288
=> passed    37          6864                 6856
=> passed    72         23096                23088
=> passed   120         61496                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 56.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
1: 1 - 2
 1  0 
 3  2 
  * puzzle02.txt
1: 2 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 69 70  0 71 
73 74 75 76 77 78 79 80 72 
2: 1 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 69 70 71  0 
73 74 75 76 77 78 79 80 72 
  * puzzle03.txt
1: 3 - 2
 2  0 
 1  3 
2: 2 - 2
 0  2 
 1  3 
3: 1 - 2
 1  2 
 0  3 
  * puzzle04.txt
1: 4 - 3
 0  1  3 
 4  2  5 
 7  8  6 
2: 3 - 3
 1  0  3 
 4  2  5 
 7  8  6 
3: 2 - 3
 1  2  3 
 4  0  5 
 7  8  6 
4: 1 - 3
 1  2  3 
 4  5  0 
 7  8  6 
  * puzzle05.txt
1: 5 - 3
 4  1  3 
 0  2  6 
 7  5  8 
2: 4 - 3
 0  1  3 
 4  2  6 
 7  5  8 
3: 3 - 3
 1  0  3 
 4  2  6 
 7  5  8 
4: 2 - 3
 1  2  3 
 4  0  6 
 7  5  8 
5: 1 - 3
 1  2  3 
 4  5  6 
 7  0  8 
  * puzzle06.txt
1: 6 - 4
 0  1  2  3 
 5  6  7  4 
 9 10 11  8 
13 14 15 12 
2: 5 - 4
 1  0  2  3 
 5  6  7  4 
 9 10 11  8 
13 14 15 12 
3: 4 - 4
 1  2  0  3 
 5  6  7  4 
 9 10 11  8 
13 14 15 12 
4: 3 - 4
 1  2  3  0 
 5  6  7  4 
 9 10 11  8 
13 14 15 12 
5: 2 - 4
 1  2  3  4 
 5  6  7  0 
 9 10 11  8 
13 14 15 12 
6: 1 - 4
 1  2  3  4 
 5  6  7  8 
 9 10 11  0 
13 14 15 12 
  * puzzle07.txt
1: 7 - 3
 1  2  3 
 0  7  6 
 5  4  8 
2: 6 - 3
 1  2  3 
 7  0  6 
 5  4  8 
3: 5 - 3
 1  2  3 
 7  4  6 
 5  0  8 
4: 4 - 3
 1  2  3 
 7  4  6 
 0  5  8 
5: 3 - 3
 1  2  3 
 0  4  6 
 7  5  8 
6: 2 - 3
 1  2  3 
 4  0  6 
 7  5  8 
7: 1 - 3
 1  2  3 
 4  5  6 
 7  0  8 
  * puzzle08.txt
1: 8 - 3
 2  3  5 
 1  0  4 
 7  8  6 
2: 7 - 3
 2  3  5 
 1  4  0 
 7  8  6 
3: 6 - 3
 2  3  0 
 1  4  5 
 7  8  6 
4: 5 - 3
 2  0  3 
 1  4  5 
 7  8  6 
5: 4 - 3
 0  2  3 
 1  4  5 
 7  8  6 
6: 3 - 3
 1  2  3 
 0  4  5 
 7  8  6 
7: 2 - 3
 1  2  3 
 4  0  5 
 7  8  6 
8: 1 - 3
 1  2  3 
 4  5  0 
 7  8  6 
  * puzzle09.txt
1: 9 - 4
 2  0  3  4 
 1 10  6  8 
 5  9  7 12 
13 14 11 15 
2: 8 - 4
 0  2  3  4 
 1 10  6  8 
 5  9  7 12 
13 14 11 15 
3: 7 - 4
 1  2  3  4 
 0 10  6  8 
 5  9  7 12 
13 14 11 15 
4: 6 - 4
 1  2  3  4 
 5 10  6  8 
 0  9  7 12 
13 14 11 15 
5: 5 - 4
 1  2  3  4 
 5 10  6  8 
 9  0  7 12 
13 14 11 15 
6: 4 - 4
 1  2  3  4 
 5  0  6  8 
 9 10  7 12 
13 14 11 15 
7: 3 - 4
 1  2  3  4 
 5  6  0  8 
 9 10  7 12 
13 14 11 15 
8: 2 - 4
 1  2  3  4 
 5  6  7  8 
 9 10  0 12 
13 14 11 15 
9: 1 - 4
 1  2  3  4 
 5  6  7  8 
 9 10 11 12 
13 14  0 15 
  * puzzle10.txt
1: 10 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64  0 65 67 68 78 69 70 72 
73 74 66 75 76 77 79 71 80 
2: 9 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65  0 67 68 78 69 70 72 
73 74 66 75 76 77 79 71 80 
3: 8 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 78 69 70 72 
73 74  0 75 76 77 79 71 80 
4: 7 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 78 69 70 72 
73 74 75  0 76 77 79 71 80 
5: 6 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 78 69 70 72 
73 74 75 76  0 77 79 71 80 
6: 5 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 78 69 70 72 
73 74 75 76 77  0 79 71 80 
7: 4 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68  0 69 70 72 
73 74 75 76 77 78 79 71 80 
8: 3 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 69  0 70 72 
73 74 75 76 77 78 79 71 80 
9: 2 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 69 70  0 72 
73 74 75 76 77 78 79 71 80 
10: 1 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 69 70 71 72 
73 74 75 76 77 78 79  0 80 
  * puzzle11.txt
1: 9 - 3
 1  0  2 
 7  5  4 
 8  6  3 
2: 8 - 3
 1  2  0 
 7  5  4 
 8  6  3 
3: 9 - 3
 1  2  4 
 7  5  0 
 8  6  3 
4: 8 - 3
 1  2  4 
 7  5  3 
 8  6  0 
5: 7 - 3
 1  2  4 
 7  5  3 
 8  0  6 
6: 6 - 3
 1  2  4 
 7  5  3 
 0  8  6 
7: 5 - 3
 1  2  4 
 0  5  3 
 7  8  6 
2: 10 - 3
 0  1  2 
 7  5  4 
 8  6  3 
2: 10 - 3
 1  5  2 
 7  0  4 
 8  6  3 
3: 9 - 3
 1  5  2 
 7  4  0 
 8  6  3 
4: 8 - 3
 1  5  2 
 7  4  3 
 8  6  0 
5: 7 - 3
 1  5  2 
 7  4  3 
 8  0  6 
6: 6 - 3
 1  5  2 
 7  4  3 
 0  8  6 
7: 5 - 3
 1  5  2 
 0  4  3 
 7  8  6 
8: 4 - 3
 1  5  2 
 4  0  3 
 7  8  6 
9: 3 - 3
 1  0  2 
 4  5  3 
 7  8  6 
10: 2 - 3
 1  2  0 
 4  5  3 
 7  8  6 
11: 1 - 3
 1  2  3 
 4  5  0 
 7  8  6 
  * puzzle12.txt
1: 12 - 5
 1  2  3  4  5 
12  6  8  9 10 
 0  7 13 19 14 
11 16 17 18 15 
21 22 23 24 20 
2: 11 - 5
 1  2  3  4  5 
 0  6  8  9 10 
12  7 13 19 14 
11 16 17 18 15 
21 22 23 24 20 
3: 10 - 5
 1  2  3  4  5 
 6  0  8  9 10 
12  7 13 19 14 
11 16 17 18 15 
21 22 23 24 20 
4: 9 - 5
 1  2  3  4  5 
 6  7  8  9 10 
12  0 13 19 14 
11 16 17 18 15 
21 22 23 24 20 
5: 8 - 5
 1  2  3  4  5 
 6  7  8  9 10 
 0 12 13 19 14 
11 16 17 18 15 
21 22 23 24 20 
6: 7 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13 19 14 
 0 16 17 18 15 
21 22 23 24 20 
7: 6 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13 19 14 
16  0 17 18 15 
21 22 23 24 20 
8: 5 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13 19 14 
16 17  0 18 15 
21 22 23 24 20 
9: 4 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13 19 14 
16 17 18  0 15 
21 22 23 24 20 
10: 3 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13  0 14 
16 17 18 19 15 
21 22 23 24 20 
11: 2 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13 14  0 
16 17 18 19 15 
21 22 23 24 20 
12: 1 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13 14 15 
16 17 18 19  0 
21 22 23 24 20 
  * puzzle13.txt
1: 13 - 4
 2  3  4  8 
 1  6  0 12 
 5 10  7 11 
 9 13 14 15 
2: 12 - 4
 2  3  4  8 
 1  6  7 12 
 5 10  0 11 
 9 13 14 15 
3: 11 - 4
 2  3  4  8 
 1  6  7 12 
 5 10 11  0 
 9 13 14 15 
4: 10 - 4
 2  3  4  8 
 1  6  7  0 
 5 10 11 12 
 9 13 14 15 
5: 9 - 4
 2  3  4  0 
 1  6  7  8 
 5 10 11 12 
 9 13 14 15 
6: 8 - 4
 2  3  0  4 
 1  6  7  8 
 5 10 11 12 
 9 13 14 15 
7: 7 - 4
 2  0  3  4 
 1  6  7  8 
 5 10 11 12 
 9 13 14 15 
8: 6 - 4
 0  2  3  4 
 1  6  7  8 
 5 10 11 12 
 9 13 14 15 
9: 5 - 4
 1  2  3  4 
 0  6  7  8 
 5 10 11 12 
 9 13 14 15 
10: 4 - 4
 1  2  3  4 
 5  6  7  8 
 0 10 11 12 
 9 13 14 15 
11: 3 - 4
 1  2  3  4 
 5  6  7  8 
 9 10 11 12 
 0 13 14 15 
12: 2 - 4
 1  2  3  4 
 5  6  7  8 
 9 10 11 12 
13  0 14 15 
13: 1 - 4
 1  2  3  4 
 5  6  7  8 
 9 10 11 12 
13 14  0 15 
==> passed

Test 1b: check solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
1: 1 - 2
 1  0 
 3  2 
1: 1 - 2
 1  0 
 3  2 
    - wrong initial board
    - student   solution() initial board =
        2
         1  2 
         3  0 
    - reference solution() initial board =
        2
         1  0 
         3  2 

  * puzzle02.txt
1: 2 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 69 70  0 71 
73 74 75 76 77 78 79 80 72 
2: 1 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 69 70 71  0 
73 74 75 76 77 78 79 80 72 
1: 2 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 69 70  0 71 
73 74 75 76 77 78 79 80 72 
2: 1 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 69 70 71  0 
73 74 75 76 77 78 79 80 72 
    - wrong initial board
    - student   solution() initial board =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64 65 66 67 68 69 70 71 72 
        73 74 75 76 77 78 79 80  0 
    - reference solution() initial board =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64 65 66 67 68 69 70  0 71 
        73 74 75 76 77 78 79 80 72 

  * puzzle03.txt
1: 3 - 2
 2  0 
 1  3 
2: 2 - 2
 0  2 
 1  3 
3: 1 - 2
 1  2 
 0  3 
1: 3 - 2
 2  0 
 1  3 
2: 2 - 2
 0  2 
 1  3 
3: 1 - 2
 1  2 
 0  3 
    - wrong initial board
    - student   solution() initial board =
        2
         1  2 
         3  0 
    - reference solution() initial board =
        2
         2  0 
         1  3 

  * puzzle04.txt
1: 4 - 3
 0  1  3 
 4  2  5 
 7  8  6 
2: 3 - 3
 1  0  3 
 4  2  5 
 7  8  6 
3: 2 - 3
 1  2  3 
 4  0  5 
 7  8  6 
4: 1 - 3
 1  2  3 
 4  5  0 
 7  8  6 
1: 4 - 3
 0  1  3 
 4  2  5 
 7  8  6 
2: 3 - 3
 1  0  3 
 4  2  5 
 7  8  6 
3: 2 - 3
 1  2  3 
 4  0  5 
 7  8  6 
4: 1 - 3
 1  2  3 
 4  5  0 
 7  8  6 
    - wrong initial board
    - student   solution() initial board =
        3
         1  2  3 
         4  5  6 
         7  8  0 
    - reference solution() initial board =
        3
         0  1  3 
         4  2  5 
         7  8  6 

  * puzzle05.txt
1: 5 - 3
 4  1  3 
 0  2  6 
 7  5  8 
2: 4 - 3
 0  1  3 
 4  2  6 
 7  5  8 
3: 3 - 3
 1  0  3 
 4  2  6 
 7  5  8 
4: 2 - 3
 1  2  3 
 4  0  6 
 7  5  8 
5: 1 - 3
 1  2  3 
 4  5  6 
 7  0  8 
1: 5 - 3
 4  1  3 
 0  2  6 
 7  5  8 
2: 4 - 3
 0  1  3 
 4  2  6 
 7  5  8 
3: 3 - 3
 1  0  3 
 4  2  6 
 7  5  8 
4: 2 - 3
 1  2  3 
 4  0  6 
 7  5  8 
5: 1 - 3
 1  2  3 
 4  5  6 
 7  0  8 
    - wrong initial board
    - student   solution() initial board =
        3
         1  2  3 
         4  5  6 
         7  8  0 
    - reference solution() initial board =
        3
         4  1  3 
         0  2  6 
         7  5  8 

  * puzzle06.txt
1: 6 - 4
 0  1  2  3 
 5  6  7  4 
 9 10 11  8 
13 14 15 12 
2: 5 - 4
 1  0  2  3 
 5  6  7  4 
 9 10 11  8 
13 14 15 12 
3: 4 - 4
 1  2  0  3 
 5  6  7  4 
 9 10 11  8 
13 14 15 12 
4: 3 - 4
 1  2  3  0 
 5  6  7  4 
 9 10 11  8 
13 14 15 12 
5: 2 - 4
 1  2  3  4 
 5  6  7  0 
 9 10 11  8 
13 14 15 12 
6: 1 - 4
 1  2  3  4 
 5  6  7  8 
 9 10 11  0 
13 14 15 12 
1: 6 - 4
 0  1  2  3 
 5  6  7  4 
 9 10 11  8 
13 14 15 12 
2: 5 - 4
 1  0  2  3 
 5  6  7  4 
 9 10 11  8 
13 14 15 12 
3: 4 - 4
 1  2  0  3 
 5  6  7  4 
 9 10 11  8 
13 14 15 12 
4: 3 - 4
 1  2  3  0 
 5  6  7  4 
 9 10 11  8 
13 14 15 12 
5: 2 - 4
 1  2  3  4 
 5  6  7  0 
 9 10 11  8 
13 14 15 12 
6: 1 - 4
 1  2  3  4 
 5  6  7  8 
 9 10 11  0 
13 14 15 12 
    - wrong initial board
    - student   solution() initial board =
        4
         1  2  3  4 
         5  6  7  8 
         9 10 11 12 
        13 14 15  0 
    - reference solution() initial board =
        4
         0  1  2  3 
         5  6  7  4 
         9 10 11  8 
        13 14 15 12 

  * puzzle07.txt
1: 7 - 3
 1  2  3 
 0  7  6 
 5  4  8 
2: 6 - 3
 1  2  3 
 7  0  6 
 5  4  8 
3: 5 - 3
 1  2  3 
 7  4  6 
 5  0  8 
4: 4 - 3
 1  2  3 
 7  4  6 
 0  5  8 
5: 3 - 3
 1  2  3 
 0  4  6 
 7  5  8 
6: 2 - 3
 1  2  3 
 4  0  6 
 7  5  8 
7: 1 - 3
 1  2  3 
 4  5  6 
 7  0  8 
1: 7 - 3
 1  2  3 
 0  7  6 
 5  4  8 
2: 6 - 3
 1  2  3 
 7  0  6 
 5  4  8 
3: 5 - 3
 1  2  3 
 7  4  6 
 5  0  8 
4: 4 - 3
 1  2  3 
 7  4  6 
 0  5  8 
5: 3 - 3
 1  2  3 
 0  4  6 
 7  5  8 
6: 2 - 3
 1  2  3 
 4  0  6 
 7  5  8 
7: 1 - 3
 1  2  3 
 4  5  6 
 7  0  8 
    - wrong initial board
    - student   solution() initial board =
        3
         1  2  3 
         4  5  6 
         7  8  0 
    - reference solution() initial board =
        3
         1  2  3 
         0  7  6 
         5  4  8 

  * puzzle08.txt
1: 8 - 3
 2  3  5 
 1  0  4 
 7  8  6 
2: 7 - 3
 2  3  5 
 1  4  0 
 7  8  6 
3: 6 - 3
 2  3  0 
 1  4  5 
 7  8  6 
4: 5 - 3
 2  0  3 
 1  4  5 
 7  8  6 
5: 4 - 3
 0  2  3 
 1  4  5 
 7  8  6 
6: 3 - 3
 1  2  3 
 0  4  5 
 7  8  6 
7: 2 - 3
 1  2  3 
 4  0  5 
 7  8  6 
8: 1 - 3
 1  2  3 
 4  5  0 
 7  8  6 
1: 8 - 3
 2  3  5 
 1  0  4 
 7  8  6 
2: 7 - 3
 2  3  5 
 1  4  0 
 7  8  6 
3: 6 - 3
 2  3  0 
 1  4  5 
 7  8  6 
4: 5 - 3
 2  0  3 
 1  4  5 
 7  8  6 
5: 4 - 3
 0  2  3 
 1  4  5 
 7  8  6 
6: 3 - 3
 1  2  3 
 0  4  5 
 7  8  6 
7: 2 - 3
 1  2  3 
 4  0  5 
 7  8  6 
8: 1 - 3
 1  2  3 
 4  5  0 
 7  8  6 
    - wrong initial board
    - student   solution() initial board =
        3
         1  2  3 
         4  5  6 
         7  8  0 
    - reference solution() initial board =
        3
         2  3  5 
         1  0  4 
         7  8  6 

  * puzzle09.txt
1: 9 - 4
 2  0  3  4 
 1 10  6  8 
 5  9  7 12 
13 14 11 15 
2: 8 - 4
 0  2  3  4 
 1 10  6  8 
 5  9  7 12 
13 14 11 15 
3: 7 - 4
 1  2  3  4 
 0 10  6  8 
 5  9  7 12 
13 14 11 15 
4: 6 - 4
 1  2  3  4 
 5 10  6  8 
 0  9  7 12 
13 14 11 15 
5: 5 - 4
 1  2  3  4 
 5 10  6  8 
 9  0  7 12 
13 14 11 15 
6: 4 - 4
 1  2  3  4 
 5  0  6  8 
 9 10  7 12 
13 14 11 15 
7: 3 - 4
 1  2  3  4 
 5  6  0  8 
 9 10  7 12 
13 14 11 15 
8: 2 - 4
 1  2  3  4 
 5  6  7  8 
 9 10  0 12 
13 14 11 15 
9: 1 - 4
 1  2  3  4 
 5  6  7  8 
 9 10 11 12 
13 14  0 15 
1: 9 - 4
 2  0  3  4 
 1 10  6  8 
 5  9  7 12 
13 14 11 15 
2: 8 - 4
 0  2  3  4 
 1 10  6  8 
 5  9  7 12 
13 14 11 15 
3: 7 - 4
 1  2  3  4 
 0 10  6  8 
 5  9  7 12 
13 14 11 15 
4: 6 - 4
 1  2  3  4 
 5 10  6  8 
 0  9  7 12 
13 14 11 15 
5: 5 - 4
 1  2  3  4 
 5 10  6  8 
 9  0  7 12 
13 14 11 15 
6: 4 - 4
 1  2  3  4 
 5  0  6  8 
 9 10  7 12 
13 14 11 15 
7: 3 - 4
 1  2  3  4 
 5  6  0  8 
 9 10  7 12 
13 14 11 15 
8: 2 - 4
 1  2  3  4 
 5  6  7  8 
 9 10  0 12 
13 14 11 15 
9: 1 - 4
 1  2  3  4 
 5  6  7  8 
 9 10 11 12 
13 14  0 15 
    - wrong initial board
    - student   solution() initial board =
        4
         1  2  3  4 
         5  6  7  8 
         9 10 11 12 
        13 14 15  0 
    - reference solution() initial board =
        4
         2  0  3  4 
         1 10  6  8 
         5  9  7 12 
        13 14 11 15 

  * puzzle10.txt
1: 10 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64  0 65 67 68 78 69 70 72 
73 74 66 75 76 77 79 71 80 
2: 9 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65  0 67 68 78 69 70 72 
73 74 66 75 76 77 79 71 80 
3: 8 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 78 69 70 72 
73 74  0 75 76 77 79 71 80 
4: 7 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 78 69 70 72 
73 74 75  0 76 77 79 71 80 
5: 6 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 78 69 70 72 
73 74 75 76  0 77 79 71 80 
6: 5 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 78 69 70 72 
73 74 75 76 77  0 79 71 80 
7: 4 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68  0 69 70 72 
73 74 75 76 77 78 79 71 80 
8: 3 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 69  0 70 72 
73 74 75 76 77 78 79 71 80 
9: 2 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 69 70  0 72 
73 74 75 76 77 78 79 71 80 
10: 1 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 69 70 71 72 
73 74 75 76 77 78 79  0 80 
1: 10 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64  0 65 67 68 78 69 70 72 
73 74 66 75 76 77 79 71 80 
2: 9 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65  0 67 68 78 69 70 72 
73 74 66 75 76 77 79 71 80 
3: 8 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 78 69 70 72 
73 74  0 75 76 77 79 71 80 
4: 7 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 78 69 70 72 
73 74 75  0 76 77 79 71 80 
5: 6 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 78 69 70 72 
73 74 75 76  0 77 79 71 80 
6: 5 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 78 69 70 72 
73 74 75 76 77  0 79 71 80 
7: 4 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68  0 69 70 72 
73 74 75 76 77 78 79 71 80 
8: 3 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 69  0 70 72 
73 74 75 76 77 78 79 71 80 
9: 2 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 69 70  0 72 
73 74 75 76 77 78 79 71 80 
10: 1 - 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 69 70 71 72 
73 74 75 76 77 78 79  0 80 
    - wrong initial board
    - student   solution() initial board =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64 65 66 67 68 69 70 71 72 
        73 74 75 76 77 78 79 80  0 
    - reference solution() initial board =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64  0 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

  * puzzle11.txt
1: 9 - 3
 1  0  2 
 7  5  4 
 8  6  3 
2: 8 - 3
 1  2  0 
 7  5  4 
 8  6  3 
3: 9 - 3
 1  2  4 
 7  5  0 
 8  6  3 
4: 8 - 3
 1  2  4 
 7  5  3 
 8  6  0 
5: 7 - 3
 1  2  4 
 7  5  3 
 8  0  6 
6: 6 - 3
 1  2  4 
 7  5  3 
 0  8  6 
7: 5 - 3
 1  2  4 
 0  5  3 
 7  8  6 
2: 10 - 3
 0  1  2 
 7  5  4 
 8  6  3 
2: 10 - 3
 1  5  2 
 7  0  4 
 8  6  3 
3: 9 - 3
 1  5  2 
 7  4  0 
 8  6  3 
4: 8 - 3
 1  5  2 
 7  4  3 
 8  6  0 
5: 7 - 3
 1  5  2 
 7  4  3 
 8  0  6 
6: 6 - 3
 1  5  2 
 7  4  3 
 0  8  6 
7: 5 - 3
 1  5  2 
 0  4  3 
 7  8  6 
8: 4 - 3
 1  5  2 
 4  0  3 
 7  8  6 
9: 3 - 3
 1  0  2 
 4  5  3 
 7  8  6 
10: 2 - 3
 1  2  0 
 4  5  3 
 7  8  6 
11: 1 - 3
 1  2  3 
 4  5  0 
 7  8  6 
1: 9 - 3
 1  0  2 
 7  5  4 
 8  6  3 
2: 8 - 3
 1  2  0 
 7  5  4 
 8  6  3 
3: 9 - 3
 1  2  4 
 7  5  0 
 8  6  3 
4: 8 - 3
 1  2  4 
 7  5  3 
 8  6  0 
5: 7 - 3
 1  2  4 
 7  5  3 
 8  0  6 
6: 6 - 3
 1  2  4 
 7  5  3 
 0  8  6 
7: 5 - 3
 1  2  4 
 0  5  3 
 7  8  6 
2: 10 - 3
 0  1  2 
 7  5  4 
 8  6  3 
2: 10 - 3
 1  5  2 
 7  0  4 
 8  6  3 
3: 9 - 3
 1  5  2 
 7  4  0 
 8  6  3 
4: 8 - 3
 1  5  2 
 7  4  3 
 8  6  0 
5: 7 - 3
 1  5  2 
 7  4  3 
 8  0  6 
6: 6 - 3
 1  5  2 
 7  4  3 
 0  8  6 
7: 5 - 3
 1  5  2 
 0  4  3 
 7  8  6 
8: 4 - 3
 1  5  2 
 4  0  3 
 7  8  6 
9: 3 - 3
 1  0  2 
 4  5  3 
 7  8  6 
10: 2 - 3
 1  2  0 
 4  5  3 
 7  8  6 
11: 1 - 3
 1  2  3 
 4  5  0 
 7  8  6 
    - wrong initial board
    - student   solution() initial board =
        3
         1  2  3 
         4  5  6 
         7  8  0 
    - reference solution() initial board =
        3
         1  0  2 
         7  5  4 
         8  6  3 

  * puzzle12.txt
1: 12 - 5
 1  2  3  4  5 
12  6  8  9 10 
 0  7 13 19 14 
11 16 17 18 15 
21 22 23 24 20 
2: 11 - 5
 1  2  3  4  5 
 0  6  8  9 10 
12  7 13 19 14 
11 16 17 18 15 
21 22 23 24 20 
3: 10 - 5
 1  2  3  4  5 
 6  0  8  9 10 
12  7 13 19 14 
11 16 17 18 15 
21 22 23 24 20 
4: 9 - 5
 1  2  3  4  5 
 6  7  8  9 10 
12  0 13 19 14 
11 16 17 18 15 
21 22 23 24 20 
5: 8 - 5
 1  2  3  4  5 
 6  7  8  9 10 
 0 12 13 19 14 
11 16 17 18 15 
21 22 23 24 20 
6: 7 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13 19 14 
 0 16 17 18 15 
21 22 23 24 20 
7: 6 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13 19 14 
16  0 17 18 15 
21 22 23 24 20 
8: 5 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13 19 14 
16 17  0 18 15 
21 22 23 24 20 
9: 4 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13 19 14 
16 17 18  0 15 
21 22 23 24 20 
10: 3 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13  0 14 
16 17 18 19 15 
21 22 23 24 20 
11: 2 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13 14  0 
16 17 18 19 15 
21 22 23 24 20 
12: 1 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13 14 15 
16 17 18 19  0 
21 22 23 24 20 
1: 12 - 5
 1  2  3  4  5 
12  6  8  9 10 
 0  7 13 19 14 
11 16 17 18 15 
21 22 23 24 20 
2: 11 - 5
 1  2  3  4  5 
 0  6  8  9 10 
12  7 13 19 14 
11 16 17 18 15 
21 22 23 24 20 
3: 10 - 5
 1  2  3  4  5 
 6  0  8  9 10 
12  7 13 19 14 
11 16 17 18 15 
21 22 23 24 20 
4: 9 - 5
 1  2  3  4  5 
 6  7  8  9 10 
12  0 13 19 14 
11 16 17 18 15 
21 22 23 24 20 
5: 8 - 5
 1  2  3  4  5 
 6  7  8  9 10 
 0 12 13 19 14 
11 16 17 18 15 
21 22 23 24 20 
6: 7 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13 19 14 
 0 16 17 18 15 
21 22 23 24 20 
7: 6 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13 19 14 
16  0 17 18 15 
21 22 23 24 20 
8: 5 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13 19 14 
16 17  0 18 15 
21 22 23 24 20 
9: 4 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13 19 14 
16 17 18  0 15 
21 22 23 24 20 
10: 3 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13  0 14 
16 17 18 19 15 
21 22 23 24 20 
11: 2 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13 14  0 
16 17 18 19 15 
21 22 23 24 20 
12: 1 - 5
 1  2  3  4  5 
 6  7  8  9 10 
11 12 13 14 15 
16 17 18 19  0 
21 22 23 24 20 
    - wrong initial board
    - student   solution() initial board =
        5
         1  2  3  4  5 
         6  7  8  9 10 
        11 12 13 14 15 
        16 17 18 19 20 
        21 22 23 24  0 
    - reference solution() initial board =
        5
         1  2  3  4  5 
        12  6  8  9 10 
         0  7 13 19 14 
        11 16 17 18 15 
        21 22 23 24 20 

  * puzzle13.txt
1: 13 - 4
 2  3  4  8 
 1  6  0 12 
 5 10  7 11 
 9 13 14 15 
2: 12 - 4
 2  3  4  8 
 1  6  7 12 
 5 10  0 11 
 9 13 14 15 
3: 11 - 4
 2  3  4  8 
 1  6  7 12 
 5 10 11  0 
 9 13 14 15 
4: 10 - 4
 2  3  4  8 
 1  6  7  0 
 5 10 11 12 
 9 13 14 15 
5: 9 - 4
 2  3  4  0 
 1  6  7  8 
 5 10 11 12 
 9 13 14 15 
6: 8 - 4
 2  3  0  4 
 1  6  7  8 
 5 10 11 12 
 9 13 14 15 
7: 7 - 4
 2  0  3  4 
 1  6  7  8 
 5 10 11 12 
 9 13 14 15 
8: 6 - 4
 0  2  3  4 
 1  6  7  8 
 5 10 11 12 
 9 13 14 15 
9: 5 - 4
 1  2  3  4 
 0  6  7  8 
 5 10 11 12 
 9 13 14 15 
10: 4 - 4
 1  2  3  4 
 5  6  7  8 
 0 10 11 12 
 9 13 14 15 
11: 3 - 4
 1  2  3  4 
 5  6  7  8 
 9 10 11 12 
 0 13 14 15 
12: 2 - 4
 1  2  3  4 
 5  6  7  8 
 9 10 11 12 
13  0 14 15 
13: 1 - 4
 1  2  3  4 
 5  6  7  8 
 9 10 11 12 
13 14  0 15 
1: 13 - 4
 2  3  4  8 
 1  6  0 12 
 5 10  7 11 
 9 13 14 15 
2: 12 - 4
 2  3  4  8 
 1  6  7 12 
 5 10  0 11 
 9 13 14 15 
3: 11 - 4
 2  3  4  8 
 1  6  7 12 
 5 10 11  0 
 9 13 14 15 
4: 10 - 4
 2  3  4  8 
 1  6  7  0 
 5 10 11 12 
 9 13 14 15 
5: 9 - 4
 2  3  4  0 
 1  6  7  8 
 5 10 11 12 
 9 13 14 15 
6: 8 - 4
 2  3  0  4 
 1  6  7  8 
 5 10 11 12 
 9 13 14 15 
7: 7 - 4
 2  0  3  4 
 1  6  7  8 
 5 10 11 12 
 9 13 14 15 
8: 6 - 4
 0  2  3  4 
 1  6  7  8 
 5 10 11 12 
 9 13 14 15 
9: 5 - 4
 1  2  3  4 
 0  6  7  8 
 5 10 11 12 
 9 13 14 15 
10: 4 - 4
 1  2  3  4 
 5  6  7  8 
 0 10 11 12 
 9 13 14 15 
11: 3 - 4
 1  2  3  4 
 5  6  7  8 
 9 10 11 12 
 0 13 14 15 
12: 2 - 4
 1  2  3  4 
 5  6  7  8 
 9 10 11 12 
13  0 14 15 
13: 1 - 4
 1  2  3  4 
 5  6  7  8 
 9 10 11 12 
13 14  0 15 
    - wrong initial board
    - student   solution() initial board =
        4
         1  2  3  4 
         5  6  7  8 
         9 10 11 12 
        13 14 15  0 
    - reference solution() initial board =
        4
         2  3  4  8 
         1  6  0 12 
         5 10  7 11 
         9 13 14 15 

==> FAILED

Test 2a: check moves() with more file inputs
  * puzzle14.txt
1: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32  0 33 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
2: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33  0 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34  0 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
4: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41  0 
43 44 45 46 47 48 42 
5: 4 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47 48  0 
6: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47  0 48 
2: 9 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 40 33 34 
36 37 38 39  0 41 35 
43 44 45 46 47 48 42 
2: 9 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25  0 27 28 
29 30 31 32 26 33 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
2: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33  0 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34  0 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
4: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41  0 
43 44 45 46 47 48 42 
5: 4 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47 48  0 
6: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47  0 48 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26  0 28 
29 30 31 32 33 27 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
2: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33  0 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34  0 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
4: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41  0 
43 44 45 46 47 48 42 
5: 4 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47 48  0 
6: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47  0 48 
5: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40  0 41 
43 44 45 46 47 48 42 
4: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27  0 
29 30 31 32 33 34 28 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26  0 28 
29 30 31 32 33 27 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 41 34 
36 37 38 39 40  0 35 
43 44 45 46 47 48 42 
2: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33  0 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34  0 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
4: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41  0 
43 44 45 46 47 48 42 
5: 4 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47 48  0 
6: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47  0 48 
5: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40  0 41 
43 44 45 46 47 48 42 
4: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27  0 
29 30 31 32 33 34 28 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26  0 28 
29 30 31 32 33 27 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 41 34 
36 37 38 39 40  0 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 41 34 
36 37 38 39 40  0 35 
43 44 45 46 47 48 42 
2: 9 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31  0 32 33 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
2: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33  0 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34  0 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
4: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41  0 
43 44 45 46 47 48 42 
5: 4 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47 48  0 
6: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47  0 48 
5: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40  0 41 
43 44 45 46 47 48 42 
4: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27  0 
29 30 31 32 33 34 28 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26  0 28 
29 30 31 32 33 27 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 41 34 
36 37 38 39 40  0 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26  0 28 
29 30 31 32 33 27 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
2: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33  0 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34  0 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
4: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41  0 
43 44 45 46 47 48 42 
5: 4 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47 48  0 
6: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47  0 48 
5: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40  0 41 
43 44 45 46 47 48 42 
4: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27  0 
29 30 31 32 33 34 28 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 41 34 
36 37 38 39 40  0 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26  0 28 
29 30 31 32 33 27 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
4: 9 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19  0 21 
22 23 24 25 26 20 28 
29 30 31 32 33 27 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
4: 9 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25  0 26 28 
29 30 31 32 33 27 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
4: 9 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 28  0 
29 30 31 32 33 27 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
2: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33  0 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34  0 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
4: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41  0 
43 44 45 46 47 48 42 
5: 4 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47 48  0 
6: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47  0 48 
5: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40  0 41 
43 44 45 46 47 48 42 
4: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27  0 
29 30 31 32 33 34 28 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26  0 28 
29 30 31 32 33 27 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 41 34 
36 37 38 39 40  0 35 
43 44 45 46 47 48 42 
4: 9 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 41 34 
36 37 38 39  0 40 35 
43 44 45 46 47 48 42 
2: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33  0 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34  0 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
4: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41  0 
43 44 45 46 47 48 42 
5: 4 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47 48  0 
6: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47  0 48 
5: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40  0 41 
43 44 45 46 47 48 42 
4: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27  0 
29 30 31 32 33 34 28 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26  0 28 
29 30 31 32 33 27 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 41 34 
36 37 38 39 40  0 35 
43 44 45 46 47 48 42 
4: 9 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 41 34 
36 37 38 39  0 40 35 
43 44 45 46 47 48 42 
4: 9 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 41 34 
36 37 38 39 40 35  0 
43 44 45 46 47 48 42 
5: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 41 34 
36 37 38 39 40 35 42 
43 44 45 46 47 48  0 
2: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33  0 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34  0 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
4: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41  0 
43 44 45 46 47 48 42 
5: 4 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47 48  0 
6: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47  0 48 
5: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40  0 41 
43 44 45 46 47 48 42 
4: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27  0 
29 30 31 32 33 34 28 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26  0 28 
29 30 31 32 33 27 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 41 34 
36 37 38 39 40  0 35 
43 44 45 46 47 48 42 
4: 9 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 41 34 
36 37 38 39  0 40 35 
43 44 45 46 47 48 42 
4: 9 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 41 34 
36 37 38 39 40 35  0 
43 44 45 46 47 48 42 
5: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 41 34 
36 37 38 39 40 35 42 
43 44 45 46 47 48  0 
4: 9 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 41 34 
36 37 38 39 40 48 35 
43 44 45 46 47  0 42 
2: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33  0 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34  0 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
4: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41  0 
43 44 45 46 47 48 42 
5: 4 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47 48  0 
6: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47  0 48 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26  0 28 
29 30 31 32 33 27 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 41 34 
36 37 38 39 40  0 35 
43 44 45 46 47 48 42 
2: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33  0 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34  0 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
4: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41  0 
43 44 45 46 47 48 42 
5: 4 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47 48  0 
6: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47  0 48 
5: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40  0 41 
43 44 45 46 47 48 42 
4: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27  0 
29 30 31 32 33 34 28 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26  0 28 
29 30 31 32 33 27 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 8 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 41 34 
36 37 38 39 40  0 35 
43 44 45 46 47 48 42 
2: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33  0 34 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
3: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34  0 
36 37 38 39 40 41 35 
43 44 45 46 47 48 42 
4: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41  0 
43 44 45 46 47 48 42 
5: 4 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47 48  0 
6: 5 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40 41 42 
43 44 45 46 47  0 48 
5: 6 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 
36 37 38 39 40  0 41 
43 44 45 46 47 48 42 
4: 7 - 7
 1  2  3  4  5  7 14 
 8  9 10 11 12 13  6 
15 16 17 18 19 20 21 
22 23 24 25 26 27  0 
29 30 31 32 33 34 28 
36 37 38 39 40 41 35 
43 4

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.