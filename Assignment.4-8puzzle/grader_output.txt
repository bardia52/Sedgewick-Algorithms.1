See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 2 warnings)
API:          PASSED

Spotbugs:     FAILED (3 warnings)
PMD:          FAILED (6 warnings)
Checkstyle:   FAILED (0 errors, 7 warnings)

Correctness:  14/49 tests passed
Memory:       22/22 tests passed
Timing:       25/125 tests passed

Aggregate score: 36.14%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
5.2K Aug 21 04:49 Board.java
2.0K Aug 21 04:49 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------
Solver.java:18: warning: [rawtypes] found raw type: MinPQ
    private final MinPQ<SearchNode> minPQ = new MinPQ();
                                                ^
  missing type arguments for generic class MinPQ<Key>
  where Key is a type-variable:
    Key extends Object declared in class MinPQ
Solver.java:18: warning: [unchecked] unchecked conversion
    private final MinPQ<SearchNode> minPQ = new MinPQ();
                                            ^
  required: MinPQ<SearchNode>
  found:    MinPQ
2 warnings


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
H C EQ_ALWAYS_TRUE Eq: The 'equals()' method always returns true.  At Board.java:[line 120]
L P URF_UNREAD_FIELD UrF: The instance (or static) variable 'previous' is never read. Consider removing it from the class.  At Solver.java:[line 52]
L P URF_UNREAD_FIELD UrF: The instance (or static) variable 'current' is never read. Consider removing it from the class.  At Solver.java:[line 53]
Warnings generated: 3


================================================================


% pmd .
*-----------------------------------------------------------
Board.java:19: The private instance (or static) variable 'hammingScore' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:20: The private instance (or static) variable 'manhattanScore' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:47: Avoid unused private instance (or static) variables, such as 'previous'. [UnusedPrivateField]
Solver.java:47: Can you replace the instance (or static) variable 'previous' with a local variable? [SingularField]
Solver.java:48: Avoid unused private instance (or static) variables, such as 'current'. [UnusedPrivateField]
Solver.java:48: Can you replace the instance (or static) variable 'current' with a local variable? [SingularField]
PMD ends with 6 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Board.java:98:9: Conditional logic can be removed. [SimplifyBooleanReturn]
[WARN] Solver.java:12:1: Your program defines 3 outer types, but there should be only 1. [OuterTypeNumber]
[WARN] Solver.java:45: The .java file must have exactly one top-level class. [OneTopLevelClass]
[WARN] Solver.java:61: The .java file must have exactly one top-level class. [OneTopLevelClass]
Checkstyle ends with 0 errors and 4 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:12: You should use 'isGoal()' to check whether a board is the goal board. [MethodCallCount]
[WARN] Solver.java:12: You will need to call the 'equals()' method in Board in order to implement the critical optimization; do not use the '==' operator to compare Board objects. [Performance]
[WARN] Solver.java:18:19: Can you make the variable of type 'MinPQ' a local variable instead of an instance (or static) variable? [Design]
Checkstyle ends with 0 errors and 3 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 24 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        3
         0  1  3 
         4  2  5 
         7  8  6 


  * puzzle00.txt
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78 79 80 
        81 82 83 84 85 86 87 88 89 90 
        91 92 93 94 95 96 97 98 99  0 


  * puzzle06.txt
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        4
         0  1  2  3 
         5  6  7  4 
         9 10 11  8 
        13 14 15 12 


  * puzzle09.txt
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        4
         2  0  3  4 
         1 10  6  8 
         5  9  7 12 
        13 14 11 15 


  * puzzle23.txt
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        3
         5  0  4 
         2  3  8 
         7  1  6 


  * puzzle2x2-unsolvable1.txt
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        2
         1  0 
         2  3 


==> FAILED

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        2
         2  0 
         3  1 


    - failed on trial 1 of 1000

  * 3-by-3
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        3
         4  3  8 
         1  2  6 
         5  7  0 


    - failed on trial 1 of 1000

  * 4-by-4
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        4
         8  5  1 13 
        14  6 12  7 
        10 15  3  0 
         4  2  9 11 


    - failed on trial 1 of 1000

  * 5-by-5
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        5
         7  8 20 13 11 
        21 12 10 18 24 
        15 17 16  2 23 
        22 14  6  9  0 
        19  5  4  3  1 


    - failed on trial 1 of 1000

  * 9-by-9
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        9
        55 61 21 29 22 23 12 54 34 
        64 50 74 71 17 75 52 70 79 
         0  8 35 15 38 19 45 31 16 
        25 42 10 39 30 13 65 32  5 
        56 47  6 40 51 77  4 57 14 
        44 26 53 11 41 76 33 67 58 
        18 62 27 78 36 28  3 66  2 
        63 72 46  7 20 68 69  9 24 
        80 49 60 73 43 37  1 59 48 


    - failed on trial 1 of 100

  * 10-by-10
    - toString() returns wrong value
    - student toString()
        1

    - reference toString()
        10
        62 90 77 54  0 59 10 68 79 87 
         3 28 98 19 51 41 99 24 14 86 
        49 32 71 82 69 36 89 65 44 88 
        27 33 95 17 23 81 47 85 34 96 
        30  4  5 56 37 66  8  2 50 38 
        43 72 91 78 70 74 12 94 21 75 
        52 46 42 93 53 39 57  9 31 45 
        97 25 26 55  1 83 80 29 92  7 
        61 13 15 76 16 73 67 48 58 11 
        35 60 18 64  6 84 22 20 40 63 


    - failed on trial 1 of 100

  * 127-by-127
    - toString() returns wrong value

    - failed on trial 1 of 10

==> FAILED

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        3
         0  1  3 
         4  2  5 
         7  8  6 


  * puzzle00.txt
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78 79 80 
        81 82 83 84 85 86 87 88 89 90 
        91 92 93 94 95 96 97 98 99  0 


  * puzzle06.txt
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        4
         0  1  2  3 
         5  6  7  4 
         9 10 11  8 
        13 14 15 12 


  * puzzle09.txt
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 3
    - board
        4
         2  0  3  4 
         1 10  6  8 
         5  9  7 12 
        13 14 11 15 


  * puzzle23.txt
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 3
    - board
        3
         5  0  4 
         2  3  8 
         7  1  6 


  * puzzle2x2-unsolvable1.txt
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        2
         1  0 
         2  3 


==> FAILED

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        2
         1  3 
         2  0 


    - failed on trial 1 of 1000

  * 3-by-3
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 3
    - board
        3
         2  7  6 
         0  5  1 
         3  4  8 


    - failed on trial 1 of 1000

  * 4-by-4
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 2
    - board
        4
        10 15  7  0 
        13  1  5  3 
         8  4  6 14 
        11  2  9 12 


    - failed on trial 1 of 1000

  * 5-by-5
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 4
    - board
        5
        17  4  6 12 15 
         1 24  0 23  5 
        13  9  3 19 16 
        20 22 11 21  7 
        18 10  8  2 14 


    - failed on trial 1 of 1000

  * 9-by-9
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 3
    - board
        9
        53  0 46 75 63 79 27 22 19 
        37 13 41 32 30  4 47 42 76 
         5 20 18 40 57 68 69 21  9 
        64 29 67 16 72 70 54 24 34 
        25  2 52 66 78 61 31 28 71 
        39 51 73 59 23 65 48 15 60 
        10 55  8 50 38  6 62 17 44 
        35 11 43 58  3  1 56 49  7 
        80 12 45 36 77 74 26 14 33 


    - failed on trial 1 of 1000

  * 10-by-10
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 4
    - board
        10
        19 18 99 68 54 65 28 48 61 37 
        64 10 25 34 11 36 67 96  5 42 
        89 30  9 17 71 90  4 43 39 91 
        76 49 87  3 80 75 38  8 40 56 
        98 24 15 35 93 55 57 95 31 86 
        69 33 82 62 70 88 41 92 52 20 
        72 83 63 79 94  0 77 29 85 74 
        26  2 97 14 66 47 51 53 22 23 
        46 58 21 12 13 44 45  1 59 84 
         6 16  7 78 73 32 60 50 27 81 


    - failed on trial 1 of 1000

  * 127-by-127
    - incorrect number of neighbors
    - student   neighbors = 0
    - reference neighbors = 4

    - failed on trial 1 of 10

==> FAILED

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 6
    - board
        3
         0  1  3 
         4  2  5 
         7  8  6 


  * puzzle00.txt
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 6
    - board
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78 79 80 
        81 82 83 84 85 86 87 88 89 90 
        91 92 93 94 95 96 97 98 99  0 


  * puzzle06.txt
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 6
    - board
        4
         0  1  2  3 
         5  6  7  4 
         9 10 11  8 
        13 14 15 12 


  * puzzle09.txt
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 9
    - board
        4
         2  0  3  4 
         1 10  6  8 
         5  9  7 12 
        13 14 11 15 


  * puzzle23.txt
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 8
    - board
        3
         5  0  4 
         2  3  8 
         7  1  6 


  * puzzle2x2-unsolvable1.txt
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 4
    - board
        2
         1  0 
         2  3 


==> FAILED

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 4
    - board
        2
         3  1 
         0  2 


    - failed on trial 1 of 1000

  * 3-by-3
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 8
    - board
        3
         1  6  5 
         7  8  0 
         3  4  2 


    - failed on trial 1 of 1000

  * 4-by-4
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 6
    - board
        4
        12 15  7  4 
        11 14  3  5 
         9 13  1  6 
         0  2 10  8 


    - failed on trial 1 of 1000

  * 5-by-5
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 14
    - board
        5
         9 22 11 13 16 
        17  0  3  8 20 
        24 12  1 23 10 
        14 18  5 21  4 
         2  7  6 15 19 


    - failed on trial 1 of 1000

  * 9-by-9
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 16
    - board
        9
        18  4  8 15  1 57 59  5 53 
        32 30 80 69 41 17 60 37 19 
        24 78 16 31 36 77 13 58 52 
         9 50 74 34 73 26  0 35 63 
        38 39 49 70 61 75 11 42 45 
        65 22 68 12 46 14 72 55 27 
        40 23 10 21  6  7 43 66 20 
         2 33 25 47 56 51 54 44 62 
        29 67 79 64 71  3 76 48 28 


    - failed on trial 1 of 1000

  * 10-by-10
    - incorrect number of neighbors of neighbors
    - student   neighbors = 0
    - reference neighbors = 10
    - board
        10
         2 27 64  5 61 52 74 71 29 67 
        86  6 15 73 47 39 19  3 54 97 
        20 57 81 14 77 25 96 82 46 75 
        60 94 40 63 21 68 43 56 79 92 
        80 85 45 59 72 98 10 93 58  0 
        37 49 30 23 26 44 16 22  1 84 
         9 53 88 95 62 17 32 66  7 83 
        69 99 89 11 65 13 36 31 76 18 
        33 41 91 42 38  4 87 55 50  8 
        28 48 35 12 34 24 90 70 78 51 


    - failed on trial 1 of 1000

==> FAILED

Test 7a: check twin() with file inputs
  * puzzle04.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 3

  * puzzle00.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 10

  * puzzle06.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 4

  * puzzle09.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 4

  * puzzle23.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 3

  * puzzle2x2-unsolvable1.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 2

==> FAILED

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 2

    - failed on trial 1 of 1000

  * 3-by-3
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 3

    - failed on trial 1 of 1000

  * 4-by-4
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 4

    - failed on trial 1 of 1000

  * 5-by-5
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 5

    - failed on trial 1 of 1000

  * 9-by-9
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 9

    - failed on trial 1 of 100

  * 10-by-10
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 10

    - failed on trial 1 of 10

==> FAILED

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
    - equals() returns true when argument is null
    - equals() should return false
    - failed on trial 1 of 100000

  * argument is of type String
    - fails to return false when argument is of type String

  * Board object stored in a variable of type Object
==> FAILED

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
    - failed on trial 1 of 100
    - student   equals() = true
    - reference equals() = false
    - board1
        2
         2  0 
         3  1 
    - board2
        2
         3  0 
         1  2 

  * n = 3
    - failed on trial 1 of 1000
    - student   equals() = true
    - reference equals() = false
    - board1
        3
         1  7  5 
         0  3  2 
         6  8  4 
    - board2
        3
         7  2  6 
         5  8  1 
         4  0  3 

  * n = 4
    - failed on trial 3 of 1000
    - student   equals() = true
    - reference equals() = false
    - board1
        4
         3  2  7  8 
        11  0  1  5 
         4  6 12 13 
        15 14  9 10 
    - board2
        4
         1 13  6  5 
        10 14 15  3 
         7 11  9  0 
         8  4  2 12 

  * 5 <= n < 10
    - failed on trial 2 of 1000
    - student   equals() = true
    - reference equals() = false
    - board1
        9
        80 53  1 41 74 12 69 56 39 
        16 68 30 19 28 43 49 65 78 
        29 57 47 79 64 67 46 10 17 
        73 18 50 25  0 23 34 37 59 
        72  7 15 24 32 54 60 11 38 
        42 61 21 55 63 36 13  3 76 
         6 33 26 71 22 70  9 27 35 
        58 77  5 45 48 52 66 40  4 
        20  8 51 75 44 14 31 62  2 
    - board2
        9
        24 23 18 70 48 12 15 28 49 
        63 42 30 77 78 50  7  9 75 
         1 80 56 41 10 46 43 51 55 
        47 11 16  0 29 76 53 61 73 
        40 13 38 31 25 62 71 27 69 
        74  5 57 36 20  2 37 65 19 
        26 14 64  6 34 35 32 33 22 
        67  4 39 79 60 54 66  3 17 
        45 44 59  8 21 58 68 72 52 

==> FAILED

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
    - failed on trial 1 of 1000
    - student   equals() = true
    - reference equals() = false
    - board1
        4
         7 14  0  8 
         6 13 15 11 
         5  9  2  1 
        12 10  4  3 
    - board2
        5
         4 13 18 16 11 
        19 21  9  6  3 
        12 22 10 24  1 
         8  7 15  2 23 
        14 17 20  5  0 

  * m = 2, n = 5
    - failed on trial 1 of 1000
    - student   equals() = true
    - reference equals() = false
    - board1
        2
         3  0 
         2  1 
    - board2
        5
         8 19 18 15 11 
         5  1 17  3 12 
        23 24 14  2 10 
        22 16 20  9  0 
        13  6  7  4 21 

  * m = 5, n = 3
    - failed on trial 1 of 1000
    - student   equals() = true
    - reference equals() = false
    - board1
        5
         2  9 13 16 19 
         5 22 17 18  7 
        10 21  4 20  1 
         6 15 23 12  3 
         0 11  8 24 14 
    - board2
        3
         8  3  4 
         6  7  0 
         5  2  1 

  * m = 2, n = 3
    - failed on trial 1 of 10000
    - student   equals() = true
    - reference equals() = false
    - board1
        2
         1  3 
         2  0 
    - board2
        3
         3  0  7 
         6  1  5 
         4  2  8 

  * m = 3, n = 2
    - failed on trial 1 of 10000
    - student   equals() = true
    - reference equals() = false
    - board1
        3
         7  2  6 
         8  4  5 
         1  0  3 
    - board2
        2
         0  2 
         3  1 

==> FAILED

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check dimension() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:279)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:268)
    TestBoard.test13(TestBoard.java:1513)
    TestBoard.main(TestBoard.java:1576)

  * 2nd neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:279)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:268)
    TestBoard.test13(TestBoard.java:1514)
    TestBoard.main(TestBoard.java:1576)

  * 13th neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:279)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:268)
    TestBoard.test13(TestBoard.java:1515)
    TestBoard.main(TestBoard.java:1576)

  * 13th neighbor of puzzle00.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:279)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:268)
    TestBoard.test13(TestBoard.java:1516)
    TestBoard.main(TestBoard.java:1576)

  * 13th neighbor of puzzle2x2-unsolvable1.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:279)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:268)
    TestBoard.test13(TestBoard.java:1517)
    TestBoard.main(TestBoard.java:1576)

==> FAILED

Test 14: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 3

  * 1st neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:193)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:182)
    TestBoard.test14(TestBoard.java:1525)
    TestBoard.main(TestBoard.java:1577)

  * 2nd neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:193)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:182)
    TestBoard.test14(TestBoard.java:1526)
    TestBoard.main(TestBoard.java:1577)

  * 13th neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:193)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:182)
    TestBoard.test14(TestBoard.java:1527)
    TestBoard.main(TestBoard.java:1577)

  * 13th neighbor of puzzle00.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:193)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:182)
    TestBoard.test14(TestBoard.java:1528)
    TestBoard.main(TestBoard.java:1577)

  * 13th neighbor of puzzle2x2-unsolvable1.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:193)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:182)
    TestBoard.test14(TestBoard.java:1529)
    TestBoard.main(TestBoard.java:1577)

==> FAILED

Test 15: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
    - toString() returns string in wrong format
    - first integer in toString() = 1
    - dimension of board          = 3

  * 1st neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:364)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:351)
    TestBoard.test15(TestBoard.java:1537)
    TestBoard.main(TestBoard.java:1578)

  * 2nd neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:364)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:351)
    TestBoard.test15(TestBoard.java:1538)
    TestBoard.main(TestBoard.java:1578)

  * 13th neighbor of puzzle27.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:364)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:351)
    TestBoard.test15(TestBoard.java:1539)
    TestBoard.main(TestBoard.java:1578)

  * 13th neighbor of puzzle00.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:364)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:351)
    TestBoard.test15(TestBoard.java:1540)
    TestBoard.main(TestBoard.java:1578)

  * 13th neighbor of puzzle2x2-unsolvable1.txt
    java.lang.IllegalArgumentException: argument must be positive

    edu.princeton.cs.algs4.StdRandom.uniform(StdRandom.java:203)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:364)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:351)
    TestBoard.test15(TestBoard.java:1541)
    TestBoard.main(TestBoard.java:1578)

==> FAILED


Total: 10/24 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2           144                  128
=> passed     3           208                  192
=> passed     4           256                  240
=> passed     8           576                  560
=> passed    12          1024                 1008
=> passed    16          1600                 1584
=> passed    20          2304                 2288
=> passed    37          6872                 6856
=> passed    72         23104                23088
=> passed   120         61504                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 64.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 1
    - board =
        2
         1  0 
         3  2 

  * puzzle02.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 2
    - board =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64 65 66 67 68 69 70  0 71 
        73 74 75 76 77 78 79 80 72 

  * puzzle03.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 3
    - board =
        2
         2  0 
         1  3 

  * puzzle04.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 4
    - board =
        3
         0  1  3 
         4  2  5 
         7  8  6 

  * puzzle05.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 5
    - board =
        3
         4  1  3 
         0  2  6 
         7  5  8 

  * puzzle06.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 6
    - board =
        4
         0  1  2  3 
         5  6  7  4 
         9 10 11  8 
        13 14 15 12 

  * puzzle07.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 7
    - board =
        3
         1  2  3 
         0  7  6 
         5  4  8 

  * puzzle08.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 8
    - board =
        3
         2  3  5 
         1  0  4 
         7  8  6 

  * puzzle09.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 9
    - board =
        4
         2  0  3  4 
         1 10  6  8 
         5  9  7 12 
        13 14 11 15 

  * puzzle10.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 10
    - board =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64  0 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

  * puzzle11.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 11
    - board =
        3
         1  0  2 
         7  5  4 
         8  6  3 

  * puzzle12.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 12
    - board =
        5
         1  2  3  4  5 
        12  6  8  9 10 
         0  7 13 19 14 
        11 16 17 18 15 
        21 22 23 24 20 

  * puzzle13.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 13
    - board =
        4
         2  3  4  8 
         1  6  0 12 
         5 10  7 11 
         9 13 14 15 

==> FAILED

Test 1b: check solution() with file inputs
  * puzzle00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle01.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle02.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle03.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle04.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle05.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle06.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle07.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle08.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle09.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle10.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle11.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle12.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle13.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

==> FAILED

Test 2a: check moves() with more file inputs
  * puzzle14.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 14
    - board =
        7
         1  2  3  4  5  7 14 
         8  9 10 11 12 13  6 
        15 16 17 18 19 20 21 
        22 23 24 25 26 27 28 
        29 30 31 32  0 33 34 
        36 37 38 39 40 41 35 
        43 44 45 46 47 48 42 

  * puzzle15.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 15
    - board =
        8
         1  2  3  4  5  6  7  8 
         9 10 11 12 13 14 15 16 
        17 18 19 20 21 22 23 24 
         0 25 27 28 29 30 31 32 
        34 26 35 36 37 38 39 40 
        33 41 42 43 45 46 47 48 
        49 50 51 44 61 53 54 56 
        57 58 59 52 60 62 55 63 

  * puzzle16.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 16
    - board =
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 47 37 39 40 
        41 42 43 44 45 46  0 38 49 50 
        51 52 53 54 55 56 57 48 59 60 
        61 62 63 64 65 66 67 58 69 80 
        71 72 73 74 75 76 77 68 70 78 
        81 82 83 84 85 86 87 88 79 89 
        91 92 93 94 95 96 97 98 99 90 

  * puzzle17.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 17
    - board =
        3
         5  1  8 
         2  7  3 
         4  0  6 

  * puzzle18.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 18
    - board =
        3
         5  6  2 
         1  8  4 
         7  3  0 

  * puzzle19.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 19
    - board =
        3
         1  2  7 
         0  4  3 
         6  5  8 

  * puzzle20.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 20
    - board =
        3
         1  6  4 
         7  0  8 
         2  3  5 

  * puzzle21.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 21
    - board =
        3
         5  2  3 
         4  7  0 
         8  6  1 

  * puzzle22.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 22
    - board =
        3
         4  8  2 
         3  6  5 
         1  7  0 

  * puzzle23.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 23
    - board =
        3
         5  0  4 
         2  3  8 
         7  1  6 

  * puzzle24.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 24
    - board =
        3
         5  7  4 
         3  0  8 
         1  6  2 

  * puzzle25.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 25
    - board =
        3
         2  8  5 
         3  6  1 
         7  0  4 

  * puzzle26.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 26
    - board =
        3
         5  7  0 
         3  2  8 
         1  6  4 

  * puzzle27.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 27
    - board =
        3
         5  8  7 
         1  4  6 
         3  0  2 

  * puzzle28.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 28
    - board =
        3
         7  8  5 
         4  0  2 
         3  6  1 

  * puzzle29.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 29
    - board =
        3
         6  0  5 
         8  7  4 
         3  2  1 

  * puzzle30.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 30
    - board =
        3
         8  4  7 
         1  5  6 
         3  2  0 

  * puzzle31.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 31
    - board =
        3
         8  6  7 
         2  5  4 
         3  0  1 

==> FAILED

Test 2b: check solution() with more file inputs
  * puzzle14.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle15.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle16.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle17.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle18.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle19.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle20.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle21.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle22.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle23.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle24.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle25.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle26.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle27.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle28.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle29.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle30.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle31.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

==> FAILED

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 1
    - board =
        3
         1  2  3 
         4  5  0 
         7  8  6 

    - failed on trial 1 of 1000

==> FAILED

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

    - failed on trial 1 of 1000

==> FAILED

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
    - wrong number of moves()
    - student   moves() for puzzle04.txt = 0
    - reference moves() for puzzle04.txt = 4

  * puzzle00.txt and puzzle04.txt
    - wrong number of moves()
    - student   moves() for puzzle04.txt = 0
    - reference moves() for puzzle04.txt = 4

  * puzzle04.txt and puzzle00.txt
    - wrong number of moves()
    - student   moves() for puzzle04.txt = 0
    - reference moves() for puzzle04.txt = 4

==> FAILED

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        2
         1  0 
         3  2 

  * puzzle03.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        2
         2  0 
         1  3 

  * puzzle04.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        3
         0  1  3 
         4  2  5 
         7  8  6 

  * puzzle17.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        3
         5  1  8 
         2  7  3 
         4  0  6 

  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> FAILED

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        2
         2  0 
         1  3 

    - failed on trial 2 of 100

==> FAILED

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = -1
    - board =
        2
         1  0 
         2  3 

  * puzzle2x2-unsolvable2.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = -1
    - board =
        2
         0  1 
         2  3 

  * puzzle3x3-unsolvable1.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = -1
    - board =
        3
         1  2  3 
         4  6  5 
         7  8  0 

  * puzzle3x3-unsolvable2.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = -1
    - board =
        3
         8  6  7 
         2  5  4 
         1  3  0 

  * puzzle4x4-unsolvable.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = -1
    - board =
        4
         3  2  4  8 
         1  6  0 12 
         5 10  7 11 
         9 13 14 15 

==> FAILED

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
    - student solution() does not return null

  * puzzle2x2-unsolvable2.txt
    - student solution() does not return null

  * puzzle3x3-unsolvable1.txt
    - student solution() does not return null

  * puzzle3x3-unsolvable2.txt
    - student solution() does not return null

  * puzzle4x4-unsolvable.txt
    - student solution() does not return null

==> FAILED

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==> passed

Test 9a: check that equals() method in Board is called
  * puzzle00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

    - did not call the equals() method in Board
    - likely a bug in the critical optimization

  * puzzle04.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 4
    - board =
        3
         0  1  3 
         4  2  5 
         7  8  6 

    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

    - did not call the equals() method in Board
    - likely a bug in the critical optimization

  * puzzle05.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 5
    - board =
        3
         4  1  3 
         0  2  6 
         7  5  8 

    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

    - did not call the equals() method in Board
    - likely a bug in the critical optimization

  * puzzle10.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 10
    - board =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64  0 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

    - did not call the equals() method in Board
    - likely a bug in the critical optimization

==> FAILED

Test 9b: check that equals() method in Board is called only
         with an argument of type Board
  * puzzle00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle04.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 4
    - board =
        3
         0  1  3 
         4  2  5 
         7  8  6 

    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle05.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 5
    - board =
        3
         4  1  3 
         0  2  6 
         7  5  8 

    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle10.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 10
    - board =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64  0 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

==> passed

Test 9c: check that equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
  * puzzle27.txt
==> passed

Test 10: check that constructor throws exception if board is null
    - throws wrong exception when calling constructor with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 11a: check moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 1
    - board =
        2
         1  2 
         0  3 

  * puzzle2x2-02.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 2
    - board =
        2
         0  1 
         3  2 

  * puzzle2x2-03.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 3
    - board =
        2
         3  1 
         0  2 

  * puzzle2x2-04.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 4
    - board =
        2
         2  3 
         1  0 

  * puzzle2x2-05.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 5
    - board =
        2
         2  3 
         0  1 

  * puzzle2x2-06.txt
    - moves() returns wrong value
    - student   moves() = 0
    - reference moves() = 6
    - board =
        2
         0  3 
         2  1 

==> FAILED

Test 11b: check solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle2x2-01.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle2x2-02.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 0
    - moves()              = 0

  * puzzle2x2-03.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution(

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.