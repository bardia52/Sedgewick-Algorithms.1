See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 2 warnings)
API:          PASSED

Spotbugs:     FAILED (1 warning)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 3 warnings)

Correctness:  28/49 tests passed
Memory:       22/22 tests passed
Timing:       25/125 tests passed

Aggregate score: 53.29%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 12K Aug 27 21:00 Board.java
2.2K Aug 27 21:00 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------
Solver.java:18: warning: [rawtypes] found raw type: MinPQ
    private final MinPQ<SearchNode> minPQ = new MinPQ();
                                                ^
  missing type arguments for generic class MinPQ<Key>
  where Key is a type-variable:
    Key extends Object declared in class MinPQ
Solver.java:18: warning: [unchecked] unchecked conversion
    private final MinPQ<SearchNode> minPQ = new MinPQ();
                                            ^
  required: MinPQ<Solver.SearchNode>
  found:    MinPQ
2 warnings


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L P URF_UNREAD_FIELD UrF: The instance (or static) variable 'previous' is never read. Consider removing it from the class.  At Solver.java:[line 55]
Warnings generated: 1


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Board.java
*-----------------------------------------------------------
[WARN] Board.java:16:1: Defining a nested class in this program suggests poor design. [DescendantToken]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:12: You should use 'isGoal()' to check whether a board is the goal board. [MethodCallCount]
[WARN] Solver.java:18:19: Can you make the variable of type 'MinPQ' a local variable instead of an instance (or static) variable? [Design]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 24 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
  * argument is of type String
  * Board object stored in a variable of type Object
==> passed

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
  * n = 3
  * n = 4
  * 5 <= n < 10
==> passed

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
  * m = 2, n = 5
  * m = 5, n = 3
  * m = 2, n = 3
  * m = 3, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check dimension() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 15: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed


Total: 24/24 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2           136                  128
=> passed     3           200                  192
=> passed     4           248                  240
=> passed     8           568                  560
=> passed    12          1016                 1008
=> passed    16          1592                 1584
=> passed    20          2296                 2288
=> passed    37          6864                 6856
=> passed    72         23096                23088
=> passed   120         61496                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 56.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
    - moves() returns wrong value
    - student   moves() = 9
    - reference moves() = 11
    - board =
        3
         1  0  2 
         7  5  4 
         8  6  3 

  * puzzle12.txt
  * puzzle13.txt
==> FAILED

Test 1b: check solution() with file inputs
  * puzzle00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 0

  * puzzle01.txt
    - wrong initial board
    - student   solution() initial board =
        2
         1  2 
         3  0 
    - reference solution() initial board =
        2
         1  0 
         3  2 

  * puzzle02.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 2

  * puzzle03.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 3

  * puzzle04.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 4

  * puzzle05.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 5

  * puzzle06.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 6

  * puzzle07.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 7

  * puzzle08.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 8

  * puzzle09.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 9

  * puzzle10.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 10

  * puzzle11.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 9

  * puzzle12.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 12

  * puzzle13.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 13

==> FAILED

Test 2a: check moves() with more file inputs
  * puzzle14.txt
    - moves() returns wrong value
    - student   moves() = 8
    - reference moves() = 14
    - board =
        7
         1  2  3  4  5  7 14 
         8  9 10 11 12 13  6 
        15 16 17 18 19 20 21 
        22 23 24 25 26 27 28 
        29 30 31 32  0 33 34 
        36 37 38 39 40 41 35 
        43 44 45 46 47 48 42 

  * puzzle15.txt
  * puzzle16.txt
    - moves() returns wrong value
    - student   moves() = 14
    - reference moves() = 16
    - board =
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 47 37 39 40 
        41 42 43 44 45 46  0 38 49 50 
        51 52 53 54 55 56 57 48 59 60 
        61 62 63 64 65 66 67 58 69 80 
        71 72 73 74 75 76 77 68 70 78 
        81 82 83 84 85 86 87 88 79 89 
        91 92 93 94 95 96 97 98 99 90 

  * puzzle17.txt
    - moves() returns wrong value
    - student   moves() = 13
    - reference moves() = 17
    - board =
        3
         5  1  8 
         2  7  3 
         4  0  6 

  * puzzle18.txt
    - moves() returns wrong value
    - student   moves() = 12
    - reference moves() = 18
    - board =
        3
         5  6  2 
         1  8  4 
         7  3  0 

  * puzzle19.txt
    - moves() returns wrong value
    - student   moves() = 11
    - reference moves() = 19
    - board =
        3
         1  2  7 
         0  4  3 
         6  5  8 

  * puzzle20.txt
    - moves() returns wrong value
    - student   moves() = 16
    - reference moves() = 20
    - board =
        3
         1  6  4 
         7  0  8 
         2  3  5 

  * puzzle21.txt
    - moves() returns wrong value
    - student   moves() = 11
    - reference moves() = 21
    - board =
        3
         5  2  3 
         4  7  0 
         8  6  1 

  * puzzle22.txt
    - moves() returns wrong value
    - student   moves() = 12
    - reference moves() = 22
    - board =
        3
         4  8  2 
         3  6  5 
         1  7  0 

  * puzzle23.txt
    - moves() returns wrong value
    - student   moves() = 15
    - reference moves() = 23
    - board =
        3
         5  0  4 
         2  3  8 
         7  1  6 

  * puzzle24.txt
    - moves() returns wrong value
    - student   moves() = 20
    - reference moves() = 24
    - board =
        3
         5  7  4 
         3  0  8 
         1  6  2 

  * puzzle25.txt
    - moves() returns wrong value
    - student   moves() = 15
    - reference moves() = 25
    - board =
        3
         2  8  5 
         3  6  1 
         7  0  4 

  * puzzle26.txt
    - moves() returns wrong value
    - student   moves() = 18
    - reference moves() = 26
    - board =
        3
         5  7  0 
         3  2  8 
         1  6  4 

  * puzzle27.txt
    - moves() returns wrong value
    - student   moves() = 17
    - reference moves() = 27
    - board =
        3
         5  8  7 
         1  4  6 
         3  0  2 

  * puzzle28.txt
    - moves() returns wrong value
    - student   moves() = 18
    - reference moves() = 28
    - board =
        3
         7  8  5 
         4  0  2 
         3  6  1 

  * puzzle29.txt
    - moves() returns wrong value
    - student   moves() = 21
    - reference moves() = 29
    - board =
        3
         6  0  5 
         8  7  4 
         3  2  1 

  * puzzle30.txt
    - moves() returns wrong value
    - student   moves() = 16
    - reference moves() = 30
    - board =
        3
         8  4  7 
         1  5  6 
         3  2  0 

  * puzzle31.txt
    - moves() returns wrong value
    - student   moves() = 21
    - reference moves() = 31
    - board =
        3
         8  6  7 
         2  5  4 
         3  0  1 

==> FAILED

Test 2b: check solution() with more file inputs
  * puzzle14.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 8

  * puzzle15.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 15

  * puzzle16.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 14

  * puzzle17.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 13

  * puzzle18.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 12

  * puzzle19.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 11

  * puzzle20.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 16

  * puzzle21.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 11

  * puzzle22.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 12

  * puzzle23.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 15

  * puzzle24.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 20

  * puzzle25.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 15

  * puzzle26.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 18

  * puzzle27.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 17

  * puzzle28.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 18

  * puzzle29.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 21

  * puzzle30.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 16

  * puzzle31.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 21

==> FAILED

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
    - moves() returns wrong value
    - student   moves() = 4
    - reference moves() = 6
    - board =
        3
         1  2  3 
         5  7  6 
         4  8  0 

    - failed on trial 17 of 1000

==> FAILED

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 1

    - failed on trial 1 of 1000

==> FAILED

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        2
         1  0 
         3  2 

  * puzzle03.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        2
         2  0 
         1  3 

  * puzzle04.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        3
         0  1  3 
         4  2  5 
         7  8  6 

  * puzzle17.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        3
         5  1  8 
         2  7  3 
         4  0  6 

  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> FAILED

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        2
         2  3 
         1  0 

    - failed on trial 1 of 100

==> FAILED

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
    - moves() returns wrong value
    - student   moves() = 3
    - reference moves() = -1
    - board =
        2
         1  0 
         2  3 

  * puzzle2x2-unsolvable2.txt
    - moves() returns wrong value
    - student   moves() = 4
    - reference moves() = -1
    - board =
        2
         0  1 
         2  3 

  * puzzle3x3-unsolvable1.txt
    - moves() returns wrong value
    - student   moves() = 2
    - reference moves() = -1
    - board =
        3
         1  2  3 
         4  6  5 
         7  8  0 

  * puzzle3x3-unsolvable2.txt
    - moves() returns wrong value
    - student   moves() = 18
    - reference moves() = -1
    - board =
        3
         8  6  7 
         2  5  4 
         1  3  0 

  * puzzle4x4-unsolvable.txt
    - moves() returns wrong value
    - student   moves() = 13
    - reference moves() = -1
    - board =
        4
         3  2  4  8 
         1  6  0 12 
         5 10  7 11 
         9 13 14 15 

==> FAILED

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
    - student solution() does not return null

  * puzzle2x2-unsolvable2.txt
    - student solution() does not return null

  * puzzle3x3-unsolvable1.txt
    - student solution() does not return null

  * puzzle3x3-unsolvable2.txt
    - student solution() does not return null

  * puzzle4x4-unsolvable.txt
    - student solution() does not return null

==> FAILED

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
    java.util.NoSuchElementException: Priority queue underflow

    edu.princeton.cs.algs4.MinPQ.delMin(MinPQ.java:233)
    Solver.solution(Solver.java:40)
    TestSolver.checkImmutableSolver(TestSolver.java:462)
    TestSolver.checkImmutableSolver(TestSolver.java:551)
    TestSolver.test8a(TestSolver.java:777)
    TestSolver.main(TestSolver.java:985)

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.isSolvable() -> true
          solver.moves() -> 0
          solver.solution()
          solver.solution()

  * puzzle3x3-01.txt
    java.util.NoSuchElementException: Priority queue underflow

    edu.princeton.cs.algs4.MinPQ.delMin(MinPQ.java:233)
    Solver.solution(Solver.java:40)
    TestSolver.checkImmutableSolver(TestSolver.java:462)
    TestSolver.checkImmutableSolver(TestSolver.java:551)
    TestSolver.test8a(TestSolver.java:778)
    TestSolver.main(TestSolver.java:985)

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.moves() -> 1
          solver.isSolvable() -> false
          solver.moves() -> 1
          solver.isSolvable() -> false
          solver.solution()
          solver.isSolvable() -> false
          solver.solution()

  * puzzle3x3-05.txt
    java.util.NoSuchElementException: Priority queue underflow

    edu.princeton.cs.algs4.MinPQ.delMin(MinPQ.java:233)
    Solver.solution(Solver.java:40)
    TestSolver.checkImmutableSolver(TestSolver.java:462)
    TestSolver.checkImmutableSolver(TestSolver.java:551)
    TestSolver.test8a(TestSolver.java:779)
    TestSolver.main(TestSolver.java:985)

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.solution()
          solver.isSolvable() -> false
          solver.solution()

  * puzzle3x3-10.txt
    java.util.NoSuchElementException: Priority queue underflow

    edu.princeton.cs.algs4.MinPQ.delMin(MinPQ.java:233)
    Solver.solution(Solver.java:40)
    TestSolver.checkImmutableSolver(TestSolver.java:462)
    TestSolver.checkImmutableSolver(TestSolver.java:551)
    TestSolver.test8a(TestSolver.java:780)
    TestSolver.main(TestSolver.java:985)

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.solution()
          solver.isSolvable() -> false
          solver.solution()

  * random 2-by-2 solvable boards
    java.util.NoSuchElementException: Priority queue underflow

    edu.princeton.cs.algs4.MinPQ.delMin(MinPQ.java:233)
    Solver.solution(Solver.java:40)
    TestSolver.checkImmutableSolver(TestSolver.java:462)
    TestSolver.checkImmutableSolverSolvableBoards(TestSolver.java:519)
    TestSolver.test8a(TestSolver.java:781)
    TestSolver.main(TestSolver.java:985)

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.solution()
          solver.moves() -> 0
          solver.solution()

    - failed on trial 1 of 10

==> FAILED

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
    java.util.NoSuchElementException: Priority queue underflow

    edu.princeton.cs.algs4.MinPQ.delMin(MinPQ.java:233)
    Solver.solution(Solver.java:40)
    TestSolver.checkImmutableSolver(TestSolver.java:462)
    TestSolver.checkImmutableSolver(TestSolver.java:551)
    TestSolver.test8b(TestSolver.java:789)
    TestSolver.main(TestSolver.java:988)

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.isSolvable() -> false
          solver.solution()
          solver.solution()

  * puzzle3x3-unsolvable2.txt
    java.util.NoSuchElementException: Priority queue underflow

    edu.princeton.cs.algs4.MinPQ.delMin(MinPQ.java:233)
    Solver.solution(Solver.java:40)
    TestSolver.checkImmutableSolver(TestSolver.java:462)
    TestSolver.checkImmutableSolver(TestSolver.java:551)
    TestSolver.test8b(TestSolver.java:790)
    TestSolver.main(TestSolver.java:988)

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.moves() -> 18
          solver.isSolvable() -> false
          solver.moves() -> 18
          solver.moves() -> 18
          solver.solution()
          solver.moves() -> 18
          solver.solution()

  * puzzle4x4-unsolvable.txt
    java.util.NoSuchElementException: Priority queue underflow

    edu.princeton.cs.algs4.MinPQ.delMin(MinPQ.java:233)
    Solver.solution(Solver.java:40)
    TestSolver.checkImmutableSolver(TestSolver.java:462)
    TestSolver.checkImmutableSolver(TestSolver.java:551)
    TestSolver.test8b(TestSolver.java:791)
    TestSolver.main(TestSolver.java:988)

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.isSolvable() -> false
          solver.isSolvable() -> false
          solver.moves() -> 13
          solver.isSolvable() -> false
          solver.isSolvable() -> false
          solver.solution()
          solver.moves() -> 13
          solver.moves() -> 13
          solver.solution()

  * random 2-by-2 unsolvable boards
    java.util.NoSuchElementException: Priority queue underflow

    edu.princeton.cs.algs4.MinPQ.delMin(MinPQ.java:233)
    Solver.solution(Solver.java:40)
    TestSolver.checkImmutableSolver(TestSolver.java:462)
    TestSolver.checkImmutableSolverUnsolvableBoards(TestSolver.java:535)
    TestSolver.test8b(TestSolver.java:792)
    TestSolver.main(TestSolver.java:988)

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.moves() -> 2
          solver.moves() -> 2
          solver.isSolvable() -> false
          solver.solution()
          solver.moves() -> 2
          solver.solution()

    - failed on trial 1 of 10

==> FAILED

Test 9a: check that equals() method in Board is called
  * puzzle00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 0

  * puzzle04.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 4

  * puzzle05.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 5

  * puzzle10.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 10

==> passed

Test 9b: check that equals() method in Board is called only
         with an argument of type Board
  * puzzle00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 0

  * puzzle04.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 4

  * puzzle05.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 5

  * puzzle10.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 10

==> passed

Test 9c: check that equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78 79 80 
        81 82 83 84 85 86 87 88 89 90 
        91 92 93 94 95 96 97 98  0 99 

    - board 2:
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78 79 80 
        81 82 83 84 85 86 87 88 89 90 
        91 92 93 94 95 96 97 98 99  0 

  * puzzle04.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        3
         4  1  3 
         0  2  5 
         7  8  6 

    - board 2:
        3
         0  1  3 
         4  2  5 
         7  8  6 

  * puzzle05.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        3
         4  1  3 
         7  2  6 
         0  5  8 

    - board 2:
        3
         4  1  3 
         0  2  6 
         7  5  8 

  * puzzle10.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64 74 65 67 68 78 69 70 72 
        73  0 66 75 76 77 79 71 80 

    - board 2:
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64  0 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

  * puzzle27.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        3
         5  8  7 
         1  4  6 
         3  2  0 

    - board 2:
        3
         5  8  7 
         1  4  6 
         3  0  2 

==> FAILED

Test 10: check that constructor throws exception if board is null
    - throws wrong exception when calling constructor with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 11a: check moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 11b: check solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 0

  * puzzle2x2-01.txt
    - wrong initial board
    - student   solution() initial board =
        2
         1  2 
         3  0 
    - reference solution() initial board =
        2
         1  2 
         0  3 

  * puzzle2x2-02.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 2

  * puzzle2x2-03.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 3

  * puzzle2x2-04.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 4

  * puzzle2x2-05.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 5

  * puzzle2x2-06.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 6

==> FAILED

Test 12a: check moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
    - moves() returns wrong value
    - student   moves() = 9
    - reference moves() = 11
    - board =
        3
         1  3  5 
         7  2  6 
         8  0  4 

  * puzzle3x3-12.txt
    - moves() returns wrong value
    - student   moves() = 10
    - reference moves() = 12
    - board =
        3
         4  1  2 
         3  0  6 
         5  7  8 

  * puzzle3x3-13.txt
    - moves() returns wrong value
    - student   moves() = 11
    - reference moves() = 13
    - board =
        3
         4  3  1 
         0  7  2 
         8  5  6 

  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
    - moves() returns wrong value
    - student   moves() = 13
    - reference moves() = 15
    - board =
        3
         2  0  8 
         1  3  5 
         4  6  7 

  * puzzle3x3-16.txt
    - moves() returns wrong value
    - student   moves() = 8
    - reference moves() = 16
    - board =
        3
         5  2  1 
         4  8  3 
         7  6  0 

  * puzzle3x3-17.txt
    - moves() returns wrong value
    - student   moves() = 7
    - reference moves() = 17
    - board =
        3
         4  3  1 
         0  2  6 
         7  8  5 

  * puzzle3x3-18.txt
    - moves() returns wrong value
    - student   moves() = 12
    - reference moves() = 18
    - board =
        3
         1  4  3 
         7  0  8 
         6  5  2 

  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
    - moves() returns wrong value
    - student   moves() = 12
    - reference moves() = 20
    - board =
        3
         7  4  3 
         2  8  6 
         0  5  1 

  * puzzle3x3-21.txt
    - moves() returns wrong value
    - student   moves() = 13
    - reference moves() = 21
    - board =
        3
         8  7  2 
         1  5  0 
         4  6  3 

  * puzzle3x3-22.txt
    - moves() returns wrong value
    - student   moves() = 12
    - reference moves() = 22
    - board =
        3
         5  3  6 
         4  0  7 
         1  8  2 

  * puzzle3x3-23.txt
    - moves() returns wrong value
    - student   moves() = 15
    - reference moves() = 23
    - board =
        3
         6  0  8 
         4  3  5 
         1  2  7 

  * puzzle3x3-24.txt
    - moves() returns wrong value
    - student   moves() = 12
    - reference moves() = 24
    - board =
        3
         6  5  3 
         4  1  7 
         0  2  8 

  * puzzle3x3-25.txt
    - moves() returns wrong value
    - student   moves() = 15
    - reference moves() = 25
    - board =
        3
         8  3  5 
         6  4  2 
         1  0  7 

  * puzzle3x3-26.txt
    - moves() returns wrong value
    - student   moves() = 18
    - reference moves() = 26
    - board =
        3
         4  8  7 
         5  3  1 
         0  6  2 

  * puzzle3x3-27.txt
    - moves() returns wrong value
    - student   moves() = 13
    - reference moves() = 27
    - board =
        3
         1  6  4 
         0  3  5 
         8  2  7 

  * puzzle3x3-28.txt
    - moves() returns wrong value
    - student   moves() = 14
    - reference moves() = 28
    - board =
        3
         6  3  8 
         5  4  1 
         7  2  0 

  * puzzle3x3-29.txt
    - moves() returns wrong value
    - student   moves() = 15
    - reference moves() = 29
    - board =
        3
         1  8  5 
         0  2  4 
         3  6  7 

  * puzzle3x3-30.txt
    - moves() returns wrong value
    - student   moves() = 22
    - reference moves() = 30
    - board =
        3
         8  6  7 
         2  0  4 
         3  5  1 

==> FAILED

Test 12b: check solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 0

  * puzzle3x3-01.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 1

  * puzzle3x3-02.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 2

  * puzzle3x3-03.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 3

  * puzzle3x3-04.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 4

  * puzzle3x3-05.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 5

  * puzzle3x3-06.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 6

  * puzzle3x3-07.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 7

  * puzzle3x3-08.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 8

  * puzzle3x3-09.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 9

  * puzzle3x3-10.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 10

  * puzzle3x3-11.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 9

  * puzzle3x3-12.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 10

  * puzzle3x3-13.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 11

  * puzzle3x3-14.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 14

  * puzzle3x3-15.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 13

  * puzzle3x3-16.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 8

  * puzzle3x3-17.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 7

  * puzzle3x3-18.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 12

  * puzzle3x3-19.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 19

  * puzzle3x3-20.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 12

  * puzzle3x3-21.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 13

  * puzzle3x3-22.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 12

  * puzzle3x3-23.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 15

  * puzzle3x3-24.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 12

  * puzzle3x3-25.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 15

  * puzzle3x3-26.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 18

  * puzzle3x3-27.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 13

  * puzzle3x3-28.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 14

  * puzzle3x3-29.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 15

  * puzzle3x3-30.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 22

==> FAILED

Test 13a: check moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
    - moves() returns wrong value
    - student   moves() = 12
    - reference moves() = 14
    - board =
        4
         1  2  8  3 
         5 11  6  4 
         0 10  7 12 
         9 13 14 15 

  * puzzle4x4-15.txt
    - moves() returns wrong value
    - student   moves() = 11
    - reference moves() = 15
    - board =
        4
         5  1  3  4 
        13  2  7  8 
         6 10 11 12 
        14  9  0 15 

  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
    - moves() returns wrong value
    - student   moves() = 15
    - reference moves() = 17
    - board =
        4
         5  2  4  0 
         6  1  3  8 
        13 11  7 12 
        10  9 14 15 

  * puzzle4x4-18.txt
    - moves() returns wrong value
    - student   moves() = 10
    - reference moves() = 18
    - board =
        4
         2  5  3  4 
         1  7 11  8 
         9  6  0 12 
        13 14 15 10 

  * puzzle4x4-19.txt
    - moves() returns wrong value
    - student   moves() = 15
    - reference moves() = 19
    - board =
        4
         3  7  2  4 
         1  5 10  8 
         6  0 11 12 
         9 13 14 15 

  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
    - moves() returns wrong value
    - student   moves() = 15
    - reference moves() = 21
    - board =
        4
         3  7  1  0 
         6  2  8  4 
         5 10 11 12 
         9 13 14 15 

  * puzzle4x4-22.txt
    - moves() returns wrong value
    - student   moves() = 20
    - reference moves() = 22
    - board =
        4
         1  4  8  3 
         7  2 10 11 
         5  6  0 15 
         9 13 14 12 

  * puzzle4x4-23.txt
    - moves() returns wrong value
    - student   moves() = 15
    - reference moves() = 23
    - board =
        4
         1  2  3  4 
         5  6 14  8 
        13  0  9 11 
        10 12 15  7 

  * puzzle4x4-24.txt
    - moves() returns wrong value
    - student   moves() = 20
    - reference moves() = 24
    - board =
        4
         9  5  1  2 
         6  4  8  3 
        10 14  7 11 
        13  0 15 12 

  * puzzle4x4-25.txt
    - moves() returns wrong value
    - student   moves() = 19
    - reference moves() = 25
    - board =
        4
         2  5  1  3 
         9  6 12  4 
        10 14  8  0 
        13 11 15  7 

  * puzzle4x4-26.txt
    - moves() returns wrong value
    - student   moves() = 20
    - reference moves() = 26
    - board =
        4
         1 10  6  4 
         5  9  2  8 
        13 12  0  7 
        14 11  3 15 

  * puzzle4x4-27.txt
    - moves() returns wrong value
    - student   moves() = 19
    - reference moves() = 27
    - board =
        4
         1  2  3  0 
         5 12  7  4 
        13  6 14  9 
        10  8 11 15 

  * puzzle4x4-28.txt
    - moves() returns wrong value
    - student   moves() = 18
    - reference moves() = 28
    - board =
        4
         2  5  4  7 
         9  1  3  8 
        11 10  0  6 
        14 13 15 12 

  * puzzle4x4-29.txt
    - moves() returns wrong value
    - student   moves() = 21
    - reference moves() = 29
    - board =
        4
         1  8  3  0 
         5  7  4 12 
        14  6  2 15 
         9 13 10 11 

  * puzzle4x4-30.txt
    - moves() returns wrong value
    - student   moves() = 26
    - reference moves() = 30
    - board =
        4
         2  4  8 12 
         1  7  3 14 
         0  6 15 11 
         5  9 13 10 

==> FAILED

Test 13b: check solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 0

  * puzzle4x4-01.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 1

  * puzzle4x4-02.txt
    - wrong initial board
    - student   solution() initial board =
        4
         1  2  3  4 
         5  6  7  8 
         9 10 11  0 
        13 14 15 12 
    - reference solution() initial board =
        4
         1  2  3  4 
         5  6  7  0 
         9 10 11  8 
        13 14 15 12 

  * puzzle4x4-03.txt
    - wrong initial board
    - student   solution() initial board =
        4
         1  2  3  4 
         5  6  7  8 
         9 10  0 12 
        13 14 11 15 
    - reference solution() initial board =
        4
         1  2  3  4 
         5  6  0  8 
         9 10  7 12 
        13 14 11 15 

  * puzzle4x4-04.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 4

  * puzzle4x4-05.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 5

  * puzzle4x4-06.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 6

  * puzzle4x4-07.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 7

  * puzzle4x4-08.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 8

  * puzzle4x4-09.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 9

  * puzzle4x4-10.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 10

  * puzzle4x4-11.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 11

  * puzzle4x4-12.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 12

  * puzzle4x4-13.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 13

  * puzzle4x4-14.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 12

  * puzzle4x4-15.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 11

  * puzzle4x4-16.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()           

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.